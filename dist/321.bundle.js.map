{"version":3,"file":"321.bundle.js","mappings":"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","sources":["webpack://spiritual-condition-tracker/./node_modules/@capacitor-community/sqlite/dist/esm/definitions.js","webpack://spiritual-condition-tracker/./node_modules/@capacitor-community/sqlite/dist/esm/index.js","webpack://spiritual-condition-tracker/./node_modules/@capacitor/core/dist/index.js"],"sourcesContent":["//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n    constructor(sqlite) {\n        this.sqlite = sqlite;\n        this._connectionDict = new Map();\n    }\n    async initWebStore() {\n        try {\n            await this.sqlite.initWebStore();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToStore(database) {\n        try {\n            await this.sqlite.saveToStore({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToLocalDisk(database) {\n        try {\n            await this.sqlite.saveToLocalDisk({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromLocalDiskToStore(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromLocalDiskToStore({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async echo(value) {\n        try {\n            const res = await this.sqlite.echo({ value });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isSecretStored() {\n        try {\n            const res = await this.sqlite.isSecretStored();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        try {\n            await this.sqlite.setEncryptionSecret({ passphrase: passphrase });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        try {\n            await this.sqlite.changeEncryptionSecret({\n                passphrase: passphrase,\n                oldpassphrase: oldpassphrase,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async clearEncryptionSecret() {\n        try {\n            await this.sqlite.clearEncryptionSecret();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkEncryptionSecret(passphrase) {\n        try {\n            const res = await this.sqlite.checkEncryptionSecret({\n                passphrase: passphrase,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addUpgradeStatement(database, upgrade) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.addUpgradeStatement({\n                database,\n                upgrade,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createConnection(database, encrypted, mode, version, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.createConnection({\n                database,\n                encrypted,\n                mode,\n                version,\n                readonly,\n            });\n            const conn = new SQLiteDBConnection(database, readonly, this.sqlite);\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.set(connName, conn);\n            /*\n            console.log(`*** in createConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeConnection(database, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.closeConnection({ database, readonly });\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.delete(connName);\n            /*      console.log(`*** in closeConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isConnection(database, readonly) {\n        const res = {};\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveConnection(database, readonly) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        if (this._connectionDict.has(connName)) {\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${database} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${database} does not exist`);\n        }\n    }\n    async getNCDatabasePath(path, database) {\n        try {\n            const databasePath = await this.sqlite.getNCDatabasePath({\n                path,\n                database,\n            });\n            return Promise.resolve(databasePath);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createNCConnection(databasePath, version) {\n        try {\n            await this.sqlite.createNCConnection({\n                databasePath,\n                version,\n            });\n            const conn = new SQLiteDBConnection(databasePath, true, this.sqlite);\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.set(connName, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeNCConnection(databasePath) {\n        try {\n            await this.sqlite.closeNCConnection({ databasePath });\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.delete(connName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isNCConnection(databasePath) {\n        const res = {};\n        const connName = `RO_${databasePath})`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveNCConnection(databasePath) {\n        if (this._connectionDict.has(databasePath)) {\n            const connName = `RO_${databasePath})`;\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${databasePath} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${databasePath} does not exist`);\n        }\n    }\n    async isNCDatabase(databasePath) {\n        try {\n            const res = await this.sqlite.isNCDatabase({ databasePath });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async retrieveAllConnections() {\n        return this._connectionDict;\n    }\n    async closeAllConnections() {\n        const delDict = new Map();\n        try {\n            /*      console.log(`*** in closeAllConnections connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            for (const key of this._connectionDict.keys()) {\n                const database = key.substring(3);\n                const readonly = key.substring(0, 3) === 'RO_' ? true : false;\n                await this.sqlite.closeConnection({ database, readonly });\n                delDict.set(key, null);\n            }\n            for (const key of delDict.keys()) {\n                this._connectionDict.delete(key);\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkConnectionsConsistency() {\n        try {\n            const keys = [...this._connectionDict.keys()];\n            const openModes = [];\n            const dbNames = [];\n            for (const key of keys) {\n                openModes.push(key.substring(0, 2));\n                dbNames.push(key.substring(3));\n            }\n            const res = await this.sqlite.checkConnectionsConsistency({\n                dbNames: dbNames,\n                openModes: openModes,\n            });\n            if (!res.result)\n                this._connectionDict = new Map();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            this._connectionDict = new Map();\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(jsonstring) {\n        try {\n            const ret = await this.sqlite.importFromJson({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isJsonValid(jsonstring) {\n        try {\n            const ret = await this.sqlite.isJsonValid({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.copyFromAssets({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromHTTPRequest(url, overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromHTTPRequest({ url, overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabaseEncrypted(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabaseEncrypted({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigEncryption() {\n        try {\n            const res = await this.sqlite.isInConfigEncryption();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigBiometricAuth() {\n        try {\n            const res = await this.sqlite.isInConfigBiometricAuth();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabase(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabase({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDatabaseList() {\n        try {\n            const res = await this.sqlite.getDatabaseList();\n            const values = res.values;\n            values.sort();\n            const ret = { values: values };\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getMigratableDbList(folderPath) {\n        const path = folderPath ? folderPath : 'default';\n        try {\n            const res = await this.sqlite.getMigratableDbList({\n                folderPath: path,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.addSQLiteSuffix({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteOldDatabases(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.deleteOldDatabases({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        return this.sqlite.moveDatabasesAndAddSuffix({\n            folderPath: path,\n            dbNameList: dbList,\n        });\n    }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n    constructor(dbName, readonly, sqlite) {\n        this.dbName = dbName;\n        this.readonly = readonly;\n        this.sqlite = sqlite;\n    }\n    getConnectionDBName() {\n        return this.dbName;\n    }\n    getConnectionReadOnly() {\n        return this.readonly;\n    }\n    async open() {\n        try {\n            await this.sqlite.open({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async close() {\n        try {\n            await this.sqlite.close({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async beginTransaction() {\n        try {\n            const changes = await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async commitTransaction() {\n        try {\n            const changes = await this.sqlite.commitTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async rollbackTransaction() {\n        try {\n            const changes = await this.sqlite.rollbackTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTransactionActive() {\n        try {\n            const result = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            return Promise.resolve(result);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async loadExtension(path) {\n        try {\n            await this.sqlite.loadExtension({\n                database: this.dbName,\n                path: path,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async enableLoadExtension(toggle) {\n        try {\n            await this.sqlite.enableLoadExtension({\n                database: this.dbName,\n                toggle: toggle,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getUrl() {\n        try {\n            const res = await this.sqlite.getUrl({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getVersion() {\n        try {\n            const version = await this.sqlite.getVersion({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(version);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getTableList() {\n        try {\n            const res = await this.sqlite.getTableList({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async execute(statements, transaction = true, isSQL92 = true) {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.execute({\n                    database: this.dbName,\n                    statements: statements,\n                    transaction: transaction,\n                    readonly: false,\n                    isSQL92: isSQL92,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async query(statement, values, isSQL92 = true) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                    readonly: this.readonly,\n                    isSQL92: true,\n                });\n            }\n            else {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                    readonly: this.readonly,\n                    isSQL92: isSQL92,\n                });\n            }\n            // reorder rows for ios\n            res = await this.reorderRows(res);\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async run(statement, values, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                if (values && values.length > 0) {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: values,\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: true,\n                    });\n                }\n                else {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: [],\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: isSQL92,\n                    });\n                }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeSet(set, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                res = await this.sqlite.executeSet({\n                    database: this.dbName,\n                    set: set,\n                    transaction: transaction,\n                    readonly: false,\n                    returnMode: returnMode,\n                    isSQL92: isSQL92,\n                });\n                //      }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isExists() {\n        try {\n            const res = await this.sqlite.isDBExists({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        try {\n            const res = await this.sqlite.isTableExists({\n                database: this.dbName,\n                table: table,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDBOpen() {\n        try {\n            const res = await this.sqlite.isDBOpen({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async delete() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteDatabase({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createSyncTable() {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.createSyncTable({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setSyncDate(syncdate) {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.setSyncDate({\n                    database: this.dbName,\n                    syncdate: syncdate,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getSyncDate() {\n        try {\n            const res = await this.sqlite.getSyncDate({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            let retDate = '';\n            if (res.syncDate > 0)\n                retDate = new Date(res.syncDate * 1000).toISOString();\n            return Promise.resolve(retDate);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async exportToJson(mode, encrypted = false) {\n        try {\n            const res = await this.sqlite.exportToJson({\n                database: this.dbName,\n                jsonexportmode: mode,\n                readonly: this.readonly,\n                encrypted: encrypted,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteExportedRows() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteExportedRows({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeTransaction(txn, isSQL92 = true) {\n        let changes = 0;\n        let isActive = false;\n        if (!this.readonly) {\n            await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            isActive = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            if (!isActive) {\n                return Promise.reject('After Begin Transaction, no transaction active');\n            }\n            try {\n                for (const task of txn) {\n                    if (typeof task !== 'object' || !('statement' in task)) {\n                        throw new Error('Error a task.statement must be provided');\n                    }\n                    if ('values' in task && task.values && task.values.length > 0) {\n                        const retMode = task.statement.toUpperCase().includes('RETURNING') ? 'all' : 'no';\n                        const ret = await this.sqlite.run({\n                            database: this.dbName,\n                            statement: task.statement,\n                            values: task.values,\n                            transaction: false,\n                            readonly: false,\n                            returnMode: retMode,\n                            isSQL92: isSQL92,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method run ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                    else {\n                        const ret = await this.sqlite.execute({\n                            database: this.dbName,\n                            statements: task.statement,\n                            transaction: false,\n                            readonly: false,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method execute ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                }\n                // commit\n                const retC = await this.sqlite.commitTransaction({\n                    database: this.dbName,\n                });\n                changes += retC.changes.changes;\n                const retChanges = { changes: { changes: changes } };\n                return Promise.resolve(retChanges);\n            }\n            catch (err) {\n                // rollback\n                const msg = err.message ? err.message : err;\n                await this.sqlite.rollbackTransaction({\n                    database: this.dbName,\n                });\n                return Promise.reject(msg);\n            }\n        }\n        else {\n            return Promise.reject('not allowed in read-only mode');\n        }\n    }\n    async reorderRows(res) {\n        const retRes = res;\n        if (res?.values && typeof res.values[0] === 'object') {\n            if (Object.keys(res.values[0]).includes('ios_columns')) {\n                const columnList = res.values[0]['ios_columns'];\n                const iosRes = [];\n                for (let i = 1; i < res.values.length; i++) {\n                    const rowJson = res.values[i];\n                    const resRowJson = {};\n                    for (const item of columnList) {\n                        resRowJson[item] = rowJson[item];\n                    }\n                    iosRes.push(resRowJson);\n                }\n                retRes['values'] = iosRes;\n            }\n        }\n        return Promise.resolve(retRes);\n    }\n}\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst CapacitorSQLite = registerPlugin('CapacitorSQLite', {\n    web: () => import('./web').then((m) => new m.CapacitorSQLiteWeb()),\n    electron: () => window.CapacitorCustomPlatform.plugins.CapacitorSQLite,\n});\nexport { CapacitorSQLite };\nexport * from './definitions';\n//# sourceMappingURL=index.js.map","/*! Capacitor: https://capacitorjs.com/ - MIT License */\nvar ExceptionCode;\n(function (ExceptionCode) {\n    /**\n     * API is not implemented.\n     *\n     * This usually means the API can't be used because it is not implemented for\n     * the current platform.\n     */\n    ExceptionCode[\"Unimplemented\"] = \"UNIMPLEMENTED\";\n    /**\n     * API is not available.\n     *\n     * This means the API can't be used right now because:\n     *   - it is currently missing a prerequisite, such as network connectivity\n     *   - it requires a particular platform or browser version\n     */\n    ExceptionCode[\"Unavailable\"] = \"UNAVAILABLE\";\n})(ExceptionCode || (ExceptionCode = {}));\nclass CapacitorException extends Error {\n    constructor(message, code, data) {\n        super(message);\n        this.message = message;\n        this.code = code;\n        this.data = data;\n    }\n}\nconst getPlatformId = (win) => {\n    var _a, _b;\n    if (win === null || win === void 0 ? void 0 : win.androidBridge) {\n        return 'android';\n    }\n    else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {\n        return 'ios';\n    }\n    else {\n        return 'web';\n    }\n};\n\nconst createCapacitor = (win) => {\n    const capCustomPlatform = win.CapacitorCustomPlatform || null;\n    const cap = win.Capacitor || {};\n    const Plugins = (cap.Plugins = cap.Plugins || {});\n    const getPlatform = () => {\n        return capCustomPlatform !== null ? capCustomPlatform.name : getPlatformId(win);\n    };\n    const isNativePlatform = () => getPlatform() !== 'web';\n    const isPluginAvailable = (pluginName) => {\n        const plugin = registeredPlugins.get(pluginName);\n        if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {\n            // JS implementation available for the current platform.\n            return true;\n        }\n        if (getPluginHeader(pluginName)) {\n            // Native implementation available.\n            return true;\n        }\n        return false;\n    };\n    const getPluginHeader = (pluginName) => { var _a; return (_a = cap.PluginHeaders) === null || _a === void 0 ? void 0 : _a.find((h) => h.name === pluginName); };\n    const handleError = (err) => win.console.error(err);\n    const registeredPlugins = new Map();\n    const registerPlugin = (pluginName, jsImplementations = {}) => {\n        const registeredPlugin = registeredPlugins.get(pluginName);\n        if (registeredPlugin) {\n            console.warn(`Capacitor plugin \"${pluginName}\" already registered. Cannot register plugins twice.`);\n            return registeredPlugin.proxy;\n        }\n        const platform = getPlatform();\n        const pluginHeader = getPluginHeader(pluginName);\n        let jsImplementation;\n        const loadPluginImplementation = async () => {\n            if (!jsImplementation && platform in jsImplementations) {\n                jsImplementation =\n                    typeof jsImplementations[platform] === 'function'\n                        ? (jsImplementation = await jsImplementations[platform]())\n                        : (jsImplementation = jsImplementations[platform]);\n            }\n            else if (capCustomPlatform !== null && !jsImplementation && 'web' in jsImplementations) {\n                jsImplementation =\n                    typeof jsImplementations['web'] === 'function'\n                        ? (jsImplementation = await jsImplementations['web']())\n                        : (jsImplementation = jsImplementations['web']);\n            }\n            return jsImplementation;\n        };\n        const createPluginMethod = (impl, prop) => {\n            var _a, _b;\n            if (pluginHeader) {\n                const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find((m) => prop === m.name);\n                if (methodHeader) {\n                    if (methodHeader.rtype === 'promise') {\n                        return (options) => cap.nativePromise(pluginName, prop.toString(), options);\n                    }\n                    else {\n                        return (options, callback) => cap.nativeCallback(pluginName, prop.toString(), options, callback);\n                    }\n                }\n                else if (impl) {\n                    return (_a = impl[prop]) === null || _a === void 0 ? void 0 : _a.bind(impl);\n                }\n            }\n            else if (impl) {\n                return (_b = impl[prop]) === null || _b === void 0 ? void 0 : _b.bind(impl);\n            }\n            else {\n                throw new CapacitorException(`\"${pluginName}\" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n            }\n        };\n        const createPluginMethodWrapper = (prop) => {\n            let remove;\n            const wrapper = (...args) => {\n                const p = loadPluginImplementation().then((impl) => {\n                    const fn = createPluginMethod(impl, prop);\n                    if (fn) {\n                        const p = fn(...args);\n                        remove = p === null || p === void 0 ? void 0 : p.remove;\n                        return p;\n                    }\n                    else {\n                        throw new CapacitorException(`\"${pluginName}.${prop}()\" is not implemented on ${platform}`, ExceptionCode.Unimplemented);\n                    }\n                });\n                if (prop === 'addListener') {\n                    p.remove = async () => remove();\n                }\n                return p;\n            };\n            // Some flair ✨\n            wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;\n            Object.defineProperty(wrapper, 'name', {\n                value: prop,\n                writable: false,\n                configurable: false,\n            });\n            return wrapper;\n        };\n        const addListener = createPluginMethodWrapper('addListener');\n        const removeListener = createPluginMethodWrapper('removeListener');\n        const addListenerNative = (eventName, callback) => {\n            const call = addListener({ eventName }, callback);\n            const remove = async () => {\n                const callbackId = await call;\n                removeListener({\n                    eventName,\n                    callbackId,\n                }, callback);\n            };\n            const p = new Promise((resolve) => call.then(() => resolve({ remove })));\n            p.remove = async () => {\n                console.warn(`Using addListener() without 'await' is deprecated.`);\n                await remove();\n            };\n            return p;\n        };\n        const proxy = new Proxy({}, {\n            get(_, prop) {\n                switch (prop) {\n                    // https://github.com/facebook/react/issues/20030\n                    case '$$typeof':\n                        return undefined;\n                    case 'toJSON':\n                        return () => ({});\n                    case 'addListener':\n                        return pluginHeader ? addListenerNative : addListener;\n                    case 'removeListener':\n                        return removeListener;\n                    default:\n                        return createPluginMethodWrapper(prop);\n                }\n            },\n        });\n        Plugins[pluginName] = proxy;\n        registeredPlugins.set(pluginName, {\n            name: pluginName,\n            proxy,\n            platforms: new Set([...Object.keys(jsImplementations), ...(pluginHeader ? [platform] : [])]),\n        });\n        return proxy;\n    };\n    // Add in convertFileSrc for web, it will already be available in native context\n    if (!cap.convertFileSrc) {\n        cap.convertFileSrc = (filePath) => filePath;\n    }\n    cap.getPlatform = getPlatform;\n    cap.handleError = handleError;\n    cap.isNativePlatform = isNativePlatform;\n    cap.isPluginAvailable = isPluginAvailable;\n    cap.registerPlugin = registerPlugin;\n    cap.Exception = CapacitorException;\n    cap.DEBUG = !!cap.DEBUG;\n    cap.isLoggingEnabled = !!cap.isLoggingEnabled;\n    return cap;\n};\nconst initCapacitorGlobal = (win) => (win.Capacitor = createCapacitor(win));\n\nconst Capacitor = /*#__PURE__*/ initCapacitorGlobal(typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n        ? self\n        : typeof window !== 'undefined'\n            ? window\n            : typeof global !== 'undefined'\n                ? global\n                : {});\nconst registerPlugin = Capacitor.registerPlugin;\n\n/**\n * Base class web plugins should extend.\n */\nclass WebPlugin {\n    constructor() {\n        this.listeners = {};\n        this.retainedEventArguments = {};\n        this.windowListeners = {};\n    }\n    addListener(eventName, listenerFunc) {\n        let firstListener = false;\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            this.listeners[eventName] = [];\n            firstListener = true;\n        }\n        this.listeners[eventName].push(listenerFunc);\n        // If we haven't added a window listener for this event and it requires one,\n        // go ahead and add it\n        const windowListener = this.windowListeners[eventName];\n        if (windowListener && !windowListener.registered) {\n            this.addWindowListener(windowListener);\n        }\n        if (firstListener) {\n            this.sendRetainedArgumentsForEvent(eventName);\n        }\n        const remove = async () => this.removeListener(eventName, listenerFunc);\n        const p = Promise.resolve({ remove });\n        return p;\n    }\n    async removeAllListeners() {\n        this.listeners = {};\n        for (const listener in this.windowListeners) {\n            this.removeWindowListener(this.windowListeners[listener]);\n        }\n        this.windowListeners = {};\n    }\n    notifyListeners(eventName, data, retainUntilConsumed) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            if (retainUntilConsumed) {\n                let args = this.retainedEventArguments[eventName];\n                if (!args) {\n                    args = [];\n                }\n                args.push(data);\n                this.retainedEventArguments[eventName] = args;\n            }\n            return;\n        }\n        listeners.forEach((listener) => listener(data));\n    }\n    hasListeners(eventName) {\n        return !!this.listeners[eventName].length;\n    }\n    registerWindowListener(windowEventName, pluginEventName) {\n        this.windowListeners[pluginEventName] = {\n            registered: false,\n            windowEventName,\n            pluginEventName,\n            handler: (event) => {\n                this.notifyListeners(pluginEventName, event);\n            },\n        };\n    }\n    unimplemented(msg = 'not implemented') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);\n    }\n    unavailable(msg = 'not available') {\n        return new Capacitor.Exception(msg, ExceptionCode.Unavailable);\n    }\n    async removeListener(eventName, listenerFunc) {\n        const listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        const index = listeners.indexOf(listenerFunc);\n        this.listeners[eventName].splice(index, 1);\n        // If there are no more listeners for this type of event,\n        // remove the window listener\n        if (!this.listeners[eventName].length) {\n            this.removeWindowListener(this.windowListeners[eventName]);\n        }\n    }\n    addWindowListener(handle) {\n        window.addEventListener(handle.windowEventName, handle.handler);\n        handle.registered = true;\n    }\n    removeWindowListener(handle) {\n        if (!handle) {\n            return;\n        }\n        window.removeEventListener(handle.windowEventName, handle.handler);\n        handle.registered = false;\n    }\n    sendRetainedArgumentsForEvent(eventName) {\n        const args = this.retainedEventArguments[eventName];\n        if (!args) {\n            return;\n        }\n        delete this.retainedEventArguments[eventName];\n        args.forEach((arg) => {\n            this.notifyListeners(eventName, arg);\n        });\n    }\n}\n\nconst WebView = /*#__PURE__*/ registerPlugin('WebView');\n/******** END WEB VIEW PLUGIN ********/\n/******** COOKIES PLUGIN ********/\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nconst encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nconst decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\nclass CapacitorCookiesPluginWeb extends WebPlugin {\n    async getCookies() {\n        const cookies = document.cookie;\n        const cookieMap = {};\n        cookies.split(';').forEach((cookie) => {\n            if (cookie.length <= 0)\n                return;\n            // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n            let [key, value] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n            key = decode(key).trim();\n            value = decode(value).trim();\n            cookieMap[key] = value;\n        });\n        return cookieMap;\n    }\n    async setCookie(options) {\n        try {\n            // Safely Encoded Key/Value\n            const encodedKey = encode(options.key);\n            const encodedValue = encode(options.value);\n            // Clean & sanitize options\n            const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n            const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n            const domain = options.url != null && options.url.length > 0 ? `domain=${options.url}` : '';\n            document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}; ${domain};`;\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }\n    async deleteCookie(options) {\n        try {\n            document.cookie = `${options.key}=; Max-Age=0`;\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }\n    async clearCookies() {\n        try {\n            const cookies = document.cookie.split(';') || [];\n            for (const cookie of cookies) {\n                document.cookie = cookie.replace(/^ +/, '').replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }\n    async clearAllCookies() {\n        try {\n            await this.clearCookies();\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    }\n}\nconst CapacitorCookies = registerPlugin('CapacitorCookies', {\n    web: () => new CapacitorCookiesPluginWeb(),\n});\n// UTILITY FUNCTIONS\n/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nconst readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64String.indexOf(',') >= 0 ? base64String.split(',')[1] : base64String);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map((k) => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach((str) => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nconst buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // If body is already a string, then pass it through as-is.\n    if (typeof options.data === 'string') {\n        output.body = options.data;\n    }\n    // Build request initializers based off of content-type\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data') || options.data instanceof FormData) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (const key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') || typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n// WEB IMPLEMENTATION\nclass CapacitorHttpPluginWeb extends WebPlugin {\n    /**\n     * Perform an Http request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async request(options) {\n        const requestInit = buildRequestInit(options, options.webFetchExtra);\n        const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n        const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n        const response = await fetch(url, requestInit);\n        const contentType = response.headers.get('content-type') || '';\n        // Default to 'text' responseType so no parsing happens\n        let { responseType = 'text' } = response.ok ? options : {};\n        // If the response content-type is json, force the response to be json\n        if (contentType.includes('application/json')) {\n            responseType = 'json';\n        }\n        let data;\n        let blob;\n        switch (responseType) {\n            case 'arraybuffer':\n            case 'blob':\n                blob = await response.blob();\n                data = await readBlobAsBase64(blob);\n                break;\n            case 'json':\n                data = await response.json();\n                break;\n            case 'document':\n            case 'text':\n            default:\n                data = await response.text();\n        }\n        // Convert fetch headers to Capacitor HttpHeaders\n        const headers = {};\n        response.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            data,\n            headers,\n            status: response.status,\n            url: response.url,\n        };\n    }\n    /**\n     * Perform an Http GET request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async get(options) {\n        return this.request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n    }\n    /**\n     * Perform an Http POST request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async post(options) {\n        return this.request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n    }\n    /**\n     * Perform an Http PUT request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async put(options) {\n        return this.request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n    }\n    /**\n     * Perform an Http PATCH request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async patch(options) {\n        return this.request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n    }\n    /**\n     * Perform an Http DELETE request given a set of options\n     * @param options Options to build the HTTP request\n     */\n    async delete(options) {\n        return this.request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n    }\n}\nconst CapacitorHttp = registerPlugin('CapacitorHttp', {\n    web: () => new CapacitorHttpPluginWeb(),\n});\n/******** END HTTP PLUGIN ********/\n\nexport { Capacitor, CapacitorCookies, CapacitorException, CapacitorHttp, ExceptionCode, WebPlugin, WebView, buildRequestInit, registerPlugin };\n//# sourceMappingURL=index.js.map\n"],"names":["SQLiteConnection","constructor","sqlite","this","_connectionDict","Map","initWebStore","Promise","resolve","err","reject","saveToStore","database","saveToLocalDisk","getFromLocalDiskToStore","overwrite","mOverwrite","echo","value","res","isSecretStored","setEncryptionSecret","passphrase","changeEncryptionSecret","oldpassphrase","clearEncryptionSecret","checkEncryptionSecret","addUpgradeStatement","upgrade","endsWith","slice","createConnection","encrypted","mode","version","readonly","conn","SQLiteDBConnection","connName","set","closeConnection","delete","isConnection","result","has","retrieveConnection","get","getNCDatabasePath","path","databasePath","createNCConnection","closeNCConnection","isNCConnection","retrieveNCConnection","isNCDatabase","retrieveAllConnections","closeAllConnections","delDict","key","keys","substring","checkConnectionsConsistency","openModes","dbNames","push","importFromJson","jsonstring","ret","isJsonValid","copyFromAssets","getFromHTTPRequest","url","isDatabaseEncrypted","isInConfigEncryption","isInConfigBiometricAuth","isDatabase","getDatabaseList","values","sort","getMigratableDbList","folderPath","addSQLiteSuffix","dbNameList","dbList","deleteOldDatabases","moveDatabasesAndAddSuffix","dbName","getConnectionDBName","getConnectionReadOnly","open","close","beginTransaction","changes","commitTransaction","rollbackTransaction","isTransactionActive","loadExtension","enableLoadExtension","toggle","getUrl","getVersion","getTableList","execute","statements","transaction","isSQL92","query","statement","length","reorderRows","run","returnMode","executeSet","isExists","isDBExists","isTable","table","isTableExists","isDBOpen","deleteDatabase","createSyncTable","setSyncDate","syncdate","getSyncDate","retDate","syncDate","Date","toISOString","exportToJson","jsonexportmode","deleteExportedRows","executeTransaction","txn","isActive","task","Error","retMode","toUpperCase","includes","retChanges","msg","message","retRes","Object","columnList","iosRes","i","rowJson","resRowJson","item","CapacitorSQLite","web","then","m","CapacitorSQLiteWeb","electron","window","CapacitorCustomPlatform","plugins","ExceptionCode","CapacitorException","code","data","super","Capacitor","win","capCustomPlatform","cap","Plugins","getPlatform","name","_a","_b","androidBridge","webkit","messageHandlers","bridge","getPlatformId","getPluginHeader","pluginName","PluginHeaders","find","h","registeredPlugins","convertFileSrc","filePath","handleError","console","error","isNativePlatform","isPluginAvailable","plugin","platforms","registerPlugin","jsImplementations","registeredPlugin","warn","proxy","platform","pluginHeader","jsImplementation","createPluginMethodWrapper","prop","remove","wrapper","args","p","async","loadPluginImplementation","impl","fn","bind","Unimplemented","methodHeader","methods","rtype","options","nativePromise","toString","callback","nativeCallback","createPluginMethod","defineProperty","writable","configurable","addListener","removeListener","addListenerNative","eventName","call","callbackId","Proxy","_","Set","Exception","DEBUG","isLoggingEnabled","createCapacitor","initCapacitorGlobal","globalThis","self","g","WebPlugin","listeners","retainedEventArguments","windowListeners","listenerFunc","firstListener","windowListener","registered","addWindowListener","sendRetainedArgumentsForEvent","removeAllListeners","listener","removeWindowListener","notifyListeners","retainUntilConsumed","forEach","hasListeners","registerWindowListener","windowEventName","pluginEventName","handler","event","unimplemented","unavailable","Unavailable","index","indexOf","splice","handle","addEventListener","removeEventListener","arg","encode","str","encodeURIComponent","replace","decodeURIComponent","escape","decode","CapacitorCookiesPluginWeb","getCookies","cookies","document","cookie","cookieMap","split","trim","setCookie","encodedKey","encodedValue","expires","domain","deleteCookie","clearCookies","toUTCString","clearAllCookies","CapacitorHttpPluginWeb","request","requestInit","extra","output","assign","method","headers","type","originalKeys","map","k","toLocaleLowerCase","reduce","acc","normalizeHttpHeaders","body","params","URLSearchParams","entries","FormData","form","append","Headers","JSON","stringify","buildRequestInit","webFetchExtra","urlParams","shouldEncode","accumulator","entry","Array","isArray","substr","buildUrlParams","shouldEncodeUrlParams","response","fetch","contentType","blob","responseType","ok","reader","FileReader","onload","base64String","onerror","readAsDataURL","readBlobAsBase64","json","text","status","post","put","patch"],"sourceRoot":""}