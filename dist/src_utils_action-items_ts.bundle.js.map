{"version":3,"file":"src_utils_action-items_ts.bundle.js","mappings":"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","sources":["webpack://spiritual-condition-tracker/./src/utils/action-items.ts"],"sourcesContent":["/**\n * Action Items Database Utilities\n * Handles the storage and retrieval of action items with SQLite\n */\n\n// Database name\nconst DB_NAME = 'spiritualTracker.db';\n\n// Get Capacitor SQLite plugin\nfunction getSQLite(): any {\n  // First check if database has been initialized\n  if (!window.dbInitialized) {\n    throw new Error('Database not initialized yet - please wait for initialization to complete');\n  }\n  \n  // Then check if Capacitor SQLite plugin is available\n  if (!window.Capacitor?.Plugins?.CapacitorSQLite) {\n    throw new Error('CapacitorSQLite plugin not available');\n  }\n  \n  return window.Capacitor.Plugins.CapacitorSQLite;\n}\n\n/**\n * Get all action items\n * @returns {Promise<Array>} - Action items\n */\nexport async function getAllActionItems() {\n  try {\n    console.log('[action-items.js - getAllActionItems: 29] Getting all action items');\n    const sqlite = getSQLite();\n    \n    const sqlStatement = \"SELECT * FROM action_items ORDER BY createdAt DESC\";\n    console.log('[action-items.js - getAllActionItems: 33] SQL query:', sqlStatement);\n    \n    const result = await sqlite.query({\n      database: DB_NAME,\n      statement: sqlStatement,\n      values: []\n    });\n    \n    console.log('[action-items.js - getAllActionItems: 40] Query result:', JSON.stringify(result));\n    \n    return result.values || [];\n  } catch (error) {\n    console.error('[action-items.js - getAllActionItems: 44] Error getting action items:', error);\n    return [];\n  }\n}\n\n/**\n * Debug function to get all action items and log them\n * @returns {Promise<void>}\n */\nexport async function getAllActionItemsDebug() {\n  try {\n    console.log('[action-items.js - getAllActionItemsDebug: 54] DEBUG: Retrieving all action items');\n    const sqlite = getSQLite();\n    \n    // Query to get all action items\n    const sqlStatement = \"SELECT * FROM action_items ORDER BY createdAt DESC\";\n    console.log('[action-items.js - getAllActionItemsDebug: 59] DEBUG: SQL query:', sqlStatement);\n    \n    const result = await sqlite.query({\n      database: DB_NAME,\n      statement: sqlStatement,\n      values: []\n    });\n    \n    console.log('[action-items.js - getAllActionItemsDebug: 66] DEBUG: All action items result:', JSON.stringify(result));\n    \n    // Log the number of items found\n    if (result?.values) {\n      const itemCount = result.values.length > 0 && result.values[0].ios_columns ? \n        result.values.length - 1 : result.values.length;\n      \n      console.log(`[action-items.js - getAllActionItemsDebug: 72] DEBUG: Found ${itemCount} action items in database`);\n    } else {\n      console.log('[action-items.js - getAllActionItemsDebug: 74] DEBUG: No action items found or result structure invalid');\n    }\n  } catch (error) {\n    console.error('[action-items.js - getAllActionItemsDebug: 77] DEBUG: Error retrieving all action items:', error);\n  }\n}\n\n/**\n * Get all action items for a contact\n * @param {number} contactId - Contact ID\n * @returns {Promise<Array>} - Action items for the contact\n */\nexport async function getActionItemsForContact(contactId) {\n  try {\n    console.log(`[action-items.js - getActionItemsForContact: 91] CONTACT_ID: ${contactId} - Starting to fetch action items`);\n    const sqlite = getSQLite();\n    \n    // First verify that tables exist\n    console.log(`[action-items.js - getActionItemsForContact: 95] CONTACT_ID: ${contactId} - Verifying tables exist`);\n    try {\n      // Ensure the action_items table exists\n      await sqlite.execute({\n        database: DB_NAME,\n        statements: `\n          CREATE TABLE IF NOT EXISTS action_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT DEFAULT '',\n            text TEXT DEFAULT '',\n            notes TEXT DEFAULT '',\n            dueDate TEXT DEFAULT NULL,\n            completed INTEGER DEFAULT 0,\n            type TEXT DEFAULT 'todo',\n            createdAt TEXT,\n            updatedAt TEXT\n          )\n        `\n      });\n      \n      // Ensure the join table exists\n      await sqlite.execute({\n        database: DB_NAME,\n        statements: `\n          CREATE TABLE IF NOT EXISTS sponsor_contact_action_items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            contactId INTEGER,\n            actionItemId INTEGER,\n            createdAt TEXT,\n            FOREIGN KEY (contactId) REFERENCES sponsor_contacts(id),\n            FOREIGN KEY (actionItemId) REFERENCES action_items(id)\n          )\n        `\n      });\n      \n      console.log(`[action-items.js - getActionItemsForContact: 122] CONTACT_ID: ${contactId} - Tables verified`);\n    } catch (tableError) {\n      console.error(`[action-items.js - getActionItemsForContact: 124] CONTACT_ID: ${contactId} - Error verifying tables:`, tableError);\n    }\n    \n    // Construct the SQL query with join\n    const sqlStatement = `\n      SELECT ai.* \n      FROM action_items ai\n      JOIN sponsor_contact_action_items scai ON ai.id = scai.actionItemId\n      WHERE scai.contactId = ?\n      ORDER BY ai.createdAt DESC\n    `;\n    \n    console.log(`[action-items.js - getActionItemsForContact: 135] CONTACT_ID: ${contactId} - Full SQL query: ${sqlStatement}`);\n    \n    // Query action items via join table\n    const result = await sqlite.query({\n      database: DB_NAME,\n      statement: sqlStatement,\n      values: [contactId]\n    });\n    \n    console.log(`[action-items.js - getActionItemsForContact: 143] CONTACT_ID: ${contactId} - Raw query result:`, JSON.stringify(result));\n    \n    // Handle iOS-specific format where first item contains column information\n    if (result.values && result.values.length > 0) {\n      console.log(`[action-items.js - getActionItemsForContact: 147] CONTACT_ID: ${contactId} - Found ${result.values.length} results in query`);\n      \n      // Check if first item contains column information (iOS format)\n      if (result.values[0].ios_columns) {\n        console.log(`[action-items.js - getActionItemsForContact: 151] CONTACT_ID: ${contactId} - iOS format detected for action items, processing values`);\n        // Skip the first item (column info) and process the rest\n        const processedValues = result.values.slice(1);\n        console.log(`[action-items.js - getActionItemsForContact: 154] CONTACT_ID: ${contactId} - Processed ${processedValues.length} action items for iOS format`);\n        \n        // Log each item for debugging\n        processedValues.forEach((item, index) => {\n          console.log(`[action-items.js - getActionItemsForContact: 158] CONTACT_ID: ${contactId} - Item ${index}: ID=${item.id}, Title=${item.title}, Completed=${item.completed}`);\n        });\n        \n        return processedValues;\n      } else {\n        console.log(`[action-items.js - getActionItemsForContact: 163] CONTACT_ID: ${contactId} - Standard format with ${result.values.length} action items`);\n        \n        // Log each item for debugging\n        result.values.forEach((item, index) => {\n          console.log(`[action-items.js - getActionItemsForContact: 167] CONTACT_ID: ${contactId} - Item ${index}: ID=${item.id}, Title=${item.title}, Completed=${item.completed}`);\n        });\n      }\n    } else {\n      console.log(`[action-items.js - getActionItemsForContact: 171] CONTACT_ID: ${contactId} - No action items found in main query`);\n    }\n    \n    // Query the join table directly to see what associations exist\n    try {\n      const joinTableQuery = `\n        SELECT * FROM sponsor_contact_action_items \n        WHERE contactId = ?\n      `;\n      console.log(`[action-items.js - getActionItemsForContact: 179] CONTACT_ID: ${contactId} - Querying join table: ${joinTableQuery}`);\n      \n      const joinResult = await sqlite.query({\n        database: DB_NAME,\n        statement: joinTableQuery,\n        values: [contactId]\n      });\n      \n      console.log(`[action-items.js - getActionItemsForContact: 186] CONTACT_ID: ${contactId} - Join table result:`, JSON.stringify(joinResult));\n      \n      if (joinResult.values && joinResult.values.length > 0) {\n        console.log(`[action-items.js - getActionItemsForContact: 189] CONTACT_ID: ${contactId} - Found ${joinResult.values.length > 0 && joinResult.values[0].ios_columns ? joinResult.values.length - 1 : joinResult.values.length} associations in join table`);\n        \n        // If we have associations but no items, query each action item individually\n        if (!result.values || result.values.length === 0 || (result.values.length === 1 && result.values[0].ios_columns)) {\n          console.log(`[action-items.js - getActionItemsForContact: 193] CONTACT_ID: ${contactId} - Join table has entries but main query returned no items - querying individual action items`);\n          \n          // Extract actionItemIds from join table\n          let actionItemIds = [];\n          if (joinResult.values[0].ios_columns) {\n            // iOS format\n            actionItemIds = joinResult.values.slice(1).map(item => item.actionItemId);\n          } else {\n            // Standard format\n            actionItemIds = joinResult.values.map(item => item.actionItemId);\n          }\n          \n          console.log(`[action-items.js - getActionItemsForContact: 204] CONTACT_ID: ${contactId} - Found action item IDs:`, JSON.stringify(actionItemIds));\n          \n          if (actionItemIds.length > 0) {\n            // Query each action item individually\n            const actionItems = [];\n            for (const itemId of actionItemIds) {\n              try {\n                const itemQuery = `SELECT * FROM action_items WHERE id = ?`;\n                const itemResult = await sqlite.query({\n                  database: DB_NAME,\n                  statement: itemQuery,\n                  values: [itemId]\n                });\n                \n                console.log(`[action-items.js - getActionItemsForContact: 216] CONTACT_ID: ${contactId} - Action item query for ID ${itemId} result:`, JSON.stringify(itemResult));\n                \n                if (itemResult.values && itemResult.values.length > 0) {\n                  if (itemResult.values[0].ios_columns) {\n                    // iOS format\n                    if (itemResult.values.length > 1) {\n                      actionItems.push(itemResult.values[1]);\n                      console.log(`[action-items.js - getActionItemsForContact: 223] CONTACT_ID: ${contactId} - Added item from iOS format:`, JSON.stringify(itemResult.values[1]));\n                    }\n                  } else {\n                    // Standard format\n                    actionItems.push(itemResult.values[0]);\n                    console.log(`[action-items.js - getActionItemsForContact: 228] CONTACT_ID: ${contactId} - Added item from standard format:`, JSON.stringify(itemResult.values[0]));\n                  }\n                }\n              } catch (itemError) {\n                console.error(`[action-items.js - getActionItemsForContact: 232] CONTACT_ID: ${contactId} - Error querying action item ${itemId}:`, itemError);\n              }\n            }\n            \n            console.log(`[action-items.js - getActionItemsForContact: 236] CONTACT_ID: ${contactId} - Retrieved ${actionItems.length} individual action items`);\n            \n            if (actionItems.length > 0) {\n              return actionItems;\n            }\n          }\n        }\n      } else {\n        console.log(`[action-items.js - getActionItemsForContact: 243] CONTACT_ID: ${contactId} - No associations found in join table`);\n      }\n    } catch (joinError) {\n      console.error(`[action-items.js - getActionItemsForContact: 246] CONTACT_ID: ${contactId} - Error querying join table:`, joinError);\n    }\n    \n    // Return whatever we found in the original query\n    return result.values && result.values.length > 0 && result.values[0].ios_columns ? \n      result.values.slice(1) : result.values || [];\n  } catch (error) {\n    console.error(`[action-items.js - getActionItemsForContact: 252] CONTACT_ID: ${contactId} - Error getting action items:`, error);\n    return [];\n  }\n}\n\n/**\n * Add an action item\n * @param {Object} actionItem - Action item data\n * @returns {Promise<Object>} - Created action item with ID\n */\nexport async function addActionItem(actionItem) {\n  try {\n    console.log('[action-items.js - addActionItem: 281] Starting to add action item:', JSON.stringify(actionItem));\n    const sqlite = getSQLite();\n    \n    // First ensure the table exists\n    console.log('[action-items.js - addActionItem: 285] Creating action_items table if not exists');\n    await sqlite.execute({\n      database: DB_NAME,\n      statements: `\n        CREATE TABLE IF NOT EXISTS action_items (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          title TEXT DEFAULT '',\n          text TEXT DEFAULT '',\n          notes TEXT DEFAULT '',\n          dueDate TEXT DEFAULT NULL,\n          completed INTEGER DEFAULT 0,\n          type TEXT DEFAULT 'todo',\n          createdAt TEXT,\n          updatedAt TEXT\n        )\n      `\n    });\n    \n    // Create a clean object with valid fields\n    const now = new Date().toISOString();\n    const actionItemData = {\n      title: actionItem.title || '',\n      text: actionItem.text || actionItem.title || '',\n      notes: actionItem.notes || '',\n      dueDate: actionItem.dueDate || null,\n      completed: typeof actionItem.completed === 'number' ? actionItem.completed : 0,\n      type: actionItem.type || 'todo',\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    console.log('[action-items.js - addActionItem: 310] Saving action item with data:', JSON.stringify(actionItemData));\n    \n    // Use direct SQL insertion with string values for iOS compatibility\n    const insertSQL = `\n      INSERT INTO action_items \n      (title, text, notes, dueDate, completed, type, createdAt, updatedAt) \n      VALUES \n      ('${actionItemData.title}', '${actionItemData.text}', '${actionItemData.notes}', \n       ${actionItemData.dueDate ? `'${actionItemData.dueDate}'` : 'NULL'}, \n       ${actionItemData.completed}, \n       '${actionItemData.type}',\n       '${actionItemData.createdAt}',\n       '${actionItemData.updatedAt}')\n    `;\n    \n    console.log('[action-items.js - addActionItem: 325] Raw SQL statement:', insertSQL);\n    \n    // Execute the SQL directly\n    const insertResult = await sqlite.execute({\n      database: DB_NAME,\n      statements: insertSQL\n    });\n    \n    console.log('[action-items.js - addActionItem: 332] Insert result:', JSON.stringify(insertResult));\n    \n    // Get the ID in a separate query for compatibility\n    const lastIdResult = await sqlite.query({\n      database: DB_NAME,\n      statement: 'SELECT last_insert_rowid() as id',\n      values: []\n    });\n    \n    console.log('[action-items.js - addActionItem: 340] Last ID result:', JSON.stringify(lastIdResult));\n    \n    let newId = null;\n    \n    // Apply the ID if available\n    if (lastIdResult?.values?.length > 0) {\n      // Handle iOS-specific format where the first item contains column info\n      if (lastIdResult.values[0].ios_columns && lastIdResult.values[1]) {\n        newId = lastIdResult.values[1].id;\n        console.log('[action-items.js - addActionItem: 349] Using iOS format ID:', newId);\n      } else {\n        // Standard format\n        newId = lastIdResult.values[0].id;\n        console.log('[action-items.js - addActionItem: 353] Using standard format ID:', newId);\n      }\n    }\n    \n    // Add the ID to the item\n    actionItemData.id = newId;\n    \n    // Verify the item was inserted by querying for it\n    if (newId) {\n      console.log('[action-items.js - addActionItem: 361] Verifying item was inserted with ID:', newId);\n      const verifyResult = await sqlite.query({\n        database: DB_NAME,\n        statement: `SELECT * FROM action_items WHERE id = ?`,\n        values: [newId]\n      });\n      \n      console.log('[action-items.js - addActionItem: 367] Verification result:', JSON.stringify(verifyResult));\n    }\n    \n    // Log the final action item data with ID\n    console.log('[action-items.js - addActionItem: 371] Final action item data:', JSON.stringify(actionItemData));\n    \n    // Query all action items to verify storage\n    await getAllActionItemsDebug();\n    \n    return actionItemData;\n  } catch (error) {\n    console.error('[action-items.js - addActionItem: 378] Error adding action item:', error);\n    // Return the original item with its temporary ID\n    return actionItem;\n  }\n}\n\n/**\n * Associate an action item with a contact\n * @param {number} contactId - Contact ID\n * @param {number} actionItemId - Action item ID\n * @returns {Promise<boolean>} - Success status\n */\nexport async function associateActionItemWithContact(contactId, actionItemId) {\n  try {\n    console.log(`[action-items.js - associateActionItemWithContact: 157] Starting to associate action item ID ${actionItemId} with contact ID ${contactId}`);\n    const sqlite = getSQLite();\n    \n    // Ensure the join table exists\n    await sqlite.execute({\n      database: DB_NAME,\n      statements: `\n        CREATE TABLE IF NOT EXISTS sponsor_contact_action_items (\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\n          contactId INTEGER,\n          actionItemId INTEGER,\n          createdAt TEXT,\n          FOREIGN KEY (contactId) REFERENCES sponsor_contacts(id),\n          FOREIGN KEY (actionItemId) REFERENCES action_items(id)\n        )\n      `\n    });\n    \n    console.log(`[action-items.js - associateActionItemWithContact: 172] Join table verified`);\n    \n    // Check if association already exists to avoid duplicates\n    const checkResult = await sqlite.query({\n      database: DB_NAME,\n      statement: `\n        SELECT * FROM sponsor_contact_action_items \n        WHERE contactId = ? AND actionItemId = ?\n      `,\n      values: [contactId, actionItemId]\n    });\n    \n    console.log(`[action-items.js - associateActionItemWithContact: 183] Check for existing association result:`, JSON.stringify(checkResult));\n    \n    // Process the result based on format\n    let exists = false;\n    if (checkResult?.values) {\n      if (checkResult.values.length > 0) {\n        if (checkResult.values[0].ios_columns) {\n          // iOS format\n          exists = checkResult.values.length > 1;\n        } else {\n          // Standard format\n          exists = checkResult.values.length > 0;\n        }\n      }\n    }\n    \n    if (exists) {\n      console.log(`[action-items.js - associateActionItemWithContact: 198] Association already exists, skipping insert`);\n      return true;\n    }\n    \n    // Create the association in the join table\n    const now = new Date().toISOString();\n    \n    console.log(`[action-items.js - associateActionItemWithContact: 204] Creating association with SQL:\n      INSERT INTO sponsor_contact_action_items \n      (contactId, actionItemId, createdAt) \n      VALUES (${contactId}, ${actionItemId}, '${now}')\n    `);\n    \n    const result = await sqlite.execute({\n      database: DB_NAME,\n      statements: `\n        INSERT INTO sponsor_contact_action_items \n        (contactId, actionItemId, createdAt) \n        VALUES (?, ?, ?)\n      `,\n      values: [contactId, actionItemId, now]\n    });\n    \n    console.log(`[action-items.js - associateActionItemWithContact: 217] Insert result:`, JSON.stringify(result));\n    \n    // Verify the association was created\n    const verifyResult = await sqlite.query({\n      database: DB_NAME,\n      statement: `SELECT * FROM sponsor_contact_action_items WHERE contactId = ? AND actionItemId = ?`,\n      values: [contactId, actionItemId]\n    });\n    \n    console.log(`[action-items.js - associateActionItemWithContact: 225] Verification result:`, JSON.stringify(verifyResult));\n    \n    return true;\n  } catch (error) {\n    console.error(`[action-items.js - associateActionItemWithContact: 229] Error associating action item ${actionItemId} with contact ${contactId}:`, error);\n    return false;\n  }\n}\n\n/**\n * Toggle completion status of an action item\n * @param {number} actionItemId - Action item ID\n * @returns {Promise<Object>} - Updated action item\n */\nexport async function toggleActionItemCompletion(actionItemId) {\n  try {\n    const sqlite = getSQLite();\n    \n    // First get the current completion status\n    const result = await sqlite.query({\n      database: DB_NAME,\n      statement: 'SELECT completed FROM action_items WHERE id = ?',\n      values: [actionItemId]\n    });\n    \n    if (!result.values || result.values.length === 0) {\n      throw new Error(`Action item with ID ${actionItemId} not found`);\n    }\n    \n    // Extract current status, handling iOS format if needed\n    let currentStatus = 0;\n    if (result.values[0].ios_columns && result.values[1]) {\n      currentStatus = result.values[1].completed;\n    } else {\n      currentStatus = result.values[0].completed;\n    }\n    \n    // Toggle the status\n    const newStatus = currentStatus === 1 ? 0 : 1;\n    const now = new Date().toISOString();\n    \n    // Update the item\n    await sqlite.execute({\n      database: DB_NAME,\n      statements: 'UPDATE action_items SET completed = ?, updatedAt = ? WHERE id = ?',\n      values: [newStatus, now, actionItemId]\n    });\n    \n    // Return the updated item\n    const updatedResult = await sqlite.query({\n      database: DB_NAME,\n      statement: 'SELECT * FROM action_items WHERE id = ?',\n      values: [actionItemId]\n    });\n    \n    if (!updatedResult.values || updatedResult.values.length === 0) {\n      throw new Error(`Failed to retrieve updated action item with ID ${actionItemId}`);\n    }\n    \n    // Extract the updated item, handling iOS format if needed\n    if (updatedResult.values[0].ios_columns && updatedResult.values[1]) {\n      return updatedResult.values[1];\n    } else {\n      return updatedResult.values[0];\n    }\n  } catch (error) {\n    console.error(`Error toggling completion status for action item ${actionItemId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Delete an action item\n * @param {number} actionItemId - Action item ID\n * @returns {Promise<boolean>} - Success status\n */\nexport async function deleteActionItem(actionItemId) {\n  try {\n    const sqlite = getSQLite();\n    \n    // First delete from the join table to maintain referential integrity\n    await sqlite.execute({\n      database: DB_NAME,\n      statements: 'DELETE FROM sponsor_contact_action_items WHERE actionItemId = ?',\n      values: [actionItemId]\n    });\n    \n    // Then delete the action item itself\n    await sqlite.execute({\n      database: DB_NAME,\n      statements: 'DELETE FROM action_items WHERE id = ?',\n      values: [actionItemId]\n    });\n    \n    return true;\n  } catch (error) {\n    console.error(`Error deleting action item ${actionItemId}:`, error);\n    return false;\n  }\n}"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","DB_NAME","getSQLite","_window$Capacitor","window","dbInitialized","Capacitor","Plugins","CapacitorSQLite","getAllActionItems","_getAllActionItems","_callee","sqlite","sqlStatement","result","_callee$","_context","console","log","query","database","statement","JSON","stringify","t0","error","getAllActionItemsDebug","_getAllActionItemsDebug","_callee2","itemCount","_callee2$","_context2","ios_columns","concat","getActionItemsForContact","_x","_getActionItemsForContact","_callee3","contactId","processedValues","joinTableQuery","joinResult","actionItemIds","actionItems","_iterator","_step","itemId","itemQuery","itemResult","_callee3$","_context3","execute","statements","item","index","id","title","completed","map","actionItemId","_createForOfIteratorHelper","t1","t2","t3","t4","addActionItem","_x2","_addActionItem","_callee4","actionItem","_lastIdResult$values","now","actionItemData","insertSQL","insertResult","lastIdResult","newId","verifyResult","_callee4$","_context4","Date","toISOString","text","notes","dueDate","createdAt","updatedAt","associateActionItemWithContact","_x3","_x4","_associateActionItemWithContact","_callee5","checkResult","exists","_callee5$","_context5","toggleActionItemCompletion","_x5","_toggleActionItemCompletion","_callee6","currentStatus","newStatus","updatedResult","_callee6$","_context6","deleteActionItem","_x6","_deleteActionItem","_callee7","_callee7$","_context7"],"sourceRoot":""}