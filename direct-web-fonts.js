/**
 * Direct Web Fonts Utility for Spiritual Condition Tracker
 * This script directly injects font files into the web directory
 * to avoid Expo's unstable path loading issues
 */

const fs = require('fs');
const path = require('path');

// Font names that need to be available
const REQUIRED_FONTS = [
  'MaterialCommunityIcons.ttf',
  'FontAwesome.ttf',
  'Ionicons.ttf',
  'MaterialIcons.ttf',
  'AntDesign.ttf',
  'Entypo.ttf',
  'EvilIcons.ttf',
  'Feather.ttf',
  'FontAwesome5_Brands.ttf',
  'FontAwesome5_Regular.ttf',
  'FontAwesome5_Solid.ttf',
  'Foundation.ttf',
  'Octicons.ttf',
  'SimpleLineIcons.ttf',
  'Zocial.ttf'
];

// Source locations to check for fonts
const FONT_SOURCE_LOCATIONS = [
  path.join(__dirname, 'node_modules', 'react-native-vector-icons', 'Fonts'),
  path.join(__dirname, 'expo-app', 'node_modules', 'react-native-vector-icons', 'Fonts'),
  path.join(__dirname, 'expo-app', 'node_modules', '@expo', 'vector-icons', 'build', 'vendor', 'react-native-vector-icons', 'Fonts'),
  path.join(__dirname, 'expo-app', 'assets', 'fonts')
];

// Destination locations to ensure fonts exist
const FONT_DEST_LOCATIONS = [
  path.join(__dirname, 'expo-app', 'web', 'fonts'),
  path.join(__dirname, 'expo-app', 'web', 'assets', 'fonts'),
  path.join(__dirname, 'expo-app', 'assets', 'fonts')
];

// Create directories if they don't exist
FONT_DEST_LOCATIONS.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`Created directory: ${dir}`);
  }
});

// Find each required font
REQUIRED_FONTS.forEach(fontFile => {
  let fontContent = null;
  let foundLocation = null;
  
  // Try to find the font in all source locations
  for (const sourceLocation of FONT_SOURCE_LOCATIONS) {
    const fontPath = path.join(sourceLocation, fontFile);
    if (fs.existsSync(fontPath)) {
      try {
        fontContent = fs.readFileSync(fontPath);
        foundLocation = fontPath;
        break;
      } catch (err) {
        console.error(`Error reading font ${fontPath}: ${err.message}`);
      }
    }
  }
  
  // If we found the font, copy it to all destinations
  if (fontContent) {
    console.log(`Found font ${fontFile} in ${foundLocation}`);
    
    // Copy to all destinations
    FONT_DEST_LOCATIONS.forEach(destDir => {
      const destPath = path.join(destDir, fontFile);
      try {
        fs.writeFileSync(destPath, fontContent);
        console.log(`Copied ${fontFile} to ${destPath}`);
      } catch (err) {
        console.error(`Failed to copy to ${destPath}: ${err.message}`);
      }
    });
  } else {
    console.warn(`Could not find font ${fontFile} in any source location`);
  }
});

// Generate CSS for direct web injection
const cssContent = `/**
 * Direct font loading CSS - bypasses Expo's asset system for web
 * Generated by direct-web-fonts.js
 */

${REQUIRED_FONTS.map(font => {
  const fontName = path.basename(font, '.ttf');
  return `@font-face {
  font-family: '${fontName}';
  src: url('./fonts/${font}');
  font-weight: normal;
  font-style: normal;
}`;
}).join('\n\n')}

/* Fix for broken SVGs */
svg[width="0"], svg[height="0"] {
  width: 24px !important;
  height: 24px !important;
}
`;

const cssPath = path.join(__dirname, 'expo-app', 'web', 'fonts.css');
fs.writeFileSync(cssPath, cssContent);
console.log(`Created CSS file at ${cssPath}`);

// Create a simple HTML injector for web
const injectorJs = `/**
 * Font injector script - injects the font CSS link when the app loads
 * This runs in the browser and ensures fonts are loaded correctly
 */
(function() {
  document.addEventListener('DOMContentLoaded', function() {
    const head = document.head || document.getElementsByTagName('head')[0];
    
    // Create link to fonts.css 
    const fontLink = document.createElement('link');
    fontLink.rel = 'stylesheet';
    fontLink.href = './fonts.css';
    fontLink.id = 'direct-font-css';
    head.appendChild(fontLink);
    console.log('[Font Injector] Added direct font CSS');
    
    // Create preload links for key fonts
    ['MaterialCommunityIcons.ttf', 'FontAwesome.ttf', 'Ionicons.ttf'].forEach(font => {
      const preload = document.createElement('link');
      preload.rel = 'preload';
      preload.as = 'font';
      preload.type = 'font/ttf';
      preload.href = './fonts/' + font;
      preload.crossOrigin = 'anonymous';
      head.appendChild(preload);
    });
    console.log('[Font Injector] Added font preloads');
  });
})();
`;

const injectorPath = path.join(__dirname, 'expo-app', 'web', 'font-injector.js');
fs.writeFileSync(injectorPath, injectorJs);
console.log(`Created font injector script at ${injectorPath}`);

console.log('Direct web fonts setup completed!');