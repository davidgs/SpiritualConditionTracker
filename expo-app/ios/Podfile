require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

# Disable new architecture completely
ENV['RCT_NEW_ARCH_ENABLED'] = '0'
ENV['USE_HERMES'] = '0'
ENV['USE_BRIDGELESS'] = '0'
ENV['USE_FRAMEWORKS'] = 'static'

platform :ios, '16.0'

# Don't even run prepare_react_native_project! to avoid potential new arch issues
# prepare_react_native_project!

# Define excluded pods that are causing issues
def excluded_pods
  [
    'ReactCommon-Samples',
    'React-Fabric',
    'React-RCTFabric',
    'React-Fabric-cplinker',
    'React-FabricImage',
    'ReactCommon/react/nativemodule/core',
    'ReactCommon/react/bridging',
    'ReactCommon/react/debug',
    'FBReactNativeSpec',
    'ReactAppDependencyProvider',
    'ReactCommon-turbomodule',
    'React-utils'
  ]
end

target 'SpiritualConditionTracker' do
  use_expo_modules!
  
  # Completely exclude problematic pods
  excluded_pods.each do |excluded_pod|
    pod excluded_pod, :inhibit_warnings => true, :configuration => ['Release'], :modular_headers => false
  end
  
  # Use React Native with JSC, explicitly disable anything new-arch related
  use_react_native!(
    :path => "../node_modules/react-native",
    :hermes_enabled => false,
    :fabric_enabled => false,
    :app_path => ".."
  )
  
  # Add this override to prevent compilation of files
  post_install do |installer|
    installer.pods_project.targets.each do |target|
      # Check if this target should be excluded
      if excluded_pods.any? { |excluded_pod| target.name.include?(excluded_pod) }
        puts "Excluding target from build: #{target.name}"
        
        # Remove all source files from the target
        target.source_build_phase.files.to_a.each do |build_file|
          build_file.remove_from_project
        end
        
        # Set the deployment target to an impossible version
        target.build_configurations.each do |config|
          config.build_settings['EXCLUDED_ARCHS'] = 'arm64 x86_64'
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
          config.build_settings['VALID_ARCHS'] = ''
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '99.0'
        end
      else
        # For normal targets, just set the deployment target
        target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
          
          # Make sure React-utils is properly excluded from the build
          if target.name == 'React-utils'
            config.build_settings['EXCLUDED_ARCHS'] = 'arm64 x86_64'
            config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
          end
          
          # Add preprocessor definitions to ensure new arch code is not compiled
          if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_NEW_ARCH_ENABLED=0'
          else
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'RCT_NEW_ARCH_ENABLED=0']
          end
        end
      end
    end
    
    # Run standard React Native post-install but with our additional options
    react_native_post_install(
      installer,
      File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts", "react_native_pods.rb"),
      :mac_catalyst_enabled => false
    )
  end
end