require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

# Disable new architecture completely
ENV['RCT_NEW_ARCH_ENABLED'] = '0'
ENV['USE_HERMES'] = '0'
ENV['USE_BRIDGELESS'] = '0'
ENV['USE_FRAMEWORKS'] = 'static'

platform :ios, '16.0'
prepare_react_native_project!

# Define excluded pods that are causing issues
def excluded_pods
  [
    'ReactCommon-Samples',
    'React-Fabric',
    'React-RCTFabric',
    'React-Fabric-cplinker',
    'React-FabricImage',
    'FBReactNativeSpec',
    'ReactAppDependencyProvider',
    'ReactCommon-turbomodule',
    'React-utils',
    'ReactCommon'
  ]
end

target 'SpiritualConditionTracker' do
  use_expo_modules!
  
  # First, specifically exclude ReactCommon's TurboModule files
  pod 'ReactCommon', :modular_headers => false, :subspecs => [
    'react/runtime',          # Include only what we need
    'yoga',                   # Required
    'cxxreact',               # Required
    'jsiexecutor',            # Required
    'jsinspector',            # Required
    'callinvoker'             # Required
    # Explicitly exclude problematic subspecs by not including them
    # 'react/bridging'
    # 'react/nativemodule/core'
    # 'react/debug'
  ]
  
  # Exclude other problematic pods  
  excluded_pods.each do |excluded_pod|
    next if excluded_pod == 'ReactCommon' # Already handled above
    pod excluded_pod, :inhibit_warnings => true, :configuration => ['Release'], :modular_headers => false
  end
  
  # Use React Native with JSC, explicitly disable anything new-arch related
  use_react_native!(
    :path => "../node_modules/react-native",
    :hermes_enabled => false,
    :fabric_enabled => false,
    :app_path => ".."
  )
  
  # Add this override to prevent compilation of files
  post_install do |installer|
    puts "Running custom post_install..."
    
    # Define problematic files to remove or exclude
    problem_files = [
      'TurboModuleBinding.cpp',
      'TurboModuleBinding.h',
      'TurboModuleUtils.cpp',
      'TurboModuleUtils.h',
      'LongLivedObject.h',
      'CallbackWrapper.h',
      'react_native_assert.h',
      'RunLoopObserver.cpp'
    ]
    
    # Remove problematic source files from the project
    installer.pods_project.files.each do |file|
      problem_files.each do |problem_filename|
        if file.path.include?(problem_filename)
          puts "Removing problematic file: #{file.path}"
          file.remove_from_project
        end
      end
    end
    
    # Handle each target appropriately
    installer.pods_project.targets.each do |target|
      # Check if this target should be excluded
      if excluded_pods.any? { |excluded_pod| target.name.include?(excluded_pod) }
        puts "Excluding target from build: #{target.name}"
        
        # Remove all source files from the target
        if target.source_build_phase
          target.source_build_phase.files.to_a.each do |build_file|
            build_file.remove_from_project
          end
        end
        
        # Set the deployment target to an impossible version
        target.build_configurations.each do |config|
          config.build_settings['EXCLUDED_ARCHS'] = 'arm64 x86_64'
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
          config.build_settings['VALID_ARCHS'] = ''
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '99.0'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'RCT_NEW_ARCH_ENABLED=0']
        end
      elsif target.name == 'ReactCommon'
        puts "Applying special handling for ReactCommon target"
        
        # For ReactCommon, we need to exclude problematic files from compilation
        if target.source_build_phase
          target.source_build_phase.files.to_a.each do |build_file|
            file_ref = build_file.file_ref
            if file_ref && file_ref.path && problem_files.any? { |prob| file_ref.path.include?(prob) }
              puts "Removing problematic file from build phase: #{file_ref.path}"
              build_file.remove_from_project
            end
          end
        end
        
        # Also apply special build settings
        target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'RCT_NEW_ARCH_ENABLED=0']
          
          # Add direct include paths to avoid module resolution issues
          if !config.build_settings['HEADER_SEARCH_PATHS']
            config.build_settings['HEADER_SEARCH_PATHS'] = ['$(inherited)']
          end
          config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/Headers/Public'
          config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/Headers/Public/React-Core'
        end
      else
        # For normal targets, just set the deployment target
        target.build_configurations.each do |config|
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
          
          # Add preprocessor definitions to ensure new arch code is not compiled
          if config.build_settings['GCC_PREPROCESSOR_DEFINITIONS']
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_NEW_ARCH_ENABLED=0'
          else
            config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = ['$(inherited)', 'RCT_NEW_ARCH_ENABLED=0']
          end
        end
      end
    end
    
    # Run standard React Native post-install but with our additional options
    react_native_post_install(
      installer,
      File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts", "react_native_pods.rb"),
      :mac_catalyst_enabled => false
    )
  end
end