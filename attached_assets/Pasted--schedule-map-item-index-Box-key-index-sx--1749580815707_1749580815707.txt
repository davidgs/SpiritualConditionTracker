{schedule.map((item, index) => (
            <Box
              key={index}
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 0.5,
                py: 0.5,
                borderBottom: '1px solid #eee',
                mb: 1
              }}
            >
              <Button
                variant="text"
                onClick={() => startEditingMeeting(index, 'day')}
                sx={{ fontWeight: 500, minWidth: '60px', textAlign: 'left', fontSize: '0.85rem', px: 0.5 }}
              >
                {days.find(d => d.key === item.day)?.label || item.day}
              </Button>

              <Button
                variant="text"
                onClick={() => startEditingMeeting(index, 'time')}
                sx={{ minWidth: '60px', textAlign: 'left', fontSize: '0.85rem', px: 0.5 }}
              >
                {use24HourFormat ? item.time : (() => {
                  const [hour, minute] = item.time.split(':');
                  const hourNum = parseInt(hour);
                  const period = hourNum >= 12 ? 'PM' : 'AM';
                  const displayHour = hourNum === 0 ? 12 : hourNum > 12 ? hourNum - 12 : hourNum;
                  return `${displayHour}:${minute} ${period}`;
                })()}
              </Button>

              <Button
                variant="text"
                onClick={() => startEditingMeeting(index, 'locationType')}
                sx={{ fontSize: '1rem', minWidth: 'auto', px: 0.5 }}
              >
                {meetingLocationTypes.find(l => l.value === item.locationType)?.icon || '🏢'}
              </Button>

              <Chip
                label={item.format ? item.format.charAt(0).toUpperCase() + item.format.slice(1).replace('_', ' ') : 'Unknown'}
                size="small"
                color="primary"
                onClick={() => startEditingMeeting(index, 'format')}
                sx={{ fontSize: '0.65rem', height: '20px', cursor: 'pointer', mx: 0.25 }}
              />

              <Chip
                label={item.access ? item.access.charAt(0).toUpperCase() + item.access.slice(1) : 'Unknown'}
                size="small"
                color={item.access === 'open' ? 'success' : 'error'}
                onClick={() => startEditingMeeting(index, 'access')}
                sx={{ fontSize: '0.65rem', height: '20px', cursor: 'pointer', mx: 0.25 }}
              />

              <Button
                size="small"
                color="error"
                onClick={() => removeScheduleItem(item.day, item.time)}
                sx={{
                  minWidth: 'auto',
                  width: '20px',
                  height: '20px',
                  px: 0,
                  fontSize: '0.9rem',
                  borderRadius: '50%',
                  ml: 0.5
                }}
              >
                ×
              </Button>
            </Box>
          ))}