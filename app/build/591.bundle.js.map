{"version":3,"file":"591.bundle.js","mappings":"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","sources":["webpack://spiritual-condition-tracker/./src/utils/capacitorStorage.js"],"sourcesContent":["/**\n * Capacitor-compatible SQLite storage implementation\n * Optimized for native iOS and Android compiled apps\n */\n\nimport { isPlatform } from '@ionic/react';\n\n// Database connection\nlet db = null;\nlet sqlitePlugin = null;\n\n/**\n * Initialize the database connection\n * @returns {Promise<boolean>} Whether initialization was successful\n */\nexport async function initDatabase() {\n  console.log(\"Initializing SQLite database for Capacitor...\");\n  \n  try {\n    // Import the appropriate SQLite plugin based on platform\n    if (isPlatform('capacitor') || isPlatform('cordova')) {\n      console.log(\"Using native SQLite implementation via Capacitor\");\n      \n      // For Capacitor\n      if (isPlatform('capacitor')) {\n        const { CapacitorSQLite } = await import('@capacitor-community/sqlite');\n        sqlitePlugin = CapacitorSQLite;\n      } \n      // For Cordova\n      else {\n        sqlitePlugin = window.sqlitePlugin;\n      }\n      \n      // Open or create the database\n      db = await sqlitePlugin.openDatabase({\n        name: 'spiritualTracker.db',\n        location: 'default'\n      });\n    }\n    // Web fallback - if Web SQL is available\n    else if (window.openDatabase) {\n      console.log(\"Using WebSQL implementation for browser\");\n      db = window.openDatabase(\n        'spiritualTracker.db',\n        '1.0',\n        'Spiritual Condition Tracker Database',\n        5 * 1024 * 1024 // 5MB\n      );\n    }\n    // No SQL support - use localStorage\n    else {\n      console.warn(\"SQLite not available - using localStorage fallback\");\n      setupLocalStorageFallback();\n      return false;\n    }\n    \n    // Create tables\n    await createTables();\n    \n    console.log(\"SQLite database initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing database:\", error);\n    setupLocalStorageFallback();\n    return false;\n  }\n}\n\n/**\n * Create a fallback using localStorage if SQLite is not available\n */\nfunction setupLocalStorageFallback() {\n  console.log(\"Setting up localStorage fallback for data persistence\");\n  \n  // Create an object that mimics SQLite interface but uses localStorage\n  db = {\n    transaction: (fn) => {\n      const tx = {\n        executeSql: (query, params, successCallback, errorCallback) => {\n          try {\n            // Very simplified SQL parsing - handle only basic operations\n            const queryLower = query.toLowerCase().trim();\n            \n            if (queryLower.startsWith('create table')) {\n              // For create table, just do nothing as localStorage doesn't need tables\n              successCallback({}, { rows: { length: 0 } });\n            }\n            else if (queryLower.startsWith('select')) {\n              handleLocalStorageSelect(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('insert')) {\n              handleLocalStorageInsert(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('update')) {\n              handleLocalStorageUpdate(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('delete')) {\n              handleLocalStorageDelete(queryLower, params, successCallback, errorCallback);\n            }\n            else {\n              // Unknown query\n              console.warn(\"Unsupported SQL query for localStorage:\", query);\n              successCallback({}, { rows: { length: 0 } });\n            }\n          } catch (error) {\n            console.error(\"Error in localStorage fallback:\", error);\n            if (errorCallback) errorCallback({}, error);\n          }\n        }\n      };\n      fn(tx);\n    }\n  };\n  \n  // Helper functions for localStorage operations\n  function getCollection(name) {\n    return JSON.parse(localStorage.getItem(name) || '[]');\n  }\n  \n  function saveCollection(name, data) {\n    localStorage.setItem(name, JSON.stringify(data));\n  }\n  \n  function handleLocalStorageSelect(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const fromMatch = query.match(/from\\s+([^\\s,)]+)/i);\n    if (!fromMatch) {\n      throw new Error(\"Invalid SELECT query: \" + query);\n    }\n    \n    const tableName = fromMatch[1];\n    let items = getCollection(tableName);\n    \n    // Handle WHERE clause (very simplified)\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    if (whereMatch && params.length > 0) {\n      const fieldName = whereMatch[1];\n      items = items.filter(item => item[fieldName] === params[0]);\n    }\n    \n    // Create a result object with a row-like interface\n    const result = {\n      rows: {\n        length: items.length,\n        item: (index) => items[index],\n        _array: items\n      }\n    };\n    \n    successCallback({}, result);\n  }\n  \n  function handleLocalStorageInsert(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const intoMatch = query.match(/into\\s+([^\\s(]+)/i);\n    if (!intoMatch) {\n      throw new Error(\"Invalid INSERT query: \" + query);\n    }\n    \n    const tableName = intoMatch[1];\n    \n    // Construct an object from params (very simplified)\n    const item = constructItemFromParams(tableName, params);\n    \n    // Add to collection\n    const items = getCollection(tableName);\n    items.push(item);\n    saveCollection(tableName, items);\n    \n    successCallback({}, { insertId: item.id, rowsAffected: 1 });\n  }\n  \n  function handleLocalStorageUpdate(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const updateMatch = query.match(/update\\s+([^\\s]+)/i);\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    \n    if (!updateMatch || !whereMatch) {\n      throw new Error(\"Invalid UPDATE query: \" + query);\n    }\n    \n    const tableName = updateMatch[1];\n    const fieldName = whereMatch[1];\n    const fieldValue = params[params.length - 1]; // assuming last param is the ID\n    \n    const items = getCollection(tableName);\n    const index = items.findIndex(item => item[fieldName] === fieldValue);\n    \n    if (index === -1) {\n      successCallback({}, { rowsAffected: 0 });\n      return;\n    }\n    \n    // Update the item\n    const updatedItem = constructItemFromParams(tableName, params, items[index]);\n    items[index] = updatedItem;\n    saveCollection(tableName, items);\n    \n    successCallback({}, { rowsAffected: 1 });\n  }\n  \n  function handleLocalStorageDelete(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const fromMatch = query.match(/from\\s+([^\\s]+)/i);\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    \n    if (!fromMatch || !whereMatch) {\n      throw new Error(\"Invalid DELETE query: \" + query);\n    }\n    \n    const tableName = fromMatch[1];\n    const fieldName = whereMatch[1];\n    const fieldValue = params[0];\n    \n    const items = getCollection(tableName);\n    const filteredItems = items.filter(item => item[fieldName] !== fieldValue);\n    \n    if (filteredItems.length === items.length) {\n      successCallback({}, { rowsAffected: 0 });\n      return;\n    }\n    \n    saveCollection(tableName, filteredItems);\n    successCallback({}, { rowsAffected: 1 });\n  }\n  \n  function constructItemFromParams(tableName, params, existingItem = {}) {\n    // Very simplified approach - in a real implementation you would\n    // parse column names from the query\n    \n    // This is just a basic implementation to make it work\n    const item = { ...existingItem };\n    \n    // Set some fields based on table and params\n    if (tableName === 'users' && params.length >= 3) {\n      item.id = params[0] || existingItem.id || `user_${Date.now()}`;\n      item.name = params[1] || existingItem.name;\n      item.lastName = params[2] || existingItem.lastName;\n      // Add more fields as needed\n    }\n    else if (tableName === 'activities' && params.length >= 3) {\n      item.id = params[0] || existingItem.id || `activity_${Date.now()}`;\n      item.type = params[1] || existingItem.type;\n      item.duration = params[2] || existingItem.duration;\n      // Add more fields as needed\n    }\n    // Add more tables as needed\n    \n    return item;\n  }\n}\n\n/**\n * Create database tables\n */\nasync function createTables() {\n  if (!db) return;\n  \n  // Define table creation queries\n  const tableQueries = [\n    `CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      name TEXT,\n      lastName TEXT,\n      phoneNumber TEXT,\n      email TEXT,\n      sobrietyDate TEXT,\n      homeGroups TEXT,\n      privacySettings TEXT,\n      preferences TEXT,\n      sponsor TEXT,\n      sponsees TEXT,\n      messagingKeys TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS activities (\n      id TEXT PRIMARY KEY,\n      type TEXT NOT NULL,\n      duration INTEGER,\n      date TEXT,\n      notes TEXT,\n      meeting TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS meetings (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      days TEXT,\n      time TEXT,\n      schedule TEXT,\n      address TEXT,\n      locationName TEXT,\n      streetAddress TEXT,\n      city TEXT,\n      state TEXT,\n      zipCode TEXT,\n      coordinates TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS messages (\n      id TEXT PRIMARY KEY,\n      senderId TEXT,\n      recipientId TEXT,\n      content TEXT,\n      encrypted INTEGER,\n      timestamp TEXT,\n      read INTEGER\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS preferences (\n      id TEXT PRIMARY KEY,\n      value TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`\n  ];\n  \n  // Execute each table creation query\n  for (const query of tableQueries) {\n    await executeQuery(query);\n  }\n  \n  console.log(\"All database tables created successfully\");\n}\n\n/**\n * Execute a SQL query\n * @param {string} query - The SQL query\n * @param {Array} params - Query parameters\n * @returns {Promise<any>} Query result\n */\nfunction executeQuery(query, params = []) {\n  return new Promise((resolve, reject) => {\n    if (!db) {\n      reject(new Error(\"Database not initialized\"));\n      return;\n    }\n    \n    db.transaction((tx) => {\n      tx.executeSql(\n        query,\n        params,\n        (_, result) => resolve(result),\n        (_, error) => {\n          console.error(\"SQL Error:\", error);\n          reject(error);\n          return false;\n        }\n      );\n    });\n  });\n}\n\n/**\n * Get all items from a collection\n * @param {string} collection - The collection name\n * @returns {Promise<Array>} All items in the collection\n */\nexport async function getAll(collection) {\n  try {\n    const result = await executeQuery(`SELECT * FROM ${collection}`);\n    const items = [];\n    const len = result.rows.length;\n    \n    for (let i = 0; i < len; i++) {\n      const item = result.rows.item(i);\n      \n      // Parse JSON fields based on collection type\n      if (collection === 'users') {\n        item.privacySettings = JSON.parse(item.privacySettings || '{}');\n        item.preferences = JSON.parse(item.preferences || '{}');\n        item.homeGroups = JSON.parse(item.homeGroups || '[]');\n        item.sponsor = JSON.parse(item.sponsor || 'null');\n        item.sponsees = JSON.parse(item.sponsees || '[]');\n        item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n      } else if (collection === 'meetings') {\n        item.days = JSON.parse(item.days || '[]');\n        item.schedule = JSON.parse(item.schedule || '[]');\n        item.coordinates = JSON.parse(item.coordinates || 'null');\n      } else if (collection === 'preferences') {\n        item.value = JSON.parse(item.value || 'null');\n      }\n      \n      items.push(item);\n    }\n    \n    return items;\n  } catch (error) {\n    console.error(`Error getting all items from ${collection}:`, error);\n    return [];\n  }\n}\n\n/**\n * Get an item by ID from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<Object|null>} The found item or null\n */\nexport async function getById(collection, id) {\n  try {\n    const result = await executeQuery(\n      `SELECT * FROM ${collection} WHERE id = ?`,\n      [id]\n    );\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    const item = result.rows.item(0);\n    \n    // Parse JSON fields based on collection type\n    if (collection === 'users') {\n      item.privacySettings = JSON.parse(item.privacySettings || '{}');\n      item.preferences = JSON.parse(item.preferences || '{}');\n      item.homeGroups = JSON.parse(item.homeGroups || '[]');\n      item.sponsor = JSON.parse(item.sponsor || 'null');\n      item.sponsees = JSON.parse(item.sponsees || '[]');\n      item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n    } else if (collection === 'meetings') {\n      item.days = JSON.parse(item.days || '[]');\n      item.schedule = JSON.parse(item.schedule || '[]');\n      item.coordinates = JSON.parse(item.coordinates || 'null');\n    } else if (collection === 'preferences') {\n      item.value = JSON.parse(item.value || 'null');\n    }\n    \n    return item;\n  } catch (error) {\n    console.error(`Error getting item by ID from ${collection}:`, error);\n    return null;\n  }\n}\n\n/**\n * Add an item to a collection\n * @param {string} collection - The collection name\n * @param {Object} item - The item to add\n * @returns {Promise<Object>} The added item\n */\nexport async function add(collection, item) {\n  try {\n    // Generate ID if not provided\n    if (!item.id) {\n      item.id = `${collection.slice(0, -1)}_${Date.now()}`;\n    }\n    \n    // Add timestamps\n    const now = new Date().toISOString();\n    item.createdAt = item.createdAt || now;\n    item.updatedAt = now;\n    \n    // Prepare item based on collection type\n    let columns, placeholders, values;\n    \n    if (collection === 'users') {\n      const privacySettings = JSON.stringify(item.privacySettings || {});\n      const preferences = JSON.stringify(item.preferences || {});\n      const homeGroups = JSON.stringify(item.homeGroups || []);\n      const sponsor = JSON.stringify(item.sponsor || null);\n      const sponsees = JSON.stringify(item.sponsees || []);\n      const messagingKeys = JSON.stringify(item.messagingKeys || {});\n      \n      columns = 'id, name, lastName, phoneNumber, email, sobrietyDate, homeGroups, privacySettings, preferences, sponsor, sponsees, messagingKeys, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.name, item.lastName, item.phoneNumber, item.email, \n        item.sobrietyDate, homeGroups, privacySettings, preferences, \n        sponsor, sponsees, messagingKeys, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'activities') {\n      columns = 'id, type, duration, date, notes, meeting, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.type, item.duration, item.date, item.notes, \n        item.meeting, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'meetings') {\n      const days = JSON.stringify(item.days || []);\n      const schedule = JSON.stringify(item.schedule || []);\n      const coordinates = JSON.stringify(item.coordinates || null);\n      \n      columns = 'id, name, days, time, schedule, address, locationName, streetAddress, city, state, zipCode, coordinates, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.name, days, item.time, schedule, item.address, \n        item.locationName, item.streetAddress, item.city, item.state, \n        item.zipCode, coordinates, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'messages') {\n      columns = 'id, senderId, recipientId, content, encrypted, timestamp, read';\n      placeholders = '?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.senderId, item.recipientId, item.content, \n        item.encrypted ? 1 : 0, item.timestamp, item.read ? 1 : 0\n      ];\n    } else if (collection === 'preferences') {\n      columns = 'id, value, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?';\n      values = [\n        item.id, JSON.stringify(item.value), item.createdAt, item.updatedAt\n      ];\n    } else {\n      throw new Error(`Unknown collection: ${collection}`);\n    }\n    \n    // Execute insert query\n    await executeQuery(\n      `INSERT INTO ${collection} (${columns}) VALUES (${placeholders})`,\n      values\n    );\n    \n    console.log(`Added item to ${collection} with ID: ${item.id}`);\n    return item;\n  } catch (error) {\n    console.error(`Error adding item to ${collection}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Update an item in a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @param {Object} updates - The updates to apply\n * @returns {Promise<Object|null>} The updated item or null if not found\n */\nexport async function update(collection, id, updates) {\n  try {\n    // Update timestamp\n    updates.updatedAt = new Date().toISOString();\n    \n    // Get the existing item first\n    const existingItem = await getById(collection, id);\n    \n    if (!existingItem) {\n      console.log(`Item with ID ${id} not found in ${collection}`);\n      return null;\n    }\n    \n    // Merge existing item with updates\n    const updatedItem = { ...existingItem, ...updates };\n    \n    // Prepare update based on collection type\n    let setClauses, values;\n    \n    if (collection === 'users') {\n      const privacySettings = JSON.stringify(updatedItem.privacySettings || {});\n      const preferences = JSON.stringify(updatedItem.preferences || {});\n      const homeGroups = JSON.stringify(updatedItem.homeGroups || []);\n      const sponsor = JSON.stringify(updatedItem.sponsor || null);\n      const sponsees = JSON.stringify(updatedItem.sponsees || []);\n      const messagingKeys = JSON.stringify(updatedItem.messagingKeys || {});\n      \n      setClauses = 'name = ?, lastName = ?, phoneNumber = ?, email = ?, sobrietyDate = ?, homeGroups = ?, privacySettings = ?, preferences = ?, sponsor = ?, sponsees = ?, messagingKeys = ?, updatedAt = ?';\n      values = [\n        updatedItem.name, updatedItem.lastName, updatedItem.phoneNumber, updatedItem.email, \n        updatedItem.sobrietyDate, homeGroups, privacySettings, preferences, \n        sponsor, sponsees, messagingKeys, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'activities') {\n      setClauses = 'type = ?, duration = ?, date = ?, notes = ?, meeting = ?, updatedAt = ?';\n      values = [\n        updatedItem.type, updatedItem.duration, updatedItem.date, \n        updatedItem.notes, updatedItem.meeting, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'meetings') {\n      const days = JSON.stringify(updatedItem.days || []);\n      const schedule = JSON.stringify(updatedItem.schedule || []);\n      const coordinates = JSON.stringify(updatedItem.coordinates || null);\n      \n      setClauses = 'name = ?, days = ?, time = ?, schedule = ?, address = ?, locationName = ?, streetAddress = ?, city = ?, state = ?, zipCode = ?, coordinates = ?, updatedAt = ?';\n      values = [\n        updatedItem.name, days, updatedItem.time, schedule, updatedItem.address, \n        updatedItem.locationName, updatedItem.streetAddress, updatedItem.city, \n        updatedItem.state, updatedItem.zipCode, coordinates, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'messages') {\n      setClauses = 'content = ?, encrypted = ?, read = ?';\n      values = [\n        updatedItem.content, updatedItem.encrypted ? 1 : 0, updatedItem.read ? 1 : 0, id\n      ];\n    } else if (collection === 'preferences') {\n      setClauses = 'value = ?, updatedAt = ?';\n      values = [\n        JSON.stringify(updatedItem.value), updatedItem.updatedAt, id\n      ];\n    } else {\n      throw new Error(`Unknown collection: ${collection}`);\n    }\n    \n    // Execute update query\n    const result = await executeQuery(\n      `UPDATE ${collection} SET ${setClauses} WHERE id = ?`,\n      values\n    );\n    \n    if (result.rowsAffected === 0) {\n      console.log(`No rows affected when updating ${collection} with ID: ${id}`);\n      return null;\n    }\n    \n    console.log(`Updated item in ${collection} with ID: ${id}`);\n    return updatedItem;\n  } catch (error) {\n    console.error(`Error updating item in ${collection}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Remove an item from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<boolean>} Whether the item was removed\n */\nexport async function remove(collection, id) {\n  try {\n    const result = await executeQuery(\n      `DELETE FROM ${collection} WHERE id = ?`,\n      [id]\n    );\n    \n    const success = result.rowsAffected > 0;\n    \n    if (success) {\n      console.log(`Removed item from ${collection} with ID: ${id}`);\n    } else {\n      console.log(`No item found in ${collection} with ID: ${id}`);\n    }\n    \n    return success;\n  } catch (error) {\n    console.error(`Error removing item from ${collection}:`, error);\n    return false;\n  }\n}\n\n/**\n * Query items in a collection\n * @param {string} collection - The collection name\n * @param {Function} predicate - Filter function\n * @returns {Promise<Array>} Filtered items\n */\nexport async function query(collection, predicate) {\n  try {\n    const items = await getAll(collection);\n    return items.filter(predicate);\n  } catch (error) {\n    console.error(`Error querying ${collection}:`, error);\n    return [];\n  }\n}\n\n/**\n * Get user preference\n * @param {string} key - The preference key\n * @returns {Promise<any>} The preference value\n */\nexport async function getPreference(key) {\n  try {\n    const preference = await getById('preferences', key);\n    return preference?.value;\n  } catch (error) {\n    console.error(`Error getting preference ${key}:`, error);\n    return null;\n  }\n}\n\n/**\n * Set user preference\n * @param {string} key - The preference key\n * @param {any} value - The preference value\n * @returns {Promise<void>}\n */\nexport async function setPreference(key, value) {\n  try {\n    const now = new Date().toISOString();\n    const preference = {\n      id: key,\n      value: value,\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    // Check if preference exists\n    const existingPref = await getById('preferences', key);\n    \n    if (existingPref) {\n      // Update existing preference\n      await update('preferences', key, { value, updatedAt: now });\n    } else {\n      // Add new preference\n      await add('preferences', preference);\n    }\n  } catch (error) {\n    console.error(`Error setting preference ${key}:`, error);\n  }\n}\n\n/**\n * Calculate spiritual fitness score\n * @param {Array} activities - The activities array\n * @param {number} timeframe - Timeframe in days (default: 30)\n * @returns {Promise<number>} Spiritual fitness score\n */\nexport async function calculateSpiritualFitness(activities, timeframe = 30) {\n  if (!activities || activities.length === 0) {\n    return 20; // Base score if no activities\n  }\n  \n  try {\n    // Get user preference for timeframe if available\n    const storedTimeframe = await getPreference('fitnessTimeframe');\n    const calculationTimeframe = storedTimeframe ? parseInt(storedTimeframe, 10) : timeframe;\n    \n    // Start with a base score\n    const baseScore = 20;\n    let score = baseScore;\n    const now = new Date();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - calculationTimeframe);\n    \n    // Filter activities to those within the timeframe\n    const recentActivities = activities.filter(activity => \n      new Date(activity.date) >= cutoffDate && new Date(activity.date) <= now\n    );\n    \n    if (recentActivities.length === 0) {\n      return baseScore; // Base score only if no recent activities\n    }\n    \n    // Calculate points based on activities\n    const activityPoints = Math.min(40, recentActivities.length * 2); // Cap at 40 points\n    \n    // Calculate consistency points\n    // Group activities by day to check daily activity\n    const activityDayMap = {};\n    recentActivities.forEach(activity => {\n      const day = new Date(activity.date).toISOString().split('T')[0];\n      if (!activityDayMap[day]) {\n        activityDayMap[day] = [];\n      }\n      activityDayMap[day].push(activity);\n    });\n    \n    // Count days with activities\n    const daysWithActivities = Object.keys(activityDayMap).length;\n    \n    // Calculate consistency as a percentage of the timeframe days\n    const consistencyPercentage = daysWithActivities / calculationTimeframe;\n    const consistencyPoints = Math.round(consistencyPercentage * 40); // Up to 40 points for consistency\n    \n    // Total score\n    score = baseScore + activityPoints + consistencyPoints;\n    \n    // Ensure score doesn't exceed 100\n    score = Math.min(100, score);\n    \n    // Round to 2 decimal places\n    score = Math.round(score * 100) / 100;\n    \n    return score;\n  } catch (error) {\n    console.error('Error calculating spiritual fitness:', error);\n    return 20; // Default base score on error\n  }\n}\n\n/**\n * Calculate distance between two lat/long points\n * @param {number} lat1 - Latitude of first point\n * @param {number} lon1 - Longitude of first point\n * @param {number} lat2 - Latitude of second point\n * @param {number} lon2 - Longitude of second point\n * @returns {number} - Distance in miles\n */\nexport function calculateDistance(lat1, lon1, lat2, lon2) {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  }\n  \n  const radlat1 = (Math.PI * lat1) / 180;\n  const radlat2 = (Math.PI * lat2) / 180;\n  const theta = lon1 - lon2;\n  const radtheta = (Math.PI * theta) / 180;\n  let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  \n  if (dist > 1) {\n    dist = 1;\n  }\n  \n  dist = Math.acos(dist);\n  dist = (dist * 180) / Math.PI;\n  dist = dist * 60 * 1.1515; // Miles\n  return dist;\n}\n\n/**\n * Check if there is data in localStorage to migrate\n * @returns {boolean} Whether localStorage contains data to migrate\n */\nexport function hasLocalStorageData() {\n  return !!(\n    localStorage.getItem('user') ||\n    localStorage.getItem('activities') ||\n    localStorage.getItem('meetings') ||\n    localStorage.getItem('messages')\n  );\n}\n\n/**\n * Migrate data from localStorage to the database\n * @returns {Promise<boolean>} Whether migration was successful\n */\nexport async function migrateFromLocalStorage() {\n  console.log(\"Starting migration from localStorage to SQLite...\");\n  \n  try {\n    // Migrate user data\n    const userData = JSON.parse(localStorage.getItem('user'));\n    if (userData) {\n      console.log(\"Migrating user data...\");\n      await add('users', userData);\n    }\n    \n    // Migrate activities\n    const activitiesData = JSON.parse(localStorage.getItem('activities') || '[]');\n    if (activitiesData.length > 0) {\n      console.log(`Migrating ${activitiesData.length} activities...`);\n      for (const activity of activitiesData) {\n        await add('activities', activity);\n      }\n    }\n    \n    // Migrate meetings\n    const meetingsData = JSON.parse(localStorage.getItem('meetings') || '[]');\n    if (meetingsData.length > 0) {\n      console.log(`Migrating ${meetingsData.length} meetings...`);\n      for (const meeting of meetingsData) {\n        await add('meetings', meeting);\n      }\n    }\n    \n    // Migrate messages\n    const messagesData = JSON.parse(localStorage.getItem('messages') || '[]');\n    if (messagesData.length > 0) {\n      console.log(`Migrating ${messagesData.length} messages...`);\n      for (const message of messagesData) {\n        await add('messages', message);\n      }\n    }\n    \n    console.log(\"Migration completed successfully!\");\n    return true;\n  } catch (error) {\n    console.error(\"Error during migration:\", error);\n    return false;\n  }\n}\n\n/**\n * Set up global window.db object for backward compatibility\n * @returns {Object} The database interface\n */\nexport function setupGlobalDbObject() {\n  window.db = {\n    getAll,\n    getById,\n    add,\n    update,\n    remove,\n    query,\n    calculateDistance,\n    getPreference,\n    setPreference,\n    calculateSpiritualFitness,\n    hasLocalStorageData,\n    migrateFromLocalStorage\n  };\n  \n  return window.db;\n}"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","asyncGeneratorStep","_asyncToGenerator","_next","_throw","db","sqlitePlugin","initDatabase","_initDatabase","_callee","_yield$import","CapacitorSQLite","_context","console","log","isPlatform","window","openDatabase","location","warn","setupLocalStorageFallback","createTables","t0","error","getCollection","JSON","parse","localStorage","getItem","saveCollection","data","setItem","stringify","constructItemFromParams","tableName","params","existingItem","undefined","item","id","concat","Date","now","lastName","duration","transaction","fn","tx","executeSql","query","successCallback","errorCallback","queryLower","toLowerCase","trim","startsWith","rows","fromMatch","match","items","whereMatch","fieldName","index","_array","handleLocalStorageSelect","intoMatch","insertId","rowsAffected","handleLocalStorageInsert","updateMatch","fieldValue","findIndex","updatedItem","handleLocalStorageUpdate","filteredItems","handleLocalStorageDelete","_createTables","_callee2","_i","_tableQueries","_query2","_context2","executeQuery","reject","_","result","getAll","_x","_getAll","_callee3","collection","len","_context3","privacySettings","preferences","homeGroups","sponsor","sponsees","messagingKeys","days","schedule","coordinates","getById","_x2","_x3","_getById","_callee4","_context4","add","_x4","_x5","_add","_callee5","columns","placeholders","_context5","toISOString","createdAt","updatedAt","phoneNumber","email","sobrietyDate","date","notes","meeting","time","address","locationName","streetAddress","city","state","zipCode","senderId","recipientId","content","encrypted","timestamp","read","update","_x6","_x7","_x8","_update","_callee6","updates","setClauses","_context6","remove","_x9","_x0","_remove","_callee7","success","_context7","_x1","_x10","_query","_callee8","predicate","_context8","getPreference","_x11","_getPreference","_callee9","key","preference","_context9","setPreference","_x12","_x13","_setPreference","_callee0","_context0","calculateSpiritualFitness","_x14","_calculateSpiritualFitness","_callee1","activities","timeframe","storedTimeframe","calculationTimeframe","baseScore","score","cutoffDate","recentActivities","activityPoints","activityDayMap","daysWithActivities","consistencyPercentage","consistencyPoints","_args1","_context1","parseInt","setDate","getDate","activity","Math","min","day","split","round","calculateDistance","lat1","lon1","lat2","lon2","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","hasLocalStorageData","migrateFromLocalStorage","_migrateFromLocalStorage","_callee10","userData","activitiesData","_iterator","_step","meetingsData","_iterator2","_step2","messagesData","_iterator3","_step3","message","_context10","_createForOfIteratorHelper","t1","t2","t3","setupGlobalDbObject"],"sourceRoot":""}