{"version":3,"file":"src_utils_capacitorStorage_js.bundle.js","mappings":"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","sources":["webpack://spiritual-condition-tracker/./src/utils/capacitorStorage.js"],"sourcesContent":["/**\n * Capacitor-compatible SQLite storage implementation\n * Optimized for native iOS and Android compiled apps\n */\n\nimport { isPlatform } from '@ionic/react';\n\n// Database connection\nlet db = null;\nlet sqlitePlugin = null;\n\n/**\n * Initialize the database connection\n * @returns {Promise<boolean>} Whether initialization was successful\n */\nexport async function initDatabase() {\n  console.log(\"Initializing SQLite database for Capacitor...\");\n  \n  try {\n    // Import the appropriate SQLite plugin based on platform\n    if (isPlatform('capacitor') || isPlatform('cordova')) {\n      console.log(\"Using native SQLite implementation via Capacitor\");\n      \n      // For Capacitor\n      if (isPlatform('capacitor')) {\n        const { CapacitorSQLite } = await import('@capacitor-community/sqlite');\n        sqlitePlugin = CapacitorSQLite;\n      } \n      // For Cordova\n      else {\n        sqlitePlugin = window.sqlitePlugin;\n      }\n      \n      // Open or create the database\n      db = await sqlitePlugin.openDatabase({\n        name: 'spiritualTracker.db',\n        location: 'default'\n      });\n    }\n    // Web fallback - if Web SQL is available\n    else if (window.openDatabase) {\n      console.log(\"Using WebSQL implementation for browser\");\n      db = window.openDatabase(\n        'spiritualTracker.db',\n        '1.0',\n        'Spiritual Condition Tracker Database',\n        5 * 1024 * 1024 // 5MB\n      );\n    }\n    // No SQL support - use localStorage\n    else {\n      console.warn(\"SQLite not available - using localStorage fallback\");\n      setupLocalStorageFallback();\n      return false;\n    }\n    \n    // Create tables\n    await createTables();\n    \n    console.log(\"SQLite database initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing database:\", error);\n    setupLocalStorageFallback();\n    return false;\n  }\n}\n\n/**\n * Create a fallback using localStorage if SQLite is not available\n */\nfunction setupLocalStorageFallback() {\n  console.log(\"Setting up localStorage fallback for data persistence\");\n  \n  // Create an object that mimics SQLite interface but uses localStorage\n  db = {\n    transaction: (fn) => {\n      const tx = {\n        executeSql: (query, params, successCallback, errorCallback) => {\n          try {\n            // Very simplified SQL parsing - handle only basic operations\n            const queryLower = query.toLowerCase().trim();\n            \n            if (queryLower.startsWith('create table')) {\n              // For create table, just do nothing as localStorage doesn't need tables\n              successCallback({}, { rows: { length: 0 } });\n            }\n            else if (queryLower.startsWith('select')) {\n              handleLocalStorageSelect(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('insert')) {\n              handleLocalStorageInsert(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('update')) {\n              handleLocalStorageUpdate(queryLower, params, successCallback, errorCallback);\n            }\n            else if (queryLower.startsWith('delete')) {\n              handleLocalStorageDelete(queryLower, params, successCallback, errorCallback);\n            }\n            else {\n              // Unknown query\n              console.warn(\"Unsupported SQL query for localStorage:\", query);\n              successCallback({}, { rows: { length: 0 } });\n            }\n          } catch (error) {\n            console.error(\"Error in localStorage fallback:\", error);\n            if (errorCallback) errorCallback({}, error);\n          }\n        }\n      };\n      fn(tx);\n    }\n  };\n  \n  // Helper functions for localStorage operations\n  function getCollection(name) {\n    return JSON.parse(localStorage.getItem(name) || '[]');\n  }\n  \n  function saveCollection(name, data) {\n    localStorage.setItem(name, JSON.stringify(data));\n  }\n  \n  function handleLocalStorageSelect(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const fromMatch = query.match(/from\\s+([^\\s,)]+)/i);\n    if (!fromMatch) {\n      throw new Error(\"Invalid SELECT query: \" + query);\n    }\n    \n    const tableName = fromMatch[1];\n    let items = getCollection(tableName);\n    \n    // Handle WHERE clause (very simplified)\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    if (whereMatch && params.length > 0) {\n      const fieldName = whereMatch[1];\n      items = items.filter(item => item[fieldName] === params[0]);\n    }\n    \n    // Create a result object with a row-like interface\n    const result = {\n      rows: {\n        length: items.length,\n        item: (index) => items[index],\n        _array: items\n      }\n    };\n    \n    successCallback({}, result);\n  }\n  \n  function handleLocalStorageInsert(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const intoMatch = query.match(/into\\s+([^\\s(]+)/i);\n    if (!intoMatch) {\n      throw new Error(\"Invalid INSERT query: \" + query);\n    }\n    \n    const tableName = intoMatch[1];\n    \n    // Construct an object from params (very simplified)\n    const item = constructItemFromParams(tableName, params);\n    \n    // Add to collection\n    const items = getCollection(tableName);\n    items.push(item);\n    saveCollection(tableName, items);\n    \n    successCallback({}, { insertId: item.id, rowsAffected: 1 });\n  }\n  \n  function handleLocalStorageUpdate(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const updateMatch = query.match(/update\\s+([^\\s]+)/i);\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    \n    if (!updateMatch || !whereMatch) {\n      throw new Error(\"Invalid UPDATE query: \" + query);\n    }\n    \n    const tableName = updateMatch[1];\n    const fieldName = whereMatch[1];\n    const fieldValue = params[params.length - 1]; // assuming last param is the ID\n    \n    const items = getCollection(tableName);\n    const index = items.findIndex(item => item[fieldName] === fieldValue);\n    \n    if (index === -1) {\n      successCallback({}, { rowsAffected: 0 });\n      return;\n    }\n    \n    // Update the item\n    const updatedItem = constructItemFromParams(tableName, params, items[index]);\n    items[index] = updatedItem;\n    saveCollection(tableName, items);\n    \n    successCallback({}, { rowsAffected: 1 });\n  }\n  \n  function handleLocalStorageDelete(query, params, successCallback) {\n    // Extract table name (very simplified parser)\n    const fromMatch = query.match(/from\\s+([^\\s]+)/i);\n    const whereMatch = query.match(/where\\s+([^\\s]+)\\s*=\\s*\\?/i);\n    \n    if (!fromMatch || !whereMatch) {\n      throw new Error(\"Invalid DELETE query: \" + query);\n    }\n    \n    const tableName = fromMatch[1];\n    const fieldName = whereMatch[1];\n    const fieldValue = params[0];\n    \n    const items = getCollection(tableName);\n    const filteredItems = items.filter(item => item[fieldName] !== fieldValue);\n    \n    if (filteredItems.length === items.length) {\n      successCallback({}, { rowsAffected: 0 });\n      return;\n    }\n    \n    saveCollection(tableName, filteredItems);\n    successCallback({}, { rowsAffected: 1 });\n  }\n  \n  function constructItemFromParams(tableName, params, existingItem = {}) {\n    // Very simplified approach - in a real implementation you would\n    // parse column names from the query\n    \n    // This is just a basic implementation to make it work\n    const item = { ...existingItem };\n    \n    // Set some fields based on table and params\n    if (tableName === 'users' && params.length >= 3) {\n      item.id = params[0] || existingItem.id || `user_${Date.now()}`;\n      item.name = params[1] || existingItem.name;\n      item.lastName = params[2] || existingItem.lastName;\n      // Add more fields as needed\n    }\n    else if (tableName === 'activities' && params.length >= 3) {\n      item.id = params[0] || existingItem.id || `activity_${Date.now()}`;\n      item.type = params[1] || existingItem.type;\n      item.duration = params[2] || existingItem.duration;\n      // Add more fields as needed\n    }\n    // Add more tables as needed\n    \n    return item;\n  }\n}\n\n/**\n * Create database tables\n */\nasync function createTables() {\n  if (!db) return;\n  \n  // Define table creation queries\n  const tableQueries = [\n    `CREATE TABLE IF NOT EXISTS users (\n      id TEXT PRIMARY KEY,\n      name TEXT,\n      lastName TEXT,\n      phoneNumber TEXT,\n      email TEXT,\n      sobrietyDate TEXT,\n      homeGroups TEXT,\n      privacySettings TEXT,\n      preferences TEXT,\n      sponsor TEXT,\n      sponsees TEXT,\n      messagingKeys TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS activities (\n      id TEXT PRIMARY KEY,\n      type TEXT NOT NULL,\n      duration INTEGER,\n      date TEXT,\n      notes TEXT,\n      meeting TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS meetings (\n      id TEXT PRIMARY KEY,\n      name TEXT NOT NULL,\n      days TEXT,\n      time TEXT,\n      schedule TEXT,\n      address TEXT,\n      locationName TEXT,\n      streetAddress TEXT,\n      city TEXT,\n      state TEXT,\n      zipCode TEXT,\n      coordinates TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS messages (\n      id TEXT PRIMARY KEY,\n      senderId TEXT,\n      recipientId TEXT,\n      content TEXT,\n      encrypted INTEGER,\n      timestamp TEXT,\n      read INTEGER\n    )`,\n    \n    `CREATE TABLE IF NOT EXISTS preferences (\n      id TEXT PRIMARY KEY,\n      value TEXT,\n      createdAt TEXT,\n      updatedAt TEXT\n    )`\n  ];\n  \n  // Execute each table creation query\n  for (const query of tableQueries) {\n    await executeQuery(query);\n  }\n  \n  console.log(\"All database tables created successfully\");\n}\n\n/**\n * Execute a SQL query\n * @param {string} query - The SQL query\n * @param {Array} params - Query parameters\n * @returns {Promise<any>} Query result\n */\nfunction executeQuery(query, params = []) {\n  return new Promise((resolve, reject) => {\n    if (!db) {\n      reject(new Error(\"Database not initialized\"));\n      return;\n    }\n    \n    db.transaction((tx) => {\n      tx.executeSql(\n        query,\n        params,\n        (_, result) => resolve(result),\n        (_, error) => {\n          console.error(\"SQL Error:\", error);\n          reject(error);\n          return false;\n        }\n      );\n    });\n  });\n}\n\n/**\n * Get all items from a collection\n * @param {string} collection - The collection name\n * @returns {Promise<Array>} All items in the collection\n */\nexport async function getAll(collection) {\n  try {\n    const result = await executeQuery(`SELECT * FROM ${collection}`);\n    const items = [];\n    const len = result.rows.length;\n    \n    for (let i = 0; i < len; i++) {\n      const item = result.rows.item(i);\n      \n      // Parse JSON fields based on collection type\n      if (collection === 'users') {\n        item.privacySettings = JSON.parse(item.privacySettings || '{}');\n        item.preferences = JSON.parse(item.preferences || '{}');\n        item.homeGroups = JSON.parse(item.homeGroups || '[]');\n        item.sponsor = JSON.parse(item.sponsor || 'null');\n        item.sponsees = JSON.parse(item.sponsees || '[]');\n        item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n      } else if (collection === 'meetings') {\n        item.days = JSON.parse(item.days || '[]');\n        item.schedule = JSON.parse(item.schedule || '[]');\n        item.coordinates = JSON.parse(item.coordinates || 'null');\n      } else if (collection === 'preferences') {\n        item.value = JSON.parse(item.value || 'null');\n      }\n      \n      items.push(item);\n    }\n    \n    return items;\n  } catch (error) {\n    console.error(`Error getting all items from ${collection}:`, error);\n    return [];\n  }\n}\n\n/**\n * Get an item by ID from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<Object|null>} The found item or null\n */\nexport async function getById(collection, id) {\n  try {\n    const result = await executeQuery(\n      `SELECT * FROM ${collection} WHERE id = ?`,\n      [id]\n    );\n    \n    if (result.rows.length === 0) {\n      return null;\n    }\n    \n    const item = result.rows.item(0);\n    \n    // Parse JSON fields based on collection type\n    if (collection === 'users') {\n      item.privacySettings = JSON.parse(item.privacySettings || '{}');\n      item.preferences = JSON.parse(item.preferences || '{}');\n      item.homeGroups = JSON.parse(item.homeGroups || '[]');\n      item.sponsor = JSON.parse(item.sponsor || 'null');\n      item.sponsees = JSON.parse(item.sponsees || '[]');\n      item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n    } else if (collection === 'meetings') {\n      item.days = JSON.parse(item.days || '[]');\n      item.schedule = JSON.parse(item.schedule || '[]');\n      item.coordinates = JSON.parse(item.coordinates || 'null');\n    } else if (collection === 'preferences') {\n      item.value = JSON.parse(item.value || 'null');\n    }\n    \n    return item;\n  } catch (error) {\n    console.error(`Error getting item by ID from ${collection}:`, error);\n    return null;\n  }\n}\n\n/**\n * Add an item to a collection\n * @param {string} collection - The collection name\n * @param {Object} item - The item to add\n * @returns {Promise<Object>} The added item\n */\nexport async function add(collection, item) {\n  try {\n    // Generate ID if not provided\n    if (!item.id) {\n      item.id = `${collection.slice(0, -1)}_${Date.now()}`;\n    }\n    \n    // Add timestamps\n    const now = new Date().toISOString();\n    item.createdAt = item.createdAt || now;\n    item.updatedAt = now;\n    \n    // Prepare item based on collection type\n    let columns, placeholders, values;\n    \n    if (collection === 'users') {\n      const privacySettings = JSON.stringify(item.privacySettings || {});\n      const preferences = JSON.stringify(item.preferences || {});\n      const homeGroups = JSON.stringify(item.homeGroups || []);\n      const sponsor = JSON.stringify(item.sponsor || null);\n      const sponsees = JSON.stringify(item.sponsees || []);\n      const messagingKeys = JSON.stringify(item.messagingKeys || {});\n      \n      columns = 'id, name, lastName, phoneNumber, email, sobrietyDate, homeGroups, privacySettings, preferences, sponsor, sponsees, messagingKeys, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.name, item.lastName, item.phoneNumber, item.email, \n        item.sobrietyDate, homeGroups, privacySettings, preferences, \n        sponsor, sponsees, messagingKeys, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'activities') {\n      columns = 'id, type, duration, date, notes, meeting, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.type, item.duration, item.date, item.notes, \n        item.meeting, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'meetings') {\n      const days = JSON.stringify(item.days || []);\n      const schedule = JSON.stringify(item.schedule || []);\n      const coordinates = JSON.stringify(item.coordinates || null);\n      \n      columns = 'id, name, days, time, schedule, address, locationName, streetAddress, city, state, zipCode, coordinates, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.name, days, item.time, schedule, item.address, \n        item.locationName, item.streetAddress, item.city, item.state, \n        item.zipCode, coordinates, item.createdAt, item.updatedAt\n      ];\n    } else if (collection === 'messages') {\n      columns = 'id, senderId, recipientId, content, encrypted, timestamp, read';\n      placeholders = '?, ?, ?, ?, ?, ?, ?';\n      values = [\n        item.id, item.senderId, item.recipientId, item.content, \n        item.encrypted ? 1 : 0, item.timestamp, item.read ? 1 : 0\n      ];\n    } else if (collection === 'preferences') {\n      columns = 'id, value, createdAt, updatedAt';\n      placeholders = '?, ?, ?, ?';\n      values = [\n        item.id, JSON.stringify(item.value), item.createdAt, item.updatedAt\n      ];\n    } else {\n      throw new Error(`Unknown collection: ${collection}`);\n    }\n    \n    // Execute insert query\n    await executeQuery(\n      `INSERT INTO ${collection} (${columns}) VALUES (${placeholders})`,\n      values\n    );\n    \n    console.log(`Added item to ${collection} with ID: ${item.id}`);\n    return item;\n  } catch (error) {\n    console.error(`Error adding item to ${collection}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Update an item in a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @param {Object} updates - The updates to apply\n * @returns {Promise<Object|null>} The updated item or null if not found\n */\nexport async function update(collection, id, updates) {\n  try {\n    // Update timestamp\n    updates.updatedAt = new Date().toISOString();\n    \n    // Get the existing item first\n    const existingItem = await getById(collection, id);\n    \n    if (!existingItem) {\n      console.log(`Item with ID ${id} not found in ${collection}`);\n      return null;\n    }\n    \n    // Merge existing item with updates\n    const updatedItem = { ...existingItem, ...updates };\n    \n    // Prepare update based on collection type\n    let setClauses, values;\n    \n    if (collection === 'users') {\n      const privacySettings = JSON.stringify(updatedItem.privacySettings || {});\n      const preferences = JSON.stringify(updatedItem.preferences || {});\n      const homeGroups = JSON.stringify(updatedItem.homeGroups || []);\n      const sponsor = JSON.stringify(updatedItem.sponsor || null);\n      const sponsees = JSON.stringify(updatedItem.sponsees || []);\n      const messagingKeys = JSON.stringify(updatedItem.messagingKeys || {});\n      \n      setClauses = 'name = ?, lastName = ?, phoneNumber = ?, email = ?, sobrietyDate = ?, homeGroups = ?, privacySettings = ?, preferences = ?, sponsor = ?, sponsees = ?, messagingKeys = ?, updatedAt = ?';\n      values = [\n        updatedItem.name, updatedItem.lastName, updatedItem.phoneNumber, updatedItem.email, \n        updatedItem.sobrietyDate, homeGroups, privacySettings, preferences, \n        sponsor, sponsees, messagingKeys, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'activities') {\n      setClauses = 'type = ?, duration = ?, date = ?, notes = ?, meeting = ?, updatedAt = ?';\n      values = [\n        updatedItem.type, updatedItem.duration, updatedItem.date, \n        updatedItem.notes, updatedItem.meeting, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'meetings') {\n      const days = JSON.stringify(updatedItem.days || []);\n      const schedule = JSON.stringify(updatedItem.schedule || []);\n      const coordinates = JSON.stringify(updatedItem.coordinates || null);\n      \n      setClauses = 'name = ?, days = ?, time = ?, schedule = ?, address = ?, locationName = ?, streetAddress = ?, city = ?, state = ?, zipCode = ?, coordinates = ?, updatedAt = ?';\n      values = [\n        updatedItem.name, days, updatedItem.time, schedule, updatedItem.address, \n        updatedItem.locationName, updatedItem.streetAddress, updatedItem.city, \n        updatedItem.state, updatedItem.zipCode, coordinates, updatedItem.updatedAt, id\n      ];\n    } else if (collection === 'messages') {\n      setClauses = 'content = ?, encrypted = ?, read = ?';\n      values = [\n        updatedItem.content, updatedItem.encrypted ? 1 : 0, updatedItem.read ? 1 : 0, id\n      ];\n    } else if (collection === 'preferences') {\n      setClauses = 'value = ?, updatedAt = ?';\n      values = [\n        JSON.stringify(updatedItem.value), updatedItem.updatedAt, id\n      ];\n    } else {\n      throw new Error(`Unknown collection: ${collection}`);\n    }\n    \n    // Execute update query\n    const result = await executeQuery(\n      `UPDATE ${collection} SET ${setClauses} WHERE id = ?`,\n      values\n    );\n    \n    if (result.rowsAffected === 0) {\n      console.log(`No rows affected when updating ${collection} with ID: ${id}`);\n      return null;\n    }\n    \n    console.log(`Updated item in ${collection} with ID: ${id}`);\n    return updatedItem;\n  } catch (error) {\n    console.error(`Error updating item in ${collection}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Remove an item from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<boolean>} Whether the item was removed\n */\nexport async function remove(collection, id) {\n  try {\n    const result = await executeQuery(\n      `DELETE FROM ${collection} WHERE id = ?`,\n      [id]\n    );\n    \n    const success = result.rowsAffected > 0;\n    \n    if (success) {\n      console.log(`Removed item from ${collection} with ID: ${id}`);\n    } else {\n      console.log(`No item found in ${collection} with ID: ${id}`);\n    }\n    \n    return success;\n  } catch (error) {\n    console.error(`Error removing item from ${collection}:`, error);\n    return false;\n  }\n}\n\n/**\n * Query items in a collection\n * @param {string} collection - The collection name\n * @param {Function} predicate - Filter function\n * @returns {Promise<Array>} Filtered items\n */\nexport async function query(collection, predicate) {\n  try {\n    const items = await getAll(collection);\n    return items.filter(predicate);\n  } catch (error) {\n    console.error(`Error querying ${collection}:`, error);\n    return [];\n  }\n}\n\n/**\n * Get user preference\n * @param {string} key - The preference key\n * @returns {Promise<any>} The preference value\n */\nexport async function getPreference(key) {\n  try {\n    const preference = await getById('preferences', key);\n    return preference?.value;\n  } catch (error) {\n    console.error(`Error getting preference ${key}:`, error);\n    return null;\n  }\n}\n\n/**\n * Set user preference\n * @param {string} key - The preference key\n * @param {any} value - The preference value\n * @returns {Promise<void>}\n */\nexport async function setPreference(key, value) {\n  try {\n    const now = new Date().toISOString();\n    const preference = {\n      id: key,\n      value: value,\n      createdAt: now,\n      updatedAt: now\n    };\n    \n    // Check if preference exists\n    const existingPref = await getById('preferences', key);\n    \n    if (existingPref) {\n      // Update existing preference\n      await update('preferences', key, { value, updatedAt: now });\n    } else {\n      // Add new preference\n      await add('preferences', preference);\n    }\n  } catch (error) {\n    console.error(`Error setting preference ${key}:`, error);\n  }\n}\n\n/**\n * Calculate spiritual fitness score\n * @param {Array} activities - The activities array\n * @param {number} timeframe - Timeframe in days (default: 30)\n * @returns {Promise<number>} Spiritual fitness score\n */\nexport async function calculateSpiritualFitness(activities, timeframe = 30) {\n  if (!activities || activities.length === 0) {\n    return 20; // Base score if no activities\n  }\n  \n  try {\n    // Get user preference for timeframe if available\n    const storedTimeframe = await getPreference('fitnessTimeframe');\n    const calculationTimeframe = storedTimeframe ? parseInt(storedTimeframe, 10) : timeframe;\n    \n    // Start with a base score\n    const baseScore = 20;\n    let score = baseScore;\n    const now = new Date();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - calculationTimeframe);\n    \n    // Filter activities to those within the timeframe\n    const recentActivities = activities.filter(activity => \n      new Date(activity.date) >= cutoffDate && new Date(activity.date) <= now\n    );\n    \n    if (recentActivities.length === 0) {\n      return baseScore; // Base score only if no recent activities\n    }\n    \n    // Calculate points based on activities\n    const activityPoints = Math.min(40, recentActivities.length * 2); // Cap at 40 points\n    \n    // Calculate consistency points\n    // Group activities by day to check daily activity\n    const activityDayMap = {};\n    recentActivities.forEach(activity => {\n      const day = new Date(activity.date).toISOString().split('T')[0];\n      if (!activityDayMap[day]) {\n        activityDayMap[day] = [];\n      }\n      activityDayMap[day].push(activity);\n    });\n    \n    // Count days with activities\n    const daysWithActivities = Object.keys(activityDayMap).length;\n    \n    // Calculate consistency as a percentage of the timeframe days\n    const consistencyPercentage = daysWithActivities / calculationTimeframe;\n    const consistencyPoints = Math.round(consistencyPercentage * 40); // Up to 40 points for consistency\n    \n    // Total score\n    score = baseScore + activityPoints + consistencyPoints;\n    \n    // Ensure score doesn't exceed 100\n    score = Math.min(100, score);\n    \n    // Round to 2 decimal places\n    score = Math.round(score * 100) / 100;\n    \n    return score;\n  } catch (error) {\n    console.error('Error calculating spiritual fitness:', error);\n    return 20; // Default base score on error\n  }\n}\n\n/**\n * Calculate distance between two lat/long points\n * @param {number} lat1 - Latitude of first point\n * @param {number} lon1 - Longitude of first point\n * @param {number} lat2 - Latitude of second point\n * @param {number} lon2 - Longitude of second point\n * @returns {number} - Distance in miles\n */\nexport function calculateDistance(lat1, lon1, lat2, lon2) {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  }\n  \n  const radlat1 = (Math.PI * lat1) / 180;\n  const radlat2 = (Math.PI * lat2) / 180;\n  const theta = lon1 - lon2;\n  const radtheta = (Math.PI * theta) / 180;\n  let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  \n  if (dist > 1) {\n    dist = 1;\n  }\n  \n  dist = Math.acos(dist);\n  dist = (dist * 180) / Math.PI;\n  dist = dist * 60 * 1.1515; // Miles\n  return dist;\n}\n\n/**\n * Check if there is data in localStorage to migrate\n * @returns {boolean} Whether localStorage contains data to migrate\n */\nexport function hasLocalStorageData() {\n  return !!(\n    localStorage.getItem('user') ||\n    localStorage.getItem('activities') ||\n    localStorage.getItem('meetings') ||\n    localStorage.getItem('messages')\n  );\n}\n\n/**\n * Migrate data from localStorage to the database\n * @returns {Promise<boolean>} Whether migration was successful\n */\nexport async function migrateFromLocalStorage() {\n  console.log(\"Starting migration from localStorage to SQLite...\");\n  \n  try {\n    // Migrate user data\n    const userData = JSON.parse(localStorage.getItem('user'));\n    if (userData) {\n      console.log(\"Migrating user data...\");\n      await add('users', userData);\n    }\n    \n    // Migrate activities\n    const activitiesData = JSON.parse(localStorage.getItem('activities') || '[]');\n    if (activitiesData.length > 0) {\n      console.log(`Migrating ${activitiesData.length} activities...`);\n      for (const activity of activitiesData) {\n        await add('activities', activity);\n      }\n    }\n    \n    // Migrate meetings\n    const meetingsData = JSON.parse(localStorage.getItem('meetings') || '[]');\n    if (meetingsData.length > 0) {\n      console.log(`Migrating ${meetingsData.length} meetings...`);\n      for (const meeting of meetingsData) {\n        await add('meetings', meeting);\n      }\n    }\n    \n    // Migrate messages\n    const messagesData = JSON.parse(localStorage.getItem('messages') || '[]');\n    if (messagesData.length > 0) {\n      console.log(`Migrating ${messagesData.length} messages...`);\n      for (const message of messagesData) {\n        await add('messages', message);\n      }\n    }\n    \n    console.log(\"Migration completed successfully!\");\n    return true;\n  } catch (error) {\n    console.error(\"Error during migration:\", error);\n    return false;\n  }\n}\n\n/**\n * Set up global window.db object for backward compatibility\n * @returns {Object} The database interface\n */\n/**\n * Calculate sobriety days based on sobriety date\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @returns {number} - Number of days sober\n */\nexport function calculateSobrietyDays(sobrietyDate) {\n  if (!sobrietyDate) return 0;\n  \n  const startDate = new Date(sobrietyDate);\n  const today = new Date();\n  \n  // Calculate difference in milliseconds\n  const diffMs = today - startDate;\n  \n  // Convert to days\n  return Math.floor(diffMs / (1000 * 60 * 60 * 24));\n}\n\n/**\n * Calculate sobriety years with decimal precision\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @param {number} decimalPlaces - Number of decimal places\n * @returns {number} - Years of sobriety with decimal precision\n */\nexport function calculateSobrietyYears(sobrietyDate, decimalPlaces = 2) {\n  if (!sobrietyDate) return 0;\n  \n  const startDate = new Date(sobrietyDate);\n  const today = new Date();\n  \n  // Calculate difference in milliseconds\n  const diffMs = today - startDate;\n  \n  // Calculate years with decimal precision\n  const years = diffMs / (1000 * 60 * 60 * 24 * 365.25);\n  \n  // Round to specified decimal places\n  return parseFloat(years.toFixed(decimalPlaces));\n}\n\n/**\n * Calculate spiritual fitness with a custom timeframe\n * @param {number} timeframe - Number of days to calculate score for (default 30)\n * @returns {number} - Spiritual fitness score (0-100)\n */\nexport function calculateSpiritualFitnessWithTimeframe(timeframe = 30) {\n  console.log('calculateSpiritualFitnessWithTimeframe called with timeframe:', timeframe);\n  \n  try {\n    // Get activities from the right source\n    let activities;\n    \n    // If we have window.activities, use that directly\n    if (window.activities && Array.isArray(window.activities)) {\n      activities = window.activities;\n    } \n    // Otherwise get activities from the database\n    else {\n      try {\n        const result = executeQuery('SELECT * FROM activities');\n        activities = [];\n        \n        for (let i = 0; i < result.rows.length; i++) {\n          activities.push(result.rows.item(i));\n        }\n      } catch (dbError) {\n        console.error('Database error getting activities:', dbError);\n        activities = [];\n      }\n    }\n    \n    if (!activities || activities.length === 0) {\n      return 20; // Base score if no activities\n    }\n    \n    // Get current date and cutoff date\n    const now = new Date();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(now.getDate() - timeframe);\n    \n    // Filter recent activities\n    const recentActivities = activities.filter(activity => {\n      const activityDate = new Date(activity.date);\n      return activityDate >= cutoffDate && activityDate <= now;\n    });\n    \n    console.log('Recent activities within timeframe:', recentActivities.length);\n    \n    if (recentActivities.length === 0) {\n      return 20; // Base score\n    }\n    \n    // Define weights for activity types\n    const weights = {\n      meeting: 10,    // Attending a meeting\n      prayer: 8,      // Prayer \n      meditation: 8,  // Meditation\n      reading: 6,     // Reading AA literature\n      callSponsor: 5, // Calling sponsor\n      callSponsee: 4, // Calling sponsee\n      service: 9,     // Service work\n      stepWork: 10    // Working on steps\n    };\n    \n    // Calculate scores\n    let totalPoints = 0;\n    let eligibleActivities = 0;\n    const breakdown = {};\n    \n    // Used to track the days with activities for consistency bonus\n    const activityDays = new Set();\n    \n    recentActivities.forEach(activity => {\n      // Track unique days with activities\n      if (activity.date) {\n        const day = new Date(activity.date).toISOString().split('T')[0];\n        activityDays.add(day);\n      }\n      \n      // Skip activities with unknown types\n      if (!weights[activity.type]) return;\n      \n      // Initialize type in breakdown if it doesn't exist\n      if (!breakdown[activity.type]) {\n        breakdown[activity.type] = { count: 0, points: 0 };\n      }\n      \n      // Update breakdown\n      breakdown[activity.type].count++;\n      breakdown[activity.type].points += weights[activity.type];\n      \n      // Update total score\n      totalPoints += weights[activity.type];\n      eligibleActivities++;\n    });\n    \n    // Calculate consistency points based on timeframe\n    let consistencyPoints = 0;\n    const daysWithActivities = activityDays.size;\n    \n    // Adjust based on timeframe - this makes the scores different for different timeframes\n    if (timeframe <= 30) {\n      // For 30 days, we want more consistent activity\n      const targetDays = Math.min(timeframe, 20); // Target of 20 days in 30 days\n      consistencyPoints = Math.min(20, Math.round(daysWithActivities / targetDays * 20));\n    } else if (timeframe <= 90) {\n      // For 60-90 days, expect less frequent but regular activity\n      const targetDays = Math.min(timeframe * 0.5, 40); // Target of 40 days in 90 days\n      consistencyPoints = Math.min(15, Math.round(daysWithActivities / targetDays * 15));\n    } else if (timeframe <= 180) {\n      // For 180 days, expect somewhat less frequent activity\n      const targetDays = Math.min(timeframe * 0.4, 60); // Target of 60 days in 180 days\n      consistencyPoints = Math.min(12, Math.round(daysWithActivities / targetDays * 12));\n    } else {\n      // For 365 days, expect much less frequent but still regular activity\n      const targetDays = Math.min(timeframe * 0.3, 90); // Target of 90 days in 365 days\n      consistencyPoints = Math.min(10, Math.round(daysWithActivities / targetDays * 10));\n    }\n    \n    // Calculate variety bonus - more types of activities gives higher bonus\n    const varietyTypes = Object.keys(breakdown).length;\n    const varietyBonus = Math.min(10, varietyTypes * 2);\n    \n    // Calculate base score from eligible activities\n    let baseScore = 0;\n    if (eligibleActivities > 0) {\n      // Scale based on timeframe - shorter timeframes require less total points for a good score\n      let scaleFactor;\n      if (timeframe <= 30) {\n        scaleFactor = 80; // In 30 days, need 80 points for score of 50\n      } else if (timeframe <= 90) {\n        scaleFactor = 120; // In 90 days, need 120 points for score of 50\n      } else if (timeframe <= 180) {\n        scaleFactor = 180; // In 180 days, need 180 points for score of 50\n      } else {\n        scaleFactor = 240; // In 365 days, need 240 points for score of 50\n      }\n      \n      baseScore = Math.round((totalPoints / scaleFactor) * 50);\n    }\n    \n    // Final score capped at 100\n    const finalScore = Math.min(100, baseScore + consistencyPoints + varietyBonus);\n    \n    console.log('Spiritual fitness calculation details:', {\n      timeframe,\n      eligibleActivities,\n      daysWithActivities,\n      totalPoints,\n      baseScore,\n      consistencyPoints, \n      varietyBonus,\n      finalScore\n    });\n    \n    return finalScore;\n  } catch (error) {\n    console.error('Error in calculateSpiritualFitnessWithTimeframe:', error);\n    return 20; // Base fallback score\n  }\n}\n\nexport function setupGlobalDbObject() {\n  console.log('Setting up global db object with all necessary functions');\n  \n  window.db = {\n    getAll,\n    getById,\n    add,\n    update,\n    remove,\n    query,\n    calculateDistance,\n    calculateSobrietyDays,\n    calculateSobrietyYears,\n    getPreference,\n    setPreference,\n    calculateSpiritualFitness,\n    calculateSpiritualFitnessWithTimeframe,\n    hasLocalStorageData,\n    migrateFromLocalStorage\n  };\n  \n  // Verify the functions are properly attached\n  console.log('Global db object created with these functions:', Object.keys(window.db));\n  \n  return window.db;\n}"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","_catch","delegateYield","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_toPrimitive","toPrimitive","String","Number","asyncGeneratorStep","_asyncToGenerator","_next","_throw","isPlatform","db","sqlitePlugin","initDatabase","_initDatabase","_callee","_yield$import","CapacitorSQLite","_callee$","_context","console","log","window","openDatabase","location","warn","setupLocalStorageFallback","createTables","t0","error","transaction","fn","tx","executeSql","query","params","successCallback","errorCallback","queryLower","toLowerCase","trim","startsWith","rows","handleLocalStorageSelect","handleLocalStorageInsert","handleLocalStorageUpdate","handleLocalStorageDelete","getCollection","JSON","parse","localStorage","getItem","saveCollection","data","setItem","stringify","fromMatch","match","tableName","items","whereMatch","fieldName","item","result","index","_array","intoMatch","constructItemFromParams","insertId","id","rowsAffected","updateMatch","fieldValue","findIndex","updatedItem","filteredItems","existingItem","undefined","concat","Date","now","lastName","duration","_createTables","_callee2","tableQueries","_i","_tableQueries","_query2","_callee2$","_context2","executeQuery","reject","_","getAll","_x","_getAll","_callee3","collection","len","_callee3$","_context3","privacySettings","preferences","homeGroups","sponsor","sponsees","messagingKeys","days","schedule","coordinates","getById","_x2","_x3","_getById","_callee4","_callee4$","_context4","add","_x4","_x5","_add","_callee5","columns","placeholders","_callee5$","_context5","toISOString","createdAt","updatedAt","phoneNumber","email","sobrietyDate","date","notes","meeting","time","address","locationName","streetAddress","city","state","zipCode","senderId","recipientId","content","encrypted","timestamp","read","update","_x6","_x7","_x8","_update","_callee6","updates","setClauses","_callee6$","_context6","remove","_x9","_x0","_remove","_callee7","success","_callee7$","_context7","_x1","_x10","_query","_callee8","predicate","_callee8$","_context8","getPreference","_x11","_getPreference","_callee9","key","preference","_callee9$","_context9","setPreference","_x12","_x13","_setPreference","_callee0","existingPref","_callee0$","_context0","calculateSpiritualFitness","_x14","_calculateSpiritualFitness","_callee1","activities","timeframe","storedTimeframe","calculationTimeframe","baseScore","score","cutoffDate","recentActivities","activityPoints","activityDayMap","daysWithActivities","consistencyPercentage","consistencyPoints","_args1","_callee1$","_context1","parseInt","setDate","getDate","activity","Math","min","day","split","round","calculateDistance","lat1","lon1","lat2","lon2","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","hasLocalStorageData","migrateFromLocalStorage","_migrateFromLocalStorage","_callee10","userData","activitiesData","_iterator","_step","meetingsData","_iterator2","_step2","messagesData","_iterator3","_step3","message","_callee10$","_context10","_createForOfIteratorHelper","t1","t2","t3","calculateSobrietyDays","startDate","today","diffMs","floor","calculateSobrietyYears","decimalPlaces","years","parseFloat","toFixed","calculateSpiritualFitnessWithTimeframe","Array","isArray","dbError","activityDate","weights","prayer","meditation","reading","callSponsor","callSponsee","service","stepWork","totalPoints","eligibleActivities","breakdown","activityDays","Set","count","points","size","targetDays","varietyTypes","varietyBonus","scaleFactor","finalScore","setupGlobalDbObject"],"sourceRoot":""}