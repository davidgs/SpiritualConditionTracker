{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.ToggleButton=void 0;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _color=_interopRequireDefault(require(\"color\"));var _ToggleButtonGroup=require(\"./ToggleButtonGroup\");var _utils=require(\"./utils\");var _theming=require(\"../../core/theming\");var _colors=require(\"../../styles/themes/v2/colors\");var _forwardRef=require(\"../../utils/forwardRef\");var _IconButton=_interopRequireDefault(require(\"../IconButton/IconButton\"));var _excluded=[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\",\"rippleColor\"];function _interopRequireWildcard(e,t){if(\"function\"==typeof WeakMap)var r=new WeakMap(),n=new WeakMap();return(_interopRequireWildcard=function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f);}for(var _t in e)\"default\"!==_t&&{}.hasOwnProperty.call(e,_t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,_t))&&(i.get||i.set)?o(f,_t,i):f[_t]=e[_t]);return f;})(e,t);}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var ToggleButton=exports.ToggleButton=(0,_forwardRef.forwardRef)(function(_ref,ref){var icon=_ref.icon,size=_ref.size,themeOverrides=_ref.theme,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,value=_ref.value,status=_ref.status,_onPress=_ref.onPress,rippleColor=_ref.rippleColor,rest=(0,_objectWithoutProperties2.default)(_ref,_excluded);var theme=(0,_theming.useInternalTheme)(themeOverrides);var borderRadius=theme.roundness;return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer,null,function(context){var checked=context&&context.value===value||status==='checked';var backgroundColor=(0,_utils.getToggleButtonColor)({theme:theme,checked:checked});var borderColor=theme.isV3?theme.colors.outline:(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.29).rgb().string();return React.createElement(_IconButton.default,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,selected:checked},disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:borderColor},style],ref:ref,theme:theme,rippleColor:rippleColor},rest));});});var styles=_reactNative.StyleSheet.create({content:{width:42,height:42,margin:0}});var _default=exports.default=ToggleButton;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_color","_interopRequireDefault","_ToggleButtonGroup","_utils","_theming","_colors","_forwardRef","_IconButton","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButton","exports","forwardRef","_ref","ref","icon","size","themeOverrides","theme","accessibilityLabel","disabled","style","value","status","onPress","rippleColor","rest","_objectWithoutProperties2","useInternalTheme","borderRadius","roundness","createElement","ToggleButtonGroupContext","Consumer","context","checked","backgroundColor","getToggleButtonColor","borderColor","isV3","colors","outline","color","dark","white","black","alpha","rgb","string","IconButton","_extends","borderless","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin","_default"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/components/ToggleButton/ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n  Animated,\n  ColorValue,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { ThemeProp } from '../../types';\nimport { forwardRef } from '../../utils/forwardRef';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  iconColor?: string;\n  /**\n   * Color of the ripple effect.\n   */\n  rippleColor?: ColorValue;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n  ref?: React.RefObject<View>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme: themeOverrides,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      rippleColor,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(themeOverrides);\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              theme={theme}\n              rippleColor={rippleColor}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}