{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getServerResources=getServerResources;exports.registerStaticFont=registerStaticFont;exports.resetServerContext=resetServerContext;var _expoModulesCore=require(\"expo-modules-core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var _FontLoader=require(\"./FontLoader\");function getServerResources(){return _ExpoFontLoader.default.getServerResources();}function resetServerContext(){return _ExpoFontLoader.default.resetServerContext();}function registerStaticFont(fontFamily,source){if(!source){throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`,`Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);}var asset=(0,_FontLoader.getAssetForSource)(source);(0,_FontLoader.loadSingleFontAsync)(fontFamily,asset);}","map":{"version":3,"names":["_expoModulesCore","require","_ExpoFontLoader","_interopRequireDefault","_FontLoader","getServerResources","ExpoFontLoader","resetServerContext","registerStaticFont","fontFamily","source","CodedError","asset","getAssetForSource","loadSingleFontAsync"],"sources":["/home/runner/workspace/node_modules/expo-font/src/server.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontSource } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\n\n/**\n * @returns the server resources that should be statically extracted.\n * @private\n */\nexport function getServerResources(): string[] {\n  return ExpoFontLoader.getServerResources();\n}\n\n/**\n * @returns clear the server resources from the global scope.\n * @private\n */\nexport function resetServerContext() {\n  return ExpoFontLoader.resetServerContext();\n}\n\nexport function registerStaticFont(fontFamily: string, source?: FontSource | null) {\n  // MUST BE A SYNC FUNCTION!\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n  const asset = getAssetForSource(source);\n\n  loadSingleFontAsync(fontFamily, asset);\n}\n"],"mappings":"sRAAA,IAAAA,gBAAA,CAAAC,OAAA,sBAEA,IAAAC,eAAA,CAAAC,sBAAA,CAAAF,OAAA,sBAEA,IAAAG,WAAA,CAAAH,OAAA,iBAMM,QAAU,CAAAI,kBAAkBA,CAAA,EAChC,MAAO,CAAAC,uBAAc,CAACD,kBAAkB,EAAE,CAC5C,CAMM,QAAU,CAAAE,kBAAkBA,CAAA,EAChC,MAAO,CAAAD,uBAAc,CAACC,kBAAkB,EAAE,CAC5C,CAEM,QAAU,CAAAC,kBAAkBA,CAACC,UAAkB,CAAEC,MAA0B,EAE/E,GAAI,CAACA,MAAM,CAAE,CACX,KAAM,IAAI,CAAAC,2BAAU,CAClB,iBAAiB,CACjB,iDAAiDF,UAAU,MAAMC,MAAM,sEAAsED,UAAU,GAAG,CAC3J,CACH,CACA,GAAM,CAAAG,KAAK,CAAG,GAAAC,6BAAiB,EAACH,MAAM,CAAC,CAEvC,GAAAI,+BAAmB,EAACL,UAAU,CAAEG,KAAK,CAAC,CACxC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}