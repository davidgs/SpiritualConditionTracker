{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.ToggleButtonRow=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _ToggleButton=_interopRequireDefault(require(\"./ToggleButton\"));var _ToggleButtonGroup=_interopRequireDefault(require(\"./ToggleButtonGroup\"));function _interopRequireWildcard(e,t){if(\"function\"==typeof WeakMap)var r=new WeakMap(),n=new WeakMap();return(_interopRequireWildcard=function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f);}for(var _t in e)\"default\"!==_t&&{}.hasOwnProperty.call(e,_t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,_t))&&(i.get||i.set)?o(f,_t,i):f[_t]=e[_t]);return f;})(e,t);}var ToggleButtonRow=exports.ToggleButtonRow=function ToggleButtonRow(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children,style=_ref.style;var count=React.Children.count(children);return React.createElement(_ToggleButtonGroup.default,{value:value,onValueChange:onValueChange},React.createElement(_reactNative.View,{style:[styles.row,style]},React.Children.map(children,function(child,i){if(child&&child.type===_ToggleButton.default){return React.cloneElement(child,{style:[styles.button,i===0?styles.first:i===count-1?styles.last:styles.middle,child.props.style]});}return child;})));};ToggleButtonRow.displayName='ToggleButton.Row';var styles=_reactNative.StyleSheet.create({row:{flexDirection:'row'},button:{borderWidth:_reactNative.StyleSheet.hairlineWidth},first:{borderTopRightRadius:0,borderBottomRightRadius:0},middle:{borderRadius:0,borderLeftWidth:0},last:{borderLeftWidth:0,borderTopLeftRadius:0,borderBottomLeftRadius:0}});var _default=exports.default=ToggleButtonRow;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_ToggleButton","_interopRequireDefault","_ToggleButtonGroup","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButtonRow","exports","_ref","value","onValueChange","children","style","count","Children","createElement","ToggleButtonGroup","View","styles","row","map","child","type","ToggleButton","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius","_default"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/components/ToggleButton/ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\n\nimport ToggleButton from './ToggleButton';\nimport ToggleButtonGroup from './ToggleButtonGroup';\n\nexport type Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}