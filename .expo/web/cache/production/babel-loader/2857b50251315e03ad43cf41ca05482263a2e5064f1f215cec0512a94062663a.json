{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _reactNative=require(\"react-native\");var _browser=require(\"./environment/browser\");if(__DEV__&&typeof process.env.EXPO_OS==='undefined'){console.warn(`The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`);}var nativeSelect=typeof window!=='undefined'?_reactNative.Platform.select:function select(specifics){if(!process.env.EXPO_OS)return undefined;if(specifics.hasOwnProperty(process.env.EXPO_OS)){return specifics[process.env.EXPO_OS];}else if(process.env.EXPO_OS!=='web'&&specifics.hasOwnProperty('native')){return specifics.native;}else if(specifics.hasOwnProperty('default')){return specifics.default;}return undefined;};var Platform={OS:process.env.EXPO_OS||_reactNative.Platform.OS,select:nativeSelect,isDOMAvailable:_browser.isDOMAvailable,canUseEventListeners:_browser.canUseEventListeners,canUseViewport:_browser.canUseViewport,isAsyncDebugging:_browser.isAsyncDebugging};var _default=exports.default=Platform;","map":{"version":3,"names":["_reactNative","require","_browser","__DEV__","process","env","EXPO_OS","console","warn","nativeSelect","window","ReactNativePlatform","select","specifics","undefined","hasOwnProperty","native","default","Platform","OS","isDOMAvailable","canUseEventListeners","canUseViewport","isAsyncDebugging","_default","exports"],"sources":["/home/runner/workspace/node_modules/expo-modules-core/src/Platform.ts"],"sourcesContent":["import { PlatformOSType, Platform as ReactNativePlatform } from 'react-native';\n\nimport {\n  isDOMAvailable,\n  canUseEventListeners,\n  canUseViewport,\n  isAsyncDebugging,\n} from './environment/browser';\n\nexport type PlatformSelectOSType = PlatformOSType | 'native' | 'electron' | 'default';\n\nexport type PlatformSelect = <T>(specifics: { [platform in PlatformSelectOSType]?: T }) => T;\n\nif (__DEV__ && typeof process.env.EXPO_OS === 'undefined') {\n  console.warn(\n    `The global process.env.EXPO_OS is not defined. This should be inlined by babel-preset-expo during transformation.`\n  );\n}\n\nconst nativeSelect =\n  typeof window !== 'undefined'\n    ? ReactNativePlatform.select\n    : // process.env.EXPO_OS is injected by `babel-preset-expo` and available in both client and `react-server` environments.\n      // Opt to use the env var when possible, and fallback to the React Native Platform module when it's not (arbitrary bundlers and transformers).\n      function select<T>(specifics: { [platform in PlatformSelectOSType]?: T }): T | undefined {\n        if (!process.env.EXPO_OS) return undefined;\n        if (specifics.hasOwnProperty(process.env.EXPO_OS)) {\n          return specifics[process.env.EXPO_OS as PlatformSelectOSType]!;\n        } else if (process.env.EXPO_OS !== 'web' && specifics.hasOwnProperty('native')) {\n          return specifics.native!;\n        } else if (specifics.hasOwnProperty('default')) {\n          return specifics.default!;\n        }\n        // do nothing...\n        return undefined;\n      };\n\nconst Platform = {\n  /**\n   * Denotes the currently running platform.\n   * Can be one of ios, android, web.\n   */\n  OS: process.env.EXPO_OS || ReactNativePlatform.OS,\n  /**\n   * Returns the value with the matching platform.\n   * Object keys can be any of ios, android, native, web, default.\n   *\n   * @ios ios, native, default\n   * @android android, native, default\n   * @web web, default\n   */\n  select: nativeSelect as PlatformSelect,\n  /**\n   * Denotes if the DOM API is available in the current environment.\n   * The DOM is not available in native React runtimes and Node.js.\n   */\n  isDOMAvailable,\n  /**\n   * Denotes if the current environment can attach event listeners\n   * to the window. This will return false in native React\n   * runtimes and Node.js.\n   */\n  canUseEventListeners,\n  /**\n   * Denotes if the current environment can inspect properties of the\n   * screen on which the current window is being rendered. This will\n   * return false in native React runtimes and Node.js.\n   */\n  canUseViewport,\n  /**\n   * If the JavaScript is being executed in a remote JavaScript environment.\n   * When `true`, synchronous native invocations cannot be executed.\n   */\n  isAsyncDebugging,\n};\n\nexport default Platform;\n"],"mappings":"gFAAA,IAAAA,YAAA,CAAAC,OAAA,iBAEA,IAAAC,QAAA,CAAAD,OAAA,0BAWA,GAAIE,OAAO,EAAI,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACC,OAAO,GAAK,WAAW,CAAE,CACzDC,OAAO,CAACC,IAAI,CACV,mHACF,CAAC,CACH,CAEA,GAAM,CAAAC,YAAY,CAChB,MAAO,CAAAC,MAAM,GAAK,WAAW,CACzBC,qBAAmB,CAACC,MAAM,CAG1B,QAAS,CAAAA,MAAMA,CAAIC,SAAqD,CAAiB,CACvF,GAAI,CAACT,OAAO,CAACC,GAAG,CAACC,OAAO,CAAE,MAAO,CAAAQ,SAAS,CAC1C,GAAID,SAAS,CAACE,cAAc,CAACX,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC,CAAE,CACjD,MAAO,CAAAO,SAAS,CAACT,OAAO,CAACC,GAAG,CAACC,OAAO,CAAyB,CAC/D,CAAC,IAAM,IAAIF,OAAO,CAACC,GAAG,CAACC,OAAO,GAAK,KAAK,EAAIO,SAAS,CAACE,cAAc,CAAC,QAAQ,CAAC,CAAE,CAC9E,MAAO,CAAAF,SAAS,CAACG,MAAM,CACzB,CAAC,IAAM,IAAIH,SAAS,CAACE,cAAc,CAAC,SAAS,CAAC,CAAE,CAC9C,MAAO,CAAAF,SAAS,CAACI,OAAO,CAC1B,CAEA,MAAO,CAAAH,SAAS,CAClB,CAAC,CAEP,GAAM,CAAAI,QAAQ,CAAG,CAKfC,EAAE,CAAEf,OAAO,CAACC,GAAG,CAACC,OAAO,EAAIK,qBAAmB,CAACQ,EAAE,CASjDP,MAAM,CAAEH,YAA8B,CAKtCW,cAAc,CAAdA,uBAAc,CAMdC,oBAAoB,CAApBA,6BAAoB,CAMpBC,cAAc,CAAdA,uBAAc,CAKdC,gBAAgB,CAAhBA,yBACF,CAAC,CAAC,IAAAC,QAAA,CAAAC,OAAA,CAAAR,OAAA,CAEaC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}