{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"FontDisplay\",{enumerable:true,get:function get(){return _Font.FontDisplay;}});exports.getLoadedFonts=getLoadedFonts;exports.isLoaded=isLoaded;exports.isLoading=isLoading;exports.loadAsync=loadAsync;exports.unloadAllAsync=unloadAllAsync;exports.unloadAsync=unloadAsync;var _asyncToGenerator2=_interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var _Font=require(\"./Font.types\");var _FontLoader=require(\"./FontLoader\");var _memory=require(\"./memory\");var _server=require(\"./server\");function isLoaded(fontFamily){if(_expoModulesCore.Platform.OS==='web'){return(0,_memory.isLoadedInCache)(fontFamily)||!!_ExpoFontLoader.default.isLoaded(fontFamily);}return(0,_memory.isLoadedNative)(fontFamily);}function getLoadedFonts(){return _ExpoFontLoader.default.getLoadedFonts();}function isLoading(fontFamily){return fontFamily in _memory.loadPromises;}function loadAsync(fontFamilyOrFontMap,source){var isServer=_expoModulesCore.Platform.OS==='web'&&typeof window==='undefined';if(typeof fontFamilyOrFontMap==='object'){if(source){return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);if(isServer){names.map(function(name){return(0,_server.registerStaticFont)(name,fontMap[name]);});return Promise.resolve();}return Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})).then(function(){});}if(isServer){(0,_server.registerStaticFont)(fontFamilyOrFontMap,source);return Promise.resolve();}return loadFontInNamespaceAsync(fontFamilyOrFontMap,source);}function loadFontInNamespaceAsync(_x,_x2){return _loadFontInNamespaceAsync.apply(this,arguments);}function _loadFontInNamespaceAsync(){_loadFontInNamespaceAsync=(0,_asyncToGenerator2.default)(function*(fontFamily,source){if(!source){throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`,`Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);}if(isLoaded(fontFamily)){return;}if(_memory.loadPromises.hasOwnProperty(fontFamily)){return _memory.loadPromises[fontFamily];}var asset=(0,_FontLoader.getAssetForSource)(source);_memory.loadPromises[fontFamily]=(0,_asyncToGenerator2.default)(function*(){try{yield(0,_FontLoader.loadSingleFontAsync)(fontFamily,asset);(0,_memory.markLoaded)(fontFamily);}finally{delete _memory.loadPromises[fontFamily];}})();yield _memory.loadPromises[fontFamily];});return _loadFontInNamespaceAsync.apply(this,arguments);}function unloadAllAsync(){return _unloadAllAsync.apply(this,arguments);}function _unloadAllAsync(){_unloadAllAsync=(0,_asyncToGenerator2.default)(function*(){if(!_ExpoFontLoader.default.unloadAllAsync){throw new _expoModulesCore.UnavailabilityError('expo-font','unloadAllAsync');}if(Object.keys(_memory.loadPromises).length){throw new _expoModulesCore.CodedError(`ERR_UNLOAD`,`Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);}(0,_memory.purgeCache)();yield _ExpoFontLoader.default.unloadAllAsync();});return _unloadAllAsync.apply(this,arguments);}function unloadAsync(_x3,_x4){return _unloadAsync.apply(this,arguments);}function _unloadAsync(){_unloadAsync=(0,_asyncToGenerator2.default)(function*(fontFamilyOrFontMap,options){if(!_ExpoFontLoader.default.unloadAsync){throw new _expoModulesCore.UnavailabilityError('expo-font','unloadAsync');}if(typeof fontFamilyOrFontMap==='object'){if(options){throw new _expoModulesCore.CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);}var fontMap=fontFamilyOrFontMap;var names=Object.keys(fontMap);yield Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);}));return;}return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap,options);});return _unloadAsync.apply(this,arguments);}function unloadFontInNamespaceAsync(_x5,_x6){return _unloadFontInNamespaceAsync.apply(this,arguments);}function _unloadFontInNamespaceAsync(){_unloadFontInNamespaceAsync=(0,_asyncToGenerator2.default)(function*(fontFamily,options){if(!isLoaded(fontFamily)){return;}else{(0,_memory.purgeFontFamilyFromCache)(fontFamily);}if(!fontFamily){throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`,`Cannot unload an empty name`);}yield _ExpoFontLoader.default.unloadAsync(fontFamily,options);});return _unloadFontInNamespaceAsync.apply(this,arguments);}","map":{"version":3,"names":["_expoModulesCore","require","_ExpoFontLoader","_interopRequireDefault","_Font","_FontLoader","_memory","_server","isLoaded","fontFamily","Platform","OS","isLoadedInCache","ExpoFontLoader","isLoadedNative","getLoadedFonts","isLoading","loadPromises","loadAsync","fontFamilyOrFontMap","source","isServer","window","Promise","reject","CodedError","fontMap","names","Object","keys","map","name","registerStaticFont","resolve","all","loadFontInNamespaceAsync","then","_x","_x2","_loadFontInNamespaceAsync","apply","arguments","_asyncToGenerator2","default","hasOwnProperty","asset","getAssetForSource","loadSingleFontAsync","markLoaded","unloadAllAsync","_unloadAllAsync","UnavailabilityError","length","join","purgeCache","unloadAsync","_x3","_x4","_unloadAsync","options","unloadFontInNamespaceAsync","_x5","_x6","_unloadFontInNamespaceAsync","purgeFontFamilyFromCache"],"sources":["/home/runner/workspace/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync } from './FontLoader';\nimport {\n  isLoadedInCache,\n  isLoadedNative,\n  loadPromises,\n  markLoaded,\n  purgeCache,\n  purgeFontFamilyFromCache,\n} from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return isLoadedInCache(fontFamily) || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return isLoadedNative(fontFamily);\n}\n\n/**\n * Synchronously get all the fonts that have been loaded.\n * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n *\n * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n */\nexport function getLoadedFonts(): string[] {\n  return ExpoFontLoader.getLoadedFonts();\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * An efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n *\n * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n * with React Native `Text` elements.\n * @param source The font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  // we consult the native module to see if the font is already loaded\n  // this is slower than checking the cache but can help avoid loading the same font n times\n  if (isLoaded(fontFamily)) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      markLoaded(fontFamily);\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n * @hidden\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n  purgeCache();\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * This is used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n * @hidden\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!isLoaded(fontFamily)) {\n    return;\n  } else {\n    purgeFontFamilyFromCache(fontFamily);\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!fontFamily) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(fontFamily, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}