{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.formatNumberWithCommas=exports.formatDate=exports.daysSinceLastActivity=exports.calculateStreaks=exports.calculateSpiritualFitness=exports.calculateSobrietyYears=exports.calculateSobrietyDays=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var calculateSpiritualFitness=exports.calculateSpiritualFitness=function calculateSpiritualFitness(activities){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var now=new Date();var weights={meeting:10,prayer:8,meditation:8,reading:6,callSponsor:5,callSponsee:4,service:9,stepWork:10};var daysToConsider=options.days||30;var totalScore=0;var breakdown={};var eligibleActivities=0;activities.forEach(function(activity){if(!activity.date)return;var activityDate=new Date(activity.date);var daysDiff=Math.floor((now-activityDate)/(1000*60*60*24));if(daysDiff<=daysToConsider&&weights[activity.type]){if(!breakdown[activity.type]){breakdown[activity.type]={count:0,points:0,recentDates:[]};}breakdown[activity.type].count++;breakdown[activity.type].points+=weights[activity.type];breakdown[activity.type].recentDates.push(activity.date);totalScore+=weights[activity.type];eligibleActivities++;}});var finalScore=0;if(eligibleActivities>0){finalScore=Math.min(10,totalScore/(eligibleActivities*4));finalScore=Math.round(finalScore*100)/100;}return{score:finalScore,breakdown:breakdown,eligibleActivities:eligibleActivities,totalPoints:totalScore,daysConsidered:daysToConsider};};var calculateSobrietyDays=exports.calculateSobrietyDays=function calculateSobrietyDays(sobrietyDate){if(!sobrietyDate)return 0;var start=new Date(sobrietyDate);var now=new Date();var diffTime=Math.abs(now-start);var diffDays=Math.floor(diffTime/(1000*60*60*24));return diffDays;};var calculateSobrietyYears=exports.calculateSobrietyYears=function calculateSobrietyYears(sobrietyDate){var decimalPlaces=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;if(!sobrietyDate)return 0;var days=calculateSobrietyDays(sobrietyDate);var years=days/365.25;return Number(years.toFixed(decimalPlaces));};var formatNumberWithCommas=exports.formatNumberWithCommas=function formatNumberWithCommas(number){return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\");};var calculateStreaks=exports.calculateStreaks=function calculateStreaks(activities){var activityMap={};var sortedActivities=(0,_toConsumableArray2.default)(activities).sort(function(a,b){return new Date(b.date)-new Date(a.date);});var streaks={meeting:{current:0,longest:0,lastDate:null},prayer:{current:0,longest:0,lastDate:null},meditation:{current:0,longest:0,lastDate:null},overall:{current:0,longest:0,lastDate:null}};sortedActivities.forEach(function(activity){var date=activity.date.split('T')[0];if(!activityMap[date]){activityMap[date]=new Set();}activityMap[date].add(activity.type);});var dates=Object.keys(activityMap).sort().reverse();var _loop=function _loop(i){var currentDate=new Date(dates[i]);var types=activityMap[dates[i]];if(i>0){var prevDate=new Date(dates[i-1]);var dayDiff=Math.floor((currentDate-prevDate)/(1000*60*60*24));if(dayDiff!==1){Object.keys(streaks).forEach(function(type){streaks[type].current=0;});}}Object.keys(streaks).forEach(function(type){if(type==='overall')return;if(types.has(type)){streaks[type].current++;streaks[type].lastDate=dates[i];if(streaks[type].current>streaks[type].longest){streaks[type].longest=streaks[type].current;}}else{streaks[type].current=0;}});if(types.size>0){streaks.overall.current++;streaks.overall.lastDate=dates[i];if(streaks.overall.current>streaks.overall.longest){streaks.overall.longest=streaks.overall.current;}}else{streaks.overall.current=0;}};for(var i=0;i<dates.length;i++){_loop(i);}return streaks;};var formatDate=exports.formatDate=function formatDate(dateString){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!dateString)return'';var date=new Date(dateString);var format=options.format||'short';var includeTime=options.includeTime||false;var formattedDate;switch(format){case'full':formattedDate=date.toLocaleDateString(undefined,{weekday:'long',year:'numeric',month:'long',day:'numeric'});break;case'medium':formattedDate=date.toLocaleDateString(undefined,{year:'numeric',month:'short',day:'numeric'});break;case'short':default:formattedDate=date.toLocaleDateString();break;}if(includeTime){formattedDate+=' '+date.toLocaleTimeString(undefined,{hour:'2-digit',minute:'2-digit'});}return formattedDate;};var daysSinceLastActivity=exports.daysSinceLastActivity=function daysSinceLastActivity(activities,type){if(!activities||activities.length===0)return-1;var typedActivities=activities.filter(function(a){return a.type===type;});if(typedActivities.length===0)return-1;typedActivities.sort(function(a,b){return new Date(b.date)-new Date(a.date);});var lastActivity=typedActivities[0];var now=new Date();var lastDate=new Date(lastActivity.date);var diffTime=Math.abs(now-lastDate);var diffDays=Math.floor(diffTime/(1000*60*60*24));return diffDays;};","map":{"version":3,"names":["calculateSpiritualFitness","exports","activities","options","arguments","length","undefined","now","Date","weights","meeting","prayer","meditation","reading","callSponsor","callSponsee","service","stepWork","daysToConsider","days","totalScore","breakdown","eligibleActivities","forEach","activity","date","activityDate","daysDiff","Math","floor","type","count","points","recentDates","push","finalScore","min","round","score","totalPoints","daysConsidered","calculateSobrietyDays","sobrietyDate","start","diffTime","abs","diffDays","calculateSobrietyYears","decimalPlaces","years","Number","toFixed","formatNumberWithCommas","number","toString","replace","calculateStreaks","activityMap","sortedActivities","_toConsumableArray2","default","sort","a","b","streaks","current","longest","lastDate","overall","split","Set","add","dates","Object","keys","reverse","_loop","i","currentDate","types","prevDate","dayDiff","has","size","formatDate","dateString","format","includeTime","formattedDate","toLocaleDateString","weekday","year","month","day","toLocaleTimeString","hour","minute","daysSinceLastActivity","typedActivities","filter","lastActivity"],"sources":["/home/runner/workspace/src/utils/calculations.js"],"sourcesContent":["/**\n * Utility functions for calculating spiritual fitness and other recovery metrics\n */\n\n/**\n * Calculate spiritual fitness based on activities\n * @param {Array} activities - Array of activity objects\n * @param {Object} options - Options for calculation\n * @returns {Object} Spiritual fitness score and breakdown\n */\nexport const calculateSpiritualFitness = (activities, options = {}) => {\n  const now = new Date();\n  \n  // Define weights for different activity types\n  const weights = {\n    meeting: 10,   // Attending a meeting\n    prayer: 8,     // Prayer\n    meditation: 8, // Meditation\n    reading: 6,    // Reading AA literature\n    callSponsor: 5, // Calling sponsor\n    callSponsee: 4, // Calling sponsee\n    service: 9,    // Service work\n    stepWork: 10   // Working on steps\n  };\n  \n  // Days to consider for calculation (default: 30 days)\n  const daysToConsider = options.days || 30;\n  \n  // Initialize scores\n  let totalScore = 0;\n  let breakdown = {};\n  let eligibleActivities = 0;\n  \n  // Group activities by type and calculate scores\n  activities.forEach(activity => {\n    // Skip activities without a date\n    if (!activity.date) return;\n    \n    // Only count activities from the specified time period\n    const activityDate = new Date(activity.date);\n    const daysDiff = Math.floor((now - activityDate) / (1000 * 60 * 60 * 24));\n    \n    if (daysDiff <= daysToConsider && weights[activity.type]) {\n      // Initialize type in breakdown if not exists\n      if (!breakdown[activity.type]) {\n        breakdown[activity.type] = {\n          count: 0,\n          points: 0,\n          recentDates: []\n        };\n      }\n      \n      // Update breakdown\n      breakdown[activity.type].count++;\n      breakdown[activity.type].points += weights[activity.type];\n      breakdown[activity.type].recentDates.push(activity.date);\n      \n      // Update total score\n      totalScore += weights[activity.type];\n      eligibleActivities++;\n    }\n  });\n  \n  // Calculate final score (normalized to 10)\n  let finalScore = 0;\n  if (eligibleActivities > 0) {\n    // Base score on total points, but cap at 10 and round to 2 decimal places\n    finalScore = Math.min(10, (totalScore / (eligibleActivities * 4)));\n    finalScore = Math.round(finalScore * 100) / 100;\n  }\n  \n  return {\n    score: finalScore,\n    breakdown,\n    eligibleActivities,\n    totalPoints: totalScore,\n    daysConsidered: daysToConsider\n  };\n};\n\n/**\n * Calculate sobriety days\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @returns {number} Days of sobriety\n */\nexport const calculateSobrietyDays = (sobrietyDate) => {\n  if (!sobrietyDate) return 0;\n  \n  const start = new Date(sobrietyDate);\n  const now = new Date();\n  \n  // Calculate difference in milliseconds\n  const diffTime = Math.abs(now - start);\n  \n  // Convert to days and round down\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays;\n};\n\n/**\n * Calculate sobriety years with optional decimal places\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @param {number} decimalPlaces - Number of decimal places (default 2)\n * @returns {number} Years of sobriety with decimal places\n */\nexport const calculateSobrietyYears = (sobrietyDate, decimalPlaces = 2) => {\n  if (!sobrietyDate) return 0;\n  \n  const days = calculateSobrietyDays(sobrietyDate);\n  const years = days / 365.25;\n  \n  return Number(years.toFixed(decimalPlaces));\n};\n\n/**\n * Format a number with thousands separators\n * @param {number} number - The number to format\n * @returns {string} Formatted number with commas as thousands separators\n */\nexport const formatNumberWithCommas = (number) => {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n/**\n * Calculate recovery streaks\n * @param {Array} activities - Array of activity objects\n * @returns {Object} Streak information for different activity types\n */\nexport const calculateStreaks = (activities) => {\n  // Group activities by date and type\n  const activityMap = {};\n  \n  // Sort activities by date\n  const sortedActivities = [...activities].sort((a, b) => {\n    return new Date(b.date) - new Date(a.date);\n  });\n  \n  // Initialize streaks object\n  const streaks = {\n    meeting: { current: 0, longest: 0, lastDate: null },\n    prayer: { current: 0, longest: 0, lastDate: null },\n    meditation: { current: 0, longest: 0, lastDate: null },\n    overall: { current: 0, longest: 0, lastDate: null }\n  };\n  \n  // Process each activity\n  sortedActivities.forEach(activity => {\n    const date = activity.date.split('T')[0]; // Get YYYY-MM-DD part\n    \n    // Initialize date in map if not exists\n    if (!activityMap[date]) {\n      activityMap[date] = new Set();\n    }\n    \n    // Add activity type to the date\n    activityMap[date].add(activity.type);\n  });\n  \n  // Convert dates to sorted array\n  const dates = Object.keys(activityMap).sort().reverse(); // Oldest to newest\n  \n  // Calculate streaks for each activity type\n  for (let i = 0; i < dates.length; i++) {\n    const currentDate = new Date(dates[i]);\n    const types = activityMap[dates[i]];\n    \n    // Check if previous date exists and is consecutive\n    if (i > 0) {\n      const prevDate = new Date(dates[i-1]);\n      const dayDiff = Math.floor((currentDate - prevDate) / (1000 * 60 * 60 * 24));\n      \n      // If dates are not consecutive, reset current streaks\n      if (dayDiff !== 1) {\n        Object.keys(streaks).forEach(type => {\n          streaks[type].current = 0;\n        });\n      }\n    }\n    \n    // Update streaks for each type\n    Object.keys(streaks).forEach(type => {\n      // Skip 'overall' type, we'll calculate that separately\n      if (type === 'overall') return;\n      \n      if (types.has(type)) {\n        // Increment streak\n        streaks[type].current++;\n        \n        // Update last date\n        streaks[type].lastDate = dates[i];\n        \n        // Update longest streak if needed\n        if (streaks[type].current > streaks[type].longest) {\n          streaks[type].longest = streaks[type].current;\n        }\n      } else {\n        // Reset streak for this type\n        streaks[type].current = 0;\n      }\n    });\n    \n    // Update overall streak (any recovery activity counts)\n    if (types.size > 0) {\n      streaks.overall.current++;\n      \n      // Update last date\n      streaks.overall.lastDate = dates[i];\n      \n      // Update longest streak if needed\n      if (streaks.overall.current > streaks.overall.longest) {\n        streaks.overall.longest = streaks.overall.current;\n      }\n    } else {\n      // Reset overall streak\n      streaks.overall.current = 0;\n    }\n  }\n  \n  return streaks;\n};\n\n/**\n * Format a date in a user-friendly format\n * @param {string} dateString - Date string\n * @param {Object} options - Formatting options\n * @returns {string} Formatted date\n */\nexport const formatDate = (dateString, options = {}) => {\n  if (!dateString) return '';\n  \n  const date = new Date(dateString);\n  \n  const format = options.format || 'short';\n  const includeTime = options.includeTime || false;\n  \n  let formattedDate;\n  \n  switch (format) {\n    case 'full':\n      formattedDate = date.toLocaleDateString(undefined, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      break;\n    case 'medium':\n      formattedDate = date.toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n      break;\n    case 'short':\n    default:\n      formattedDate = date.toLocaleDateString();\n      break;\n  }\n  \n  if (includeTime) {\n    formattedDate += ' ' + date.toLocaleTimeString(undefined, {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n  \n  return formattedDate;\n};\n\n/**\n * Calculate days since last activity of a specific type\n * @param {Array} activities - Array of activity objects\n * @param {string} type - Activity type\n * @returns {number} Days since last activity (-1 if no activity found)\n */\nexport const daysSinceLastActivity = (activities, type) => {\n  if (!activities || activities.length === 0) return -1;\n  \n  // Filter activities by type\n  const typedActivities = activities.filter(a => a.type === type);\n  \n  if (typedActivities.length === 0) return -1;\n  \n  // Sort by date (newest first)\n  typedActivities.sort((a, b) => new Date(b.date) - new Date(a.date));\n  \n  // Get most recent activity\n  const lastActivity = typedActivities[0];\n  \n  // Calculate days difference\n  const now = new Date();\n  const lastDate = new Date(lastActivity.date);\n  const diffTime = Math.abs(now - lastDate);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}