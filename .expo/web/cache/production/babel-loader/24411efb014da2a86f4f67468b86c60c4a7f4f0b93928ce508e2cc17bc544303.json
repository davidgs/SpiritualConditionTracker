{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.useFonts=void 0;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=require(\"react\");var _Font=require(\"./Font\");function isMapLoaded(map){if(typeof map==='string'){return(0,_Font.isLoaded)(map);}else{return Object.keys(map).every(function(fontFamily){return(0,_Font.isLoaded)(fontFamily);});}}function useRuntimeFonts(map){var _useState=(0,_react.useState)(isMapLoaded(map)),_useState2=(0,_slicedToArray2.default)(_useState,2),loaded=_useState2[0],setLoaded=_useState2[1];var _useState3=(0,_react.useState)(null),_useState4=(0,_slicedToArray2.default)(_useState3,2),error=_useState4[0],setError=_useState4[1];(0,_react.useEffect)(function(){var isMounted=true;(0,_Font.loadAsync)(map).then(function(){if(isMounted){setLoaded(true);}}).catch(function(error){if(isMounted){setError(error);}});return function(){isMounted=false;};},[]);return[loaded,error];}function useStaticFonts(map){(0,_Font.loadAsync)(map);return[true,null];}var useFonts=exports.useFonts=typeof window==='undefined'?useStaticFonts:useRuntimeFonts;","map":{"version":3,"names":["_react","require","_Font","isMapLoaded","map","isLoaded","Object","keys","every","fontFamily","useRuntimeFonts","_useState","useState","_useState2","_slicedToArray2","default","loaded","setLoaded","_useState3","_useState4","error","setError","useEffect","isMounted","loadAsync","then","catch","useStaticFonts","useFonts","exports","window"],"sources":["/home/runner/workspace/node_modules/expo-font/src/FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    loadAsync(map)\n      .then(() => {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      })\n      .catch((error) => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n *\n * @example\n * ```tsx\n * const [loaded, error] = useFonts({ ... });\n * ```\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":"gQAAA,IAAAA,MAAA,CAAAC,OAAA,UAEA,IAAAC,KAAA,CAAAD,OAAA,WAGA,QAAS,CAAAE,WAAWA,CAACC,GAAwC,EAC3D,GAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CAC3B,MAAO,GAAAC,cAAQ,EAACD,GAAG,CAAC,CACtB,CAAC,IAAM,CACL,MAAO,CAAAE,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACI,KAAK,CAAC,SAACC,UAAU,QAAK,GAAAJ,cAAQ,EAACI,UAAU,CAAC,GAAC,CACrE,CACF,CAEA,QAAS,CAAAC,eAAeA,CAACN,GAAwC,EAC/D,IAAAO,SAAA,CAA4B,GAAAC,eAAQ,EAGlCT,WAAW,CAACC,GAAG,CAAC,CACjB,CAAAS,UAAA,IAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA,IAJMK,MAAM,CAAAH,UAAA,IAAEI,SAAS,CAAAJ,UAAA,IAKxB,IAAAK,UAAA,CAA0B,GAAAN,eAAQ,EAAe,IAAI,CAAC,CAAAO,UAAA,IAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA,IAA/CE,KAAK,CAAAD,UAAA,IAAEE,QAAQ,CAAAF,UAAA,IAEtB,GAAAG,gBAAS,EAAC,UAAK,CACb,GAAI,CAAAC,SAAS,CAAG,IAAI,CAEpB,GAAAC,eAAS,EAACpB,GAAG,CAAC,CACXqB,IAAI,CAAC,UAAK,CACT,GAAIF,SAAS,CAAE,CACbN,SAAS,CAAC,IAAI,CAAC,CACjB,CACF,CAAC,CAAC,CACDS,KAAK,CAAC,SAACN,KAAK,CAAI,CACf,GAAIG,SAAS,CAAE,CACbF,QAAQ,CAACD,KAAK,CAAC,CACjB,CACF,CAAC,CAAC,CAEJ,MAAO,WAAK,CACVG,SAAS,CAAG,KAAK,CACnB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACP,MAAM,CAAEI,KAAK,CAAC,CACxB,CAEA,QAAS,CAAAO,cAAcA,CAACvB,GAAwC,EAC9D,GAAAoB,eAAS,EAACpB,GAAG,CAAC,CACd,MAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACrB,CAsBO,GAAM,CAAAwB,QAAQ,CAAAC,OAAA,CAAAD,QAAA,CACnB,MAAO,CAAAE,MAAM,GAAK,WAAW,CAAGH,cAAc,CAAGjB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}