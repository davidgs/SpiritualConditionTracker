{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getAssetForSource=getAssetForSource;exports.loadSingleFontAsync=loadSingleFontAsync;var _expoAsset=require(\"expo-asset\");var _expoModulesCore=require(\"expo-modules-core\");var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var _Font=require(\"./Font.types\");function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='number'){return uriFromFontSource(_expoAsset.Asset.fromModule(asset));}else if(typeof asset==='object'&&typeof asset.uri==='number'){return uriFromFontSource(asset.uri);}else if(typeof asset==='object'){return asset.uri||asset.localUri||asset.default||null;}return null;}function displayFromFontSource(asset){if(typeof asset==='object'&&'display'in asset){return asset.display||_Font.FontDisplay.AUTO;}return _Font.FontDisplay.AUTO;}function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`,`Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`);}function loadSingleFontAsync(name,input){if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}try{return _ExpoFontLoader.default.loadAsync(name,input);}catch(_unused){}return Promise.resolve();}","map":{"version":3,"names":["_expoAsset","require","_expoModulesCore","_ExpoFontLoader","_interopRequireDefault","_Font","uriFromFontSource","asset","Asset","fromModule","uri","localUri","default","displayFromFontSource","display","FontDisplay","AUTO","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","CodedError","loadSingleFontAsync","name","input","downloadAsync","ExpoFontLoader","loadAsync","_unused","Promise","resolve"],"sources":["/home/runner/workspace/node_modules/expo-font/src/FontLoader.web.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource, FontDisplay } from './Font.types';\n\nfunction uriFromFontSource(asset: FontSource): string | number | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  } else if (typeof asset === 'object' && typeof asset.uri === 'number') {\n    return uriFromFontSource(asset.uri);\n  } else if (typeof asset === 'object') {\n    return asset.uri || (asset as Asset).localUri || (asset as FontResource).default || null;\n  }\n\n  return null;\n}\n\nfunction displayFromFontSource(asset: FontSource): FontDisplay {\n  if (typeof asset === 'object' && 'display' in asset) {\n    return asset.display || FontDisplay.AUTO;\n  }\n\n  return FontDisplay.AUTO;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`\n  );\n}\n\n// NOTE(EvanBacon): No async keyword!\nexport function loadSingleFontAsync(name: string, input: Asset | FontResource): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  try {\n    return ExpoFontLoader.loadAsync(name, input);\n  } catch {\n    // No-op.\n  }\n\n  return Promise.resolve();\n}\n"],"mappings":"wOAAA,IAAAA,UAAA,CAAAC,OAAA,eACA,IAAAC,gBAAA,CAAAD,OAAA,sBAEA,IAAAE,eAAA,CAAAC,sBAAA,CAAAH,OAAA,sBACA,IAAAI,KAAA,CAAAJ,OAAA,iBAEA,QAAS,CAAAK,iBAAiBA,CAACC,KAAiB,EAC1C,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAA,KAAK,EAAI,IAAI,CACtB,CAAC,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,CAAAD,iBAAiB,CAACE,gBAAK,CAACC,UAAU,CAACF,KAAK,CAAC,CAAC,CACnD,CAAC,IAAM,IAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAA,KAAK,CAACG,GAAG,GAAK,QAAQ,CAAE,CACrE,MAAO,CAAAJ,iBAAiB,CAACC,KAAK,CAACG,GAAG,CAAC,CACrC,CAAC,IAAM,IAAI,MAAO,CAAAH,KAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,CAAAA,KAAK,CAACG,GAAG,EAAKH,KAAe,CAACI,QAAQ,EAAKJ,KAAsB,CAACK,OAAO,EAAI,IAAI,CAC1F,CAEA,MAAO,KAAI,CACb,CAEA,QAAS,CAAAC,qBAAqBA,CAACN,KAAiB,EAC9C,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,SAAS,EAAI,CAAAA,KAAK,CAAE,CACnD,MAAO,CAAAA,KAAK,CAACO,OAAO,EAAIC,iBAAW,CAACC,IAAI,CAC1C,CAEA,MAAO,CAAAD,iBAAW,CAACC,IAAI,CACzB,CAEM,QAAU,CAAAC,iBAAiBA,CAACC,MAAkB,EAClD,GAAM,CAAAR,GAAG,CAAGJ,iBAAiB,CAACY,MAAM,CAAC,CACrC,GAAM,CAAAJ,OAAO,CAAGD,qBAAqB,CAACK,MAAM,CAAC,CAE7C,GAAI,CAACR,GAAG,EAAI,MAAO,CAAAA,GAAG,GAAK,QAAQ,CAAE,CACnCS,uBAAuB,CAACT,GAAG,CAAC,CAC9B,CAEA,MAAO,CACLA,GAAG,CAAHA,GAAG,CACHI,OAAO,CAAPA,O,CACD,CACH,CAEA,QAAS,CAAAK,uBAAuBA,CAACD,MAAW,EAC1C,GAAI,CAAAE,IAAI,CAAW,MAAO,CAAAF,MAAM,CAChC,GAAIE,IAAI,GAAK,QAAQ,CAAEA,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7D,KAAM,IAAI,CAAAK,2BAAU,CAClB,iBAAiB,CACjB,8EAA8EH,IAAI,EAAE,CACrF,CACH,CAGM,QAAU,CAAAI,mBAAmBA,CAACC,IAAY,CAAEC,KAA2B,EAC3E,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,EAAI,MAAO,CAAAA,KAAK,CAAChB,GAAG,GAAK,QAAQ,EAAKgB,KAAa,CAACC,aAAa,CAAE,CAC9FR,uBAAuB,CAACO,KAAK,CAAC,CAChC,CAEA,GAAI,CACF,MAAO,CAAAE,uBAAc,CAACC,SAAS,CAACJ,IAAI,CAAEC,KAAK,CAAC,CAC9C,CAAE,MAAAI,OAAA,CAAM,CAER,CAEA,MAAO,CAAAC,OAAO,CAACC,OAAO,EAAE,CAC1B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}