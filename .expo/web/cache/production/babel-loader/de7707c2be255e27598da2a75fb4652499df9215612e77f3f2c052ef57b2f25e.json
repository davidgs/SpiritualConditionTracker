{"ast":null,"code":"\"use strict\";var _asyncToGenerator=require(\"@babel/runtime/helpers/asyncToGenerator\");var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _objectWithoutProperties=require(\"@babel/runtime/helpers/objectWithoutProperties\");var _excluded=[\"name\",\"size\",\"color\",\"style\",\"children\",\"allowFontScaling\",\"innerRef\"];Object.defineProperty(exports,\"__esModule\",{value:true});exports.DEFAULT_ICON_SIZE=exports.DEFAULT_ICON_COLOR=void 0;exports.createIconSet=createIconSet;var _react=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _createIconSourceCache=_interopRequireDefault(require(\"./create-icon-source-cache.js\"));var _dynamicFontLoading=require(\"./dynamicLoading/dynamic-font-loading\");var _dynamicLoadingSetting=require(\"./dynamicLoading/dynamic-loading-setting.js\");var _getImageLibrary=require(\"./get-image-library.js\");var _jsxRuntime=require(\"react/jsx-runtime\");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e};}function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var DEFAULT_ICON_SIZE=exports.DEFAULT_ICON_SIZE=12;var DEFAULT_ICON_COLOR=exports.DEFAULT_ICON_COLOR='black';function createIconSet(glyphMap,postScriptNameOrOptions,fontFileNameParam,fontStyleParam){var _ref=typeof postScriptNameOrOptions==='string'?{postScriptName:postScriptNameOrOptions,fontFileName:fontFileNameParam,fontStyle:fontStyleParam}:postScriptNameOrOptions,postScriptName=_ref.postScriptName,fontFileName=_ref.fontFileName,fontStyle=_ref.fontStyle;var fontBasename=fontFileName?fontFileName.replace(/\\.(otf|ttf)$/,''):postScriptName;var fontReference=_reactNative.Platform.select({windows:`/Assets/${fontFileName}#${postScriptName}`,android:fontBasename,web:fontBasename,default:postScriptName});var resolveGlyph=function resolveGlyph(name){var glyph=glyphMap[name]||'?';if(typeof glyph==='number'){return String.fromCodePoint(glyph);}return glyph;};var Icon=function Icon(_ref2){var name=_ref2.name,_ref2$size=_ref2.size,size=_ref2$size===void 0?DEFAULT_ICON_SIZE:_ref2$size,_ref2$color=_ref2.color,color=_ref2$color===void 0?DEFAULT_ICON_COLOR:_ref2$color,style=_ref2.style,children=_ref2.children,_ref2$allowFontScalin=_ref2.allowFontScaling,allowFontScaling=_ref2$allowFontScalin===void 0?false:_ref2$allowFontScalin,innerRef=_ref2.innerRef,props=_objectWithoutProperties(_ref2,_excluded);var _react$default$useSta=_react.default.useState((0,_dynamicLoadingSetting.isDynamicLoadingEnabled)()?_dynamicFontLoading.dynamicLoader.isLoaded(fontReference):true),_react$default$useSta2=_slicedToArray(_react$default$useSta,2),isFontLoaded=_react$default$useSta2[0],setIsFontLoaded=_react$default$useSta2[1];var glyph=isFontLoaded&&name?resolveGlyph(name):'';(0,_react.useEffect)(function(){var isMounted=true;if(!isFontLoaded&&typeof postScriptNameOrOptions==='object'&&typeof postScriptNameOrOptions.fontSource!=='undefined'){_dynamicFontLoading.dynamicLoader.loadFontAsync(fontReference,postScriptNameOrOptions.fontSource).finally(function(){if(isMounted){setIsFontLoaded(true);}});}return function(){isMounted=false;};},[]);var styleDefaults={fontSize:size,color:color};var styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};var newProps=Object.assign({},props,{style:[styleDefaults,style,styleOverrides,fontStyle||{}],allowFontScaling:allowFontScaling});return(0,_jsxRuntime.jsxs)(_reactNative.Text,Object.assign({ref:innerRef,selectable:false},newProps,{children:[glyph,children]}));};var WrappedIcon=(0,_react.forwardRef)(function(props,ref){return(0,_jsxRuntime.jsx)(Icon,Object.assign({innerRef:ref},props));});WrappedIcon.displayName='Icon';var imageSourceCache=(0,_createIconSourceCache.default)();var getImageSourceSync=function getImageSourceSync(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;var NativeIconAPI=(0,_getImageLibrary.ensureGetImageAvailable)();var glyph=resolveGlyph(name);var processedColor=(0,_reactNative.processColor)(color);var cacheKey=`${glyph}:${size}:${String(processedColor)}`;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{var imagePath=NativeIconAPI.getImageForFontSync(fontReference,glyph,size,processedColor);var value={uri:imagePath,scale:_reactNative.PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}};var getImageSource=function(){var _ref3=_asyncToGenerator(function*(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;var NativeIconAPI=(0,_getImageLibrary.ensureGetImageAvailable)();var glyph=resolveGlyph(name);var processedColor=(0,_reactNative.processColor)(color);var cacheKey=`${glyph}:${size}:${String(processedColor)}`;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{var imagePath=yield NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor);var value={uri:imagePath,scale:_reactNative.PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}});return function getImageSource(_x){return _ref3.apply(this,arguments);};}();var IconNamespace=Object.assign(WrappedIcon,{getImageSource:getImageSource,getImageSourceSync:getImageSourceSync});return IconNamespace;}","map":{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_createIconSourceCache","_interopRequireDefault","_dynamicFontLoading","_dynamicLoadingSetting","_getImageLibrary","_jsxRuntime","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","DEFAULT_ICON_SIZE","exports","DEFAULT_ICON_COLOR","createIconSet","glyphMap","postScriptNameOrOptions","fontFileNameParam","fontStyleParam","_ref","postScriptName","fontFileName","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","resolveGlyph","name","glyph","String","fromCodePoint","Icon","_ref2","_ref2$size","size","_ref2$color","color","style","children","_ref2$allowFontScalin","allowFontScaling","innerRef","props","_objectWithoutProperties","_excluded","_react$default$useSta","useState","isDynamicLoadingEnabled","dynamicLoader","isLoaded","_react$default$useSta2","_slicedToArray","isFontLoaded","setIsFontLoaded","useEffect","isMounted","fontSource","loadFontAsync","finally","styleDefaults","fontSize","styleOverrides","fontFamily","fontWeight","newProps","assign","jsxs","Text","ref","selectable","WrappedIcon","forwardRef","jsx","displayName","imageSourceCache","getImageSourceSync","arguments","length","undefined","NativeIconAPI","ensureGetImageAvailable","processedColor","processColor","cacheKey","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","_ref3","_asyncToGenerator","getImageForFont","_x","apply","IconNamespace"],"sources":["/home/runner/workspace/node_modules/@react-native-vector-icons/common/src/create-icon-set.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport React, { forwardRef, type Ref, useEffect } from 'react';\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { PixelRatio, Platform, Text, type TextProps, type TextStyle, processColor } from 'react-native';\n\nimport createIconSourceCache from './create-icon-source-cache';\nimport { dynamicLoader } from './dynamicLoading/dynamic-font-loading';\nimport { isDynamicLoadingEnabled } from './dynamicLoading/dynamic-loading-setting';\nimport type { FontSource } from './dynamicLoading/types';\nimport { ensureGetImageAvailable } from './get-image-library';\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\ntype ValueData = { uri: string; scale: number };\ntype GetImageSourceSyncIconFunc<GM> = (name: GM, size?: number, color?: TextStyle['color']) => ValueData | undefined;\ntype GetImageSourceIconFunc<GM> = (\n  name: GM,\n  size?: number,\n  color?: TextStyle['color'],\n) => Promise<ValueData | undefined>;\n\nexport type IconProps<T> = TextProps & {\n  name: T;\n  size?: number;\n  color?: TextStyle['color'];\n  innerRef?: Ref<Text>;\n};\n\ntype IconComponent<GM extends Record<string, number>> = React.FC<\n  TextProps & {\n    name: keyof GM;\n    size?: number;\n    color?: TextStyle['color'];\n    innerRef?: Ref<Text>;\n  } & React.RefAttributes<Text>\n> & {\n  getImageSource: GetImageSourceIconFunc<keyof GM>;\n  getImageSourceSync: GetImageSourceSyncIconFunc<keyof GM>;\n};\n\nexport type CreateIconSetOptions = {\n  postScriptName: string;\n  fontFileName: string;\n  fontSource?: FontSource;\n  fontStyle?: TextProps['style'];\n};\n\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptName: string,\n  fontFileName: string,\n  fontStyle?: TextProps['style'],\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  options: CreateIconSetOptions,\n): IconComponent<GM>;\nexport function createIconSet<GM extends Record<string, number>>(\n  glyphMap: GM,\n  postScriptNameOrOptions: string | CreateIconSetOptions,\n  fontFileNameParam?: string,\n  fontStyleParam?: TextProps['style'],\n): IconComponent<GM> {\n  const { postScriptName, fontFileName, fontStyle } =\n    typeof postScriptNameOrOptions === 'string'\n      ? { postScriptName: postScriptNameOrOptions, fontFileName: fontFileNameParam, fontStyle: fontStyleParam }\n      : postScriptNameOrOptions;\n\n  const fontBasename = fontFileName ? fontFileName.replace(/\\.(otf|ttf)$/, '') : postScriptName;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFileName}#${postScriptName}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: postScriptName,\n  });\n\n  const resolveGlyph = (name: keyof GM) => {\n    const glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n\n    return glyph;\n  };\n\n  const Icon = ({\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style,\n    children,\n    allowFontScaling = false,\n    innerRef,\n    ...props\n  }: IconProps<keyof GM>) => {\n    const [isFontLoaded, setIsFontLoaded] = React.useState(\n      isDynamicLoadingEnabled() ? dynamicLoader.isLoaded(fontReference) : true,\n    );\n    const glyph = isFontLoaded && name ? resolveGlyph(name) : '';\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: the dependencies never change\n    useEffect(() => {\n      let isMounted = true;\n\n      if (\n        !isFontLoaded &&\n        typeof postScriptNameOrOptions === 'object' &&\n        typeof postScriptNameOrOptions.fontSource !== 'undefined'\n      ) {\n        dynamicLoader.loadFontAsync(fontReference, postScriptNameOrOptions.fontSource).finally(() => {\n          if (isMounted) {\n            setIsFontLoaded(true);\n          }\n        });\n      }\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n\n    const styleDefaults = {\n      fontSize: size,\n      color,\n    };\n\n    const styleOverrides: TextProps['style'] = {\n      fontFamily: fontReference,\n      fontWeight: 'normal',\n      fontStyle: 'normal',\n    };\n\n    const newProps: TextProps = {\n      ...props,\n      style: [styleDefaults, style, styleOverrides, fontStyle || {}],\n      allowFontScaling,\n    };\n\n    return (\n      <Text ref={innerRef} selectable={false} {...newProps}>\n        {glyph}\n        {children}\n      </Text>\n    );\n  };\n\n  const WrappedIcon = forwardRef<Text, IconProps<keyof typeof glyphMap>>((props, ref) => (\n    <Icon innerRef={ref} {...props} />\n  ));\n  WrappedIcon.displayName = 'Icon';\n\n  const imageSourceCache = createIconSourceCache();\n\n  const getImageSourceSync = (\n    name: keyof GM,\n    size = DEFAULT_ICON_SIZE,\n    color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n  ) => {\n    const NativeIconAPI = ensureGetImageAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      // FIXME: Should this check if it's an error and throw it again?\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor as number, // FIXME what if a non existant colour was passed in?\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error as Error);\n      throw error;\n    }\n  };\n\n  const getImageSource = async (\n    name: keyof GM,\n    size = DEFAULT_ICON_SIZE,\n    color: TextStyle['color'] = DEFAULT_ICON_COLOR,\n  ) => {\n    const NativeIconAPI = ensureGetImageAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${String(processedColor)}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      // FIXME: Should this check if it's an error and throw it again?\n      return imageSourceCache.get(cacheKey);\n    }\n\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor as number, // FIXME what if a non existant colour was passed in?\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error as Error);\n      throw error;\n    }\n  };\n\n  const IconNamespace = Object.assign(WrappedIcon, {\n    getImageSource,\n    getImageSourceSync,\n  });\n\n  return IconNamespace;\n}\n"],"mappings":"geACA,IAAAA,MAAA,CAAAC,uBAAA,CAAAC,OAAA,WAGA,IAAAC,YAAA,CAAAD,OAAA,iBAEA,IAAAE,sBAAA,CAAAC,sBAAA,CAAAH,OAAA,mCACA,IAAAI,mBAAA,CAAAJ,OAAA,0CACA,IAAAK,sBAAA,CAAAL,OAAA,gDAEA,IAAAM,gBAAA,CAAAN,OAAA,2BAA8D,IAAAO,WAAA,CAAAP,OAAA,+BAAAG,uBAAAK,CAAA,SAAAA,CAAA,EAAAA,CAAA,CAAAC,UAAA,CAAAD,CAAA,EAAAE,OAAA,CAAAF,CAAA,YAAAG,yBAAAH,CAAA,wBAAAI,OAAA,iBAAAC,CAAA,KAAAD,OAAA,GAAAE,CAAA,KAAAF,OAAA,UAAAD,wBAAA,UAAAA,yBAAAH,CAAA,SAAAA,CAAA,CAAAM,CAAA,CAAAD,CAAA,IAAAL,CAAA,YAAAT,wBAAAS,CAAA,CAAAK,CAAA,MAAAA,CAAA,EAAAL,CAAA,EAAAA,CAAA,CAAAC,UAAA,QAAAD,CAAA,WAAAA,CAAA,mBAAAA,CAAA,qBAAAA,CAAA,QAAAE,OAAA,CAAAF,CAAA,MAAAM,CAAA,CAAAH,wBAAA,CAAAE,CAAA,KAAAC,CAAA,EAAAA,CAAA,CAAAC,GAAA,CAAAP,CAAA,SAAAM,CAAA,CAAAE,GAAA,CAAAR,CAAA,MAAAS,CAAA,EAAAC,SAAA,OAAAC,CAAA,CAAAC,MAAA,CAAAC,cAAA,EAAAD,MAAA,CAAAE,wBAAA,SAAAC,CAAA,IAAAf,CAAA,gBAAAe,CAAA,KAAAC,cAAA,CAAAC,IAAA,CAAAjB,CAAA,CAAAe,CAAA,OAAAG,CAAA,CAAAP,CAAA,CAAAC,MAAA,CAAAE,wBAAA,CAAAd,CAAA,CAAAe,CAAA,OAAAG,CAAA,GAAAA,CAAA,CAAAV,GAAA,EAAAU,CAAA,CAAAC,GAAA,EAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,CAAAM,CAAA,CAAAG,CAAA,EAAAT,CAAA,CAAAM,CAAA,EAAAf,CAAA,CAAAe,CAAA,UAAAN,CAAA,CAAAP,OAAA,CAAAF,CAAA,CAAAM,CAAA,EAAAA,CAAA,CAAAa,GAAA,CAAAnB,CAAA,CAAAS,CAAA,EAAAA,CAAA,EAEvD,GAAM,CAAAW,iBAAiB,CAAAC,OAAA,CAAAD,iBAAA,CAAG,EAAE,CAC5B,GAAM,CAAAE,kBAAkB,CAAAD,OAAA,CAAAC,kBAAA,CAAG,OAAO,CA8ClC,QAAS,CAAAC,aAAaA,CAC3BC,QAAY,CACZC,uBAAsD,CACtDC,iBAA0B,CAC1BC,cAAmC,CAChB,CACnB,IAAAC,IAAA,CACE,MAAO,CAAAH,uBAAuB,GAAK,QAAQ,CACvC,CAAEI,cAAc,CAAEJ,uBAAuB,CAAEK,YAAY,CAAEJ,iBAAiB,CAAEK,SAAS,CAAEJ,cAAe,CAAC,CACvGF,uBAAuB,CAHrBI,cAAc,CAAAD,IAAA,CAAdC,cAAc,CAAEC,YAAY,CAAAF,IAAA,CAAZE,YAAY,CAAEC,SAAA,CAAAH,IAAA,CAAAG,SAAA,CAKtC,GAAM,CAAAC,YAAY,CAAGF,YAAY,CAAGA,YAAY,CAACG,OAAO,CAAC,cAAc,CAAE,EAAE,CAAC,CAAGJ,cAAc,CAE7F,GAAM,CAAAK,aAAa,CAAGzC,YAAA,CAAA0C,QAAQ,CAACC,MAAM,CAAC,CACpCC,OAAO,CAAE,WAAWP,YAAY,IAAID,cAAc,EAAE,CACpDS,OAAO,CAAEN,YAAY,CACrBO,GAAG,CAAEP,YAAY,CACjB9B,OAAO,CAAE2B,cACX,CAAC,CAAC,CAEF,GAAM,CAAAW,YAAY,CAAI,QAAhB,CAAAA,YAAYA,CAAIC,IAAc,CAAK,CACvC,GAAM,CAAAC,KAAK,CAAGlB,QAAQ,CAACiB,IAAI,CAAC,EAAI,GAAG,CAEnC,GAAI,MAAO,CAAAC,KAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,CAAAC,MAAM,CAACC,aAAa,CAACF,KAAK,CAAC,CACpC,CAEA,MAAO,CAAAA,KAAK,CACd,CAAC,CAED,GAAM,CAAAG,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAAC,KAAA,CASiB,IARzB,CAAAL,IAAI,CAAAK,KAAA,CAAJL,IAAI,CAAAM,UAAA,CAAAD,KAAA,CACJE,IAAI,CAAJA,IAAI,CAAAD,UAAA,UAAG3B,iBAAiB,CAAA2B,UAAA,CAAAE,WAAA,CAAAH,KAAA,CACxBI,KAAK,CAALA,KAAK,CAAAD,WAAA,UAAG3B,kBAAkB,CAAA2B,WAAA,CAC1BE,KAAK,CAAAL,KAAA,CAALK,KAAK,CACLC,QAAQ,CAAAN,KAAA,CAARM,QAAQ,CAAAC,qBAAA,CAAAP,KAAA,CACRQ,gBAAgB,CAAhBA,gBAAgB,CAAAD,qBAAA,UAAG,KAAK,CAAAA,qBAAA,CACxBE,QAAQ,CAAAT,KAAA,CAARS,QAAQ,CACLC,KAAA,CAAAC,wBAAA,CAAAX,KAAA,CAAAY,SAAA,EAEH,IAAAC,qBAAA,CAAwCrE,MAAA,CAAAY,OAAK,CAAC0D,QAAQ,CACpD,GAAA/D,sBAAA,CAAAgE,uBAAuB,EAAC,CAAC,CAAGjE,mBAAA,CAAAkE,aAAa,CAACC,QAAQ,CAAC7B,aAAa,CAAC,CAAG,IACtE,CAAC,CAAA8B,sBAAA,CAAAC,cAAA,CAAAN,qBAAA,IAFMO,YAAY,CAAAF,sBAAA,IAAEG,eAAe,CAAAH,sBAAA,IAGpC,GAAM,CAAAtB,KAAK,CAAGwB,YAAY,EAAIzB,IAAI,CAAGD,YAAY,CAACC,IAAI,CAAC,CAAG,EAAE,CAG5D,GAAAnD,MAAA,CAAA8E,SAAS,EAAC,UAAM,CACd,GAAI,CAAAC,SAAS,CAAG,IAAI,CAEpB,GACE,CAACH,YAAY,EACb,MAAO,CAAAzC,uBAAuB,GAAK,QAAQ,EAC3C,MAAO,CAAAA,uBAAuB,CAAC6C,UAAU,GAAK,WAAW,CACzD,CACA1E,mBAAA,CAAAkE,aAAa,CAACS,aAAa,CAACrC,aAAa,CAAET,uBAAuB,CAAC6C,UAAU,CAAC,CAACE,OAAO,CAAC,UAAM,CAC3F,GAAIH,SAAS,CAAE,CACbF,eAAe,CAAC,IAAI,CAAC,CACvB,CACF,CAAC,CAAC,CACJ,CACA,MAAO,WAAM,CACXE,SAAS,CAAG,KAAK,CACnB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,GAAM,CAAAI,aAAa,CAAG,CACpBC,QAAQ,CAAE1B,IAAI,CACdE,KAAA,CAAAA,KACF,CAAC,CAED,GAAM,CAAAyB,cAAkC,CAAG,CACzCC,UAAU,CAAE1C,aAAa,CACzB2C,UAAU,CAAE,QAAQ,CACpB9C,SAAS,CAAE,QACb,CAAC,CAED,GAAM,CAAA+C,QAAmB,CAAAlE,MAAA,CAAAmE,MAAA,IACpBvB,KAAK,EACRL,KAAK,CAAE,CAACsB,aAAa,CAAEtB,KAAK,CAAEwB,cAAc,CAAE5C,SAAS,EAAI,CAAC,CAAC,CAAC,CAC9DuB,gBAAA,CAAAA,gBAAA,EACD,CAED,MACE,GAAAvD,WAAA,CAAAiF,IAAA,EAACvF,YAAA,CAAAwF,IAAI,CAAArE,MAAA,CAAAmE,MAAA,EAACG,GAAG,CAAE3B,QAAS,CAAC4B,UAAU,CAAE,KAAM,EAAKL,QAAQ,EAAA1B,QAAA,EACjDV,KAAK,CACLU,QAAQ,GACL,CAAC,CAEX,CAAC,CAED,GAAM,CAAAgC,WAAW,CAAG,GAAA9F,MAAA,CAAA+F,UAAU,EAAyC,SAAC7B,KAAK,CAAE0B,GAAG,QAChF,GAAAnF,WAAA,CAAAuF,GAAA,EAACzC,IAAI,CAAAjC,MAAA,CAAAmE,MAAA,EAACxB,QAAQ,CAAE2B,GAAI,EAAK1B,KAAA,CAAQ,CAClC,GAAC,CACF4B,WAAW,CAACG,WAAW,CAAG,MAAM,CAEhC,GAAM,CAAAC,gBAAgB,CAAG,GAAA9F,sBAAA,CAAAQ,OAAqB,EAAC,CAAC,CAEhD,GAAM,CAAAuF,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CACtBhD,IAAc,CAGX,IAFH,CAAAO,IAAI,CAAA0C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGtE,iBAAiB,IACxB,CAAA8B,KAAyB,CAAAwC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGpE,kBAAkB,CAE9C,GAAM,CAAAuE,aAAa,CAAG,GAAA/F,gBAAA,CAAAgG,uBAAuB,EAAC,CAAC,CAE/C,GAAM,CAAApD,KAAK,CAAGF,YAAY,CAACC,IAAI,CAAC,CAChC,GAAM,CAAAsD,cAAc,CAAG,GAAAtG,YAAA,CAAAuG,YAAY,EAAC9C,KAAK,CAAC,CAC1C,GAAM,CAAA+C,QAAQ,CAAG,GAAGvD,KAAK,IAAIM,IAAI,IAAIL,MAAM,CAACoD,cAAc,CAAC,EAAE,CAE7D,GAAIP,gBAAgB,CAACjF,GAAG,CAAC0F,QAAQ,CAAC,CAAE,CAElC,MAAO,CAAAT,gBAAgB,CAAChF,GAAG,CAACyF,QAAQ,CAAC,CACvC,CAEA,GAAI,CACF,GAAM,CAAAC,SAAS,CAAGL,aAAa,CAACM,mBAAmB,CACjDjE,aAAa,CACbQ,KAAK,CACLM,IAAI,CACJ+C,cACF,CAAC,CACD,GAAM,CAAAK,KAAK,CAAG,CAAEC,GAAG,CAAEH,SAAS,CAAEI,KAAK,CAAE7G,YAAA,CAAA8G,UAAU,CAAC/F,GAAG,CAAC,CAAE,CAAC,CACzDgF,gBAAgB,CAACgB,QAAQ,CAACP,QAAQ,CAAEG,KAAK,CAAC,CAC1C,MAAO,CAAAA,KAAK,CACd,CAAE,MAAOK,KAAK,CAAE,CACdjB,gBAAgB,CAACkB,QAAQ,CAACT,QAAQ,CAAEQ,KAAc,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,GAAM,CAAAE,cAAc,gBAAAC,KAAA,CAAAC,iBAAA,CAAG,UACrBpE,IAAc,CAGX,IAFH,CAAAO,IAAI,CAAA0C,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGtE,iBAAiB,IACxB,CAAA8B,KAAyB,CAAAwC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGpE,kBAAkB,CAE9C,GAAM,CAAAuE,aAAa,CAAG,GAAA/F,gBAAA,CAAAgG,uBAAuB,EAAC,CAAC,CAE/C,GAAM,CAAApD,KAAK,CAAGF,YAAY,CAACC,IAAI,CAAC,CAChC,GAAM,CAAAsD,cAAc,CAAG,GAAAtG,YAAA,CAAAuG,YAAY,EAAC9C,KAAK,CAAC,CAC1C,GAAM,CAAA+C,QAAQ,CAAG,GAAGvD,KAAK,IAAIM,IAAI,IAAIL,MAAM,CAACoD,cAAc,CAAC,EAAE,CAE7D,GAAIP,gBAAgB,CAACjF,GAAG,CAAC0F,QAAQ,CAAC,CAAE,CAElC,MAAO,CAAAT,gBAAgB,CAAChF,GAAG,CAACyF,QAAQ,CAAC,CACvC,CAEA,GAAI,CACF,GAAM,CAAAC,SAAS,MAAS,CAAAL,aAAa,CAACiB,eAAe,CACnD5E,aAAa,CACbQ,KAAK,CACLM,IAAI,CACJ+C,cACF,CAAC,CACD,GAAM,CAAAK,KAAK,CAAG,CAAEC,GAAG,CAAEH,SAAS,CAAEI,KAAK,CAAE7G,YAAA,CAAA8G,UAAU,CAAC/F,GAAG,CAAC,CAAE,CAAC,CACzDgF,gBAAgB,CAACgB,QAAQ,CAACP,QAAQ,CAAEG,KAAK,CAAC,CAC1C,MAAO,CAAAA,KAAK,CACd,CAAE,MAAOK,KAAK,CAAE,CACdjB,gBAAgB,CAACkB,QAAQ,CAACT,QAAQ,CAAEQ,KAAc,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,iBA9BK,CAAAE,cAAcA,CAAAI,EAAA,SAAAH,KAAA,CAAAI,KAAA,MAAAtB,SAAA,OA8BnB,CAED,GAAM,CAAAuB,aAAa,CAAGrG,MAAM,CAACmE,MAAM,CAACK,WAAW,CAAE,CAC/CuB,cAAc,CAAdA,cAAc,CACdlB,kBAAA,CAAAA,kBACF,CAAC,CAAC,CAEF,MAAO,CAAAwB,aAAa,CACtB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}