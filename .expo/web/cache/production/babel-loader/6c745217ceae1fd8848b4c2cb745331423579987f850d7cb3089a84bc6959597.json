{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.SegmentedButtons=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _SegmentedButtonItem=_interopRequireDefault(require(\"./SegmentedButtonItem\"));var _utils=require(\"./utils\");var _theming=require(\"../../core/theming\");function _interopRequireWildcard(e,t){if(\"function\"==typeof WeakMap)var r=new WeakMap(),n=new WeakMap();return(_interopRequireWildcard=function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f);}for(var _t in e)\"default\"!==_t&&{}.hasOwnProperty.call(e,_t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,_t))&&(i.get||i.set)?o(f,_t,i):f[_t]=e[_t]);return f;})(e,t);}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var SegmentedButtons=exports.SegmentedButtons=function SegmentedButtons(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,buttons=_ref.buttons,multiSelect=_ref.multiSelect,density=_ref.density,style=_ref.style,themeOverrides=_ref.theme;var theme=(0,_theming.useInternalTheme)(themeOverrides);return React.createElement(_reactNative.View,{style:[styles.row,style]},buttons.map(function(item,i){var disabledChildStyle=(0,_utils.getDisabledSegmentedButtonStyle)({theme:theme,buttons:buttons,index:i});var segment=i===0?'first':i===buttons.length-1?'last':undefined;var checked=multiSelect&&Array.isArray(value)?value.includes(item.value):value===item.value;var onPress=function onPress(e){var _item$onPress;(_item$onPress=item.onPress)===null||_item$onPress===void 0?void 0:_item$onPress.call(item,e);var nextValue=multiSelect&&Array.isArray(value)?checked?value.filter(function(val){return item.value!==val;}):[].concat((0,_toConsumableArray2.default)(value),[item.value]):item.value;onValueChange(nextValue);};return React.createElement(_SegmentedButtonItem.default,_extends({},item,{key:i,checked:checked,segment:segment,density:density,onPress:onPress,style:[item.style,disabledChildStyle],labelStyle:item.labelStyle,theme:theme}));}));};var styles=_reactNative.StyleSheet.create({row:{flexDirection:'row'}});var _default=exports.default=SegmentedButtons;","map":{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_SegmentedButtonItem","_interopRequireDefault","_utils","_theming","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","SegmentedButtons","exports","_ref","value","onValueChange","buttons","multiSelect","density","style","themeOverrides","theme","useInternalTheme","createElement","View","styles","row","map","item","disabledChildStyle","getDisabledSegmentedButtonStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","_item$onPress","nextValue","filter","val","concat","_toConsumableArray2","SegmentedButtonItem","_extends","key","labelStyle","StyleSheet","create","flexDirection","_default"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/components/SegmentedButtons/SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport type { ThemeProp } from 'src/types';\n\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype ConditionalValue<T extends string = string> =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: T[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: T;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: T) => void;\n    };\n\nexport type Props<T extends string = string> = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `checkedColor`: custom color for checked Text and Icon\n   * - `uncheckedColor`: custom color for unchecked Text and Icon\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: T;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    checkedColor?: string;\n    uncheckedColor?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    labelStyle?: StyleProp<TextStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  theme?: ThemeProp;\n} & ConditionalValue<T>;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = <T extends string = string>({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n  theme: themeOverrides,\n}: Props<T>) => {\n  const theme = useInternalTheme(themeOverrides);\n\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n            labelStyle={item.labelStyle}\n            theme={theme}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}