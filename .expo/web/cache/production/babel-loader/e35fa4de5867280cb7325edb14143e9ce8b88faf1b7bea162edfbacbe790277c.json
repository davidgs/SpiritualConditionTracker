{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=configureFonts;exports.fontConfig=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _reactNative=require(\"react-native\");var _tokens=require(\"./themes/v3/tokens\");var fontConfig=exports.fontConfig={web:{regular:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'400'},medium:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'500'},light:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'300'},thin:{fontFamily:'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',fontWeight:'100'}},ios:{regular:{fontFamily:'System',fontWeight:'400'},medium:{fontFamily:'System',fontWeight:'500'},light:{fontFamily:'System',fontWeight:'300'},thin:{fontFamily:'System',fontWeight:'100'}},default:{regular:{fontFamily:'sans-serif',fontWeight:'normal'},medium:{fontFamily:'sans-serif-medium',fontWeight:'normal'},light:{fontFamily:'sans-serif-light',fontWeight:'normal'},thin:{fontFamily:'sans-serif-thin',fontWeight:'normal'}}};function configureV2Fonts(config){var fonts=_reactNative.Platform.select(Object.assign({},fontConfig,config));return fonts;}function configureV3Fonts(config){if(!config){return _tokens.typescale;}var isFlatConfig=Object.keys(config).every(function(key){return typeof config[key]!=='object';});if(isFlatConfig){return Object.fromEntries(Object.entries(_tokens.typescale).map(function(_ref){var _ref3=(0,_slicedToArray2.default)(_ref,2),variantName=_ref3[0],variantProperties=_ref3[1];return[variantName,Object.assign({},variantProperties,config)];}));}return Object.assign.apply(Object,[{},_tokens.typescale].concat((0,_toConsumableArray2.default)(Object.entries(config).map(function(_ref2){var _ref4=(0,_slicedToArray2.default)(_ref2,2),variantName=_ref4[0],variantProperties=_ref4[1];return(0,_defineProperty2.default)({},variantName,Object.assign({},_tokens.typescale[variantName],variantProperties));}))));}function configureFonts(params){var _ref6=params||{},_ref6$isV=_ref6.isV3,isV3=_ref6$isV===void 0?true:_ref6$isV,config=_ref6.config;if(isV3){return configureV3Fonts(config);}return configureV2Fonts(config);}","map":{"version":3,"names":["_reactNative","require","_tokens","fontConfig","exports","web","regular","fontFamily","fontWeight","medium","light","thin","ios","default","configureV2Fonts","config","fonts","Platform","select","Object","assign","configureV3Fonts","typescale","isFlatConfig","keys","every","key","fromEntries","entries","map","_ref","_ref3","_slicedToArray2","variantName","variantProperties","apply","concat","_toConsumableArray2","_ref2","_ref4","_defineProperty2","configureFonts","params","_ref6","_ref6$isV","isV3"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/styles/fonts.tsx"],"sourcesContent":["import { Platform, PlatformOSType } from 'react-native';\n\nimport { typescale } from './themes/v3/tokens';\nimport type { Fonts, MD3Type, MD3Typescale, MD3TypescaleKey } from '../types';\n\nexport const fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100' as '100',\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100' as '100',\n    },\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal' as 'normal',\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal' as 'normal',\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal' as 'normal',\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal' as 'normal',\n    },\n  },\n};\n\ntype MD2FontsConfig = {\n  [platform in PlatformOSType | 'default']?: Fonts;\n};\n\ntype MD3FontsConfig =\n  | {\n      [key in MD3TypescaleKey]: Partial<MD3Type>;\n    }\n  | {\n      [key: string]: MD3Type;\n    }\n  | Partial<MD3Type>;\n\nfunction configureV2Fonts(config: MD2FontsConfig): Fonts {\n  const fonts = Platform.select({ ...fontConfig, ...config }) as Fonts;\n  return fonts;\n}\n\nfunction configureV3Fonts(\n  config: MD3FontsConfig\n): MD3Typescale | (MD3Typescale & { [key: string]: MD3Type }) {\n  if (!config) {\n    return typescale;\n  }\n\n  const isFlatConfig = Object.keys(config).every(\n    (key) => typeof config[key as keyof typeof config] !== 'object'\n  );\n\n  if (isFlatConfig) {\n    return Object.fromEntries(\n      Object.entries(typescale).map(([variantName, variantProperties]) => [\n        variantName,\n        { ...variantProperties, ...config },\n      ])\n    ) as MD3Typescale;\n  }\n\n  return Object.assign(\n    {},\n    typescale,\n    ...Object.entries(config).map(([variantName, variantProperties]) => ({\n      [variantName]: {\n        ...typescale[variantName as MD3TypescaleKey],\n        ...variantProperties,\n      },\n    }))\n  );\n}\n\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: { isV3: false }): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config?: MD2FontsConfig;\n  isV3: false;\n}): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<MD3Type>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<Record<MD3TypescaleKey, Partial<MD3Type>>>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config: Record<string, MD3Type>;\n  isV3?: true;\n}): MD3Typescale & { [key: string]: MD3Type };\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: any) {\n  const { isV3 = true, config } = params || {};\n\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n  return configureV2Fonts(config);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}