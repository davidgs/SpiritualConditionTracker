{"ast":null,"code":"\"use strict\";var _globalThis$expo,_globalThis$expo2,_globalThis$expo3;Object.defineProperty(exports,\"__esModule\",{value:true});exports.setDynamicLoadingErrorCallback=exports.setDynamicLoadingEnabled=exports.isDynamicLoadingSupported=exports.isDynamicLoadingEnabled=exports.getErrorCallback=void 0;var hasNecessaryExpoModules=!!((_globalThis$expo=globalThis.expo)!=null&&(_globalThis$expo=_globalThis$expo.modules)!=null&&_globalThis$expo.ExpoAsset)&&!!((_globalThis$expo2=globalThis.expo)!=null&&(_globalThis$expo2=_globalThis$expo2.modules)!=null&&_globalThis$expo2.ExpoFontLoader);var hasNecessaryExpoFeatures=hasNecessaryExpoModules&&typeof((_globalThis$expo3=globalThis.expo)==null?void 0:_globalThis$expo3.modules.ExpoFontLoader.getLoadedFonts)==='function';var dynamicFontLoadingEnabled=hasNecessaryExpoFeatures;var isDynamicLoadingSupported=function isDynamicLoadingSupported(){return hasNecessaryExpoFeatures;};exports.isDynamicLoadingSupported=isDynamicLoadingSupported;var setDynamicLoadingEnabled=function setDynamicLoadingEnabled(value){if(!hasNecessaryExpoFeatures){if(process.env.NODE_ENV!=='production'&&!!value){var message=hasNecessaryExpoModules?'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 52 or newer.':'Necessary Expo modules not found. Dynamic font loading is not available on Web or when necessary Expo modules are not present.';console.error(message);}return false;}dynamicFontLoadingEnabled=!!value;return true;};exports.setDynamicLoadingEnabled=setDynamicLoadingEnabled;var isDynamicLoadingEnabled=function isDynamicLoadingEnabled(){return dynamicFontLoadingEnabled;};exports.isDynamicLoadingEnabled=isDynamicLoadingEnabled;var dynamicLoadingErrorCallback;var setDynamicLoadingErrorCallback=function setDynamicLoadingErrorCallback(callback){dynamicLoadingErrorCallback=callback;};exports.setDynamicLoadingErrorCallback=setDynamicLoadingErrorCallback;var getErrorCallback=function getErrorCallback(){return dynamicLoadingErrorCallback;};exports.getErrorCallback=getErrorCallback;","map":{"version":3,"names":["hasNecessaryExpoModules","_globalThis$expo","globalThis","expo","modules","ExpoAsset","_globalThis$expo2","ExpoFontLoader","hasNecessaryExpoFeatures","_globalThis$expo3","getLoadedFonts","dynamicFontLoadingEnabled","isDynamicLoadingSupported","exports","setDynamicLoadingEnabled","value","process","env","NODE_ENV","message","console","error","isDynamicLoadingEnabled","dynamicLoadingErrorCallback","setDynamicLoadingErrorCallback","callback","getErrorCallback"],"sources":["/home/runner/workspace/node_modules/@react-native-vector-icons/common/src/dynamicLoading/dynamic-loading-setting.ts"],"sourcesContent":["import type { FontSource } from './types';\n\ndeclare global {\n  interface ExpoGlobal {\n    modules: {\n      ExpoAsset: {\n        // definition from\n        // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-asset/ios/AssetModule.swift#L23\n        downloadAsync: (uri: string, hash: string | undefined, type: string) => Promise<string>;\n      };\n      ExpoFontLoader: {\n        // definition from\n        // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-font/ios/FontLoaderModule.swift#L18\n        getLoadedFonts: () => string[];\n        loadAsync: (fontFamilyAlias: string, fileUri: string) => Promise<void>;\n      };\n    };\n  }\n\n  // eslint-disable-next-line vars-on-top\n  var expo: ExpoGlobal | undefined;\n}\n\nconst hasNecessaryExpoModules = !!globalThis.expo?.modules?.ExpoAsset && !!globalThis.expo?.modules?.ExpoFontLoader;\n\nconst hasNecessaryExpoFeatures =\n  hasNecessaryExpoModules && typeof globalThis.expo?.modules.ExpoFontLoader.getLoadedFonts === 'function';\n\nlet dynamicFontLoadingEnabled = hasNecessaryExpoFeatures;\n\nexport const isDynamicLoadingSupported = () => hasNecessaryExpoFeatures;\n\n/**\n * Set whether dynamic loading of fonts is enabled.\n * Currently, the presence of Expo Asset and Font Loader modules is a prerequisite for enabling.\n * In the future, React Native core apis will be used for dynamic font loading.\n *\n * @param value - whether dynamic loading of fonts is enabled\n * @returns `true` if dynamic loading of fonts was successfully set. `false` otherwise.\n * */\nexport const setDynamicLoadingEnabled = (value: boolean): boolean => {\n  if (!hasNecessaryExpoFeatures) {\n    if (process.env.NODE_ENV !== 'production' && !!value) {\n      const message = hasNecessaryExpoModules\n        ? 'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 52 or newer.'\n        : 'Necessary Expo modules not found. Dynamic font loading is not available on Web or when necessary Expo modules are not present.';\n      console.error(message); // eslint-disable-line no-console\n    }\n    return false;\n  }\n\n  dynamicFontLoadingEnabled = !!value;\n\n  return true;\n};\n\n/**\n * Whether dynamic loading of fonts is enabled.\n * */\nexport const isDynamicLoadingEnabled = () => dynamicFontLoadingEnabled;\n\ntype ErrorCallback = (args: {\n  error: Error;\n  fontFamily: string;\n  fontSource: FontSource;\n}) => void;\n\nlet dynamicLoadingErrorCallback: undefined | ErrorCallback;\n\n/**\n * Set a callback to be called when an error occurs during dynamic font loading.\n * */\nexport const setDynamicLoadingErrorCallback = (callback: ErrorCallback) => {\n  dynamicLoadingErrorCallback = callback;\n};\n\nexport const getErrorCallback = () => dynamicLoadingErrorCallback;\n"],"mappings":"ySAuBA,GAAM,CAAAA,uBAAuB,CAAG,CAAC,GAAAC,gBAAA,CAACC,UAAU,CAACC,IAAI,UAAAF,gBAAA,CAAfA,gBAAA,CAAiBG,OAAO,SAAxBH,gBAAA,CAA0BI,SAAS,GAAI,CAAC,GAAAC,iBAAA,CAACJ,UAAU,CAACC,IAAI,UAAAG,iBAAA,CAAfA,iBAAA,CAAiBF,OAAO,SAAxBE,iBAAA,CAA0BC,cAAc,EAEnH,GAAM,CAAAC,wBAAwB,CAC5BR,uBAAuB,EAAI,QAAAS,iBAAA,CAAOP,UAAU,CAACC,IAAI,eAAfM,iBAAA,CAAiBL,OAAO,CAACG,cAAc,CAACG,cAAc,IAAK,UAAU,CAEzG,GAAI,CAAAC,yBAAyB,CAAGH,wBAAwB,CAEjD,GAAM,CAAAI,yBAAyB,CAAG,QAA5B,CAAAA,yBAAyBA,CAAA,QAAS,CAAAJ,wBAAwB,GAEvEK,OAAA,CAAAD,yBAAA,CAAAA,yBAAA,CAQO,GAAM,CAAAE,wBAAwB,CAAI,QAA5B,CAAAA,wBAAwBA,CAAIC,KAAc,CAAc,CACnE,GAAI,CAACP,wBAAwB,CAAE,CAC7B,GAAIQ,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,EAAI,CAAC,CAACH,KAAK,CAAE,CACpD,GAAM,CAAAI,OAAO,CAAGnB,uBAAuB,CACnC,sGAAsG,CACtG,gIAAgI,CACpIoB,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC,CACxB,CACA,MAAO,MAAK,CACd,CAEAR,yBAAyB,CAAG,CAAC,CAACI,KAAK,CAEnC,MAAO,KAAI,CACb,CAAC,CAEDF,OAAA,CAAAC,wBAAA,CAAAA,wBAAA,CAGO,GAAM,CAAAQ,uBAAuB,CAAG,QAA1B,CAAAA,uBAAuBA,CAAA,QAAS,CAAAX,yBAAyB,GAACE,OAAA,CAAAS,uBAAA,CAAAA,uBAAA,CAQvE,GAAI,CAAAC,2BAAsD,CAKnD,GAAM,CAAAC,8BAA8B,CAAI,QAAlC,CAAAA,8BAA8BA,CAAIC,QAAuB,CAAK,CACzEF,2BAA2B,CAAGE,QAAQ,CACxC,CAAC,CAACZ,OAAA,CAAAW,8BAAA,CAAAA,8BAAA,CAEK,GAAM,CAAAE,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAA,QAAS,CAAAH,2BAA2B,GAACV,OAAA,CAAAa,gBAAA,CAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}