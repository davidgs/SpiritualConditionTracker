{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.ToggleButtonGroupContext=exports.ToggleButtonGroup=void 0;var React=_interopRequireWildcard(require(\"react\"));function _interopRequireWildcard(e,t){if(\"function\"==typeof WeakMap)var r=new WeakMap(),n=new WeakMap();return(_interopRequireWildcard=function _interopRequireWildcard(e,t){if(!t&&e&&e.__esModule)return e;var o,i,f={__proto__:null,default:e};if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return f;if(o=t?n:r){if(o.has(e))return o.get(e);o.set(e,f);}for(var _t in e)\"default\"!==_t&&{}.hasOwnProperty.call(e,_t)&&((i=(o=Object.defineProperty)&&Object.getOwnPropertyDescriptor(e,_t))&&(i.get||i.set)?o(f,_t,i):f[_t]=e[_t]);return f;})(e,t);}var ToggleButtonGroupContext=exports.ToggleButtonGroupContext=React.createContext(null);var ToggleButtonGroup=exports.ToggleButtonGroup=function ToggleButtonGroup(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children;return React.createElement(ToggleButtonGroupContext.Provider,{value:{value:value,onValueChange:onValueChange}},children);};ToggleButtonGroup.displayName='ToggleButton.Group';var _default=exports.default=ToggleButtonGroup;","map":{"version":3,"names":["React","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ToggleButtonGroupContext","exports","createContext","ToggleButtonGroup","_ref","value","onValueChange","children","createElement","Provider","displayName","_default"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/components/ToggleButton/ToggleButtonGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport type Props<Value = string> = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: Value) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: Value | null;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType<Value> = {\n  value: Value | null;\n  onValueChange: (item: Value) => void;\n};\n\nexport const ToggleButtonGroupContext =\n  //@ts-expect-error: TS can't ensure the type from Group to children\n  React.createContext<ToggleButtonContextType>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out [ToggleButton.Row](ToggleButtonRow).\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst ToggleButtonGroup = <Value = string,>({\n  value,\n  onValueChange,\n  children,\n}: Props<Value>) => (\n  <ToggleButtonGroupContext.Provider\n    value={{\n      value,\n      onValueChange,\n    }}\n  >\n    {children}\n  </ToggleButtonGroupContext.Provider>\n);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\n\nexport default ToggleButtonGroup;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonGroup };\n"],"mappings":"2IAAA,IAAAA,KAAA,CAAAC,uBAAA,CAAAC,OAAA,WAA8B,SAAAD,wBAAAE,CAAA,CAAAC,CAAA,wBAAAC,OAAA,KAAAC,CAAA,KAAAD,OAAA,GAAAE,CAAA,KAAAF,OAAA,UAAAJ,uBAAA,UAAAA,wBAAAE,CAAA,CAAAC,CAAA,MAAAA,CAAA,EAAAD,CAAA,EAAAA,CAAA,CAAAK,UAAA,QAAAL,CAAA,KAAAM,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAAAC,SAAA,MAAAC,OAAA,CAAAV,CAAA,YAAAA,CAAA,mBAAAA,CAAA,qBAAAA,CAAA,QAAAQ,CAAA,IAAAF,CAAA,CAAAL,CAAA,CAAAG,CAAA,CAAAD,CAAA,KAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,SAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,EAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,CAAAQ,CAAA,WAAAM,EAAA,IAAAd,CAAA,aAAAc,EAAA,KAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,CAAAc,EAAA,KAAAP,CAAA,EAAAD,CAAA,CAAAW,MAAA,CAAAC,cAAA,GAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,CAAAc,EAAA,KAAAP,CAAA,CAAAK,GAAA,EAAAL,CAAA,CAAAM,GAAA,EAAAP,CAAA,CAAAE,CAAA,CAAAM,EAAA,CAAAP,CAAA,EAAAC,CAAA,CAAAM,EAAA,EAAAd,CAAA,CAAAc,EAAA,UAAAN,CAAA,IAAAR,CAAA,CAAAC,CAAA,GAsBvB,GAAM,CAAAmB,wBAAwB,CAAAC,OAAA,CAAAD,wBAAA,CAEnCvB,KAAK,CAACyB,aAAa,CAA0B,IAAW,CAAC,CA2B3D,GAAM,CAAAC,iBAAiB,CAAAF,OAAA,CAAAE,iBAAA,CAAG,QAApB,CAAAA,iBAAiBA,CAAGC,IAAA,KACxB,CAAAC,KAAK,CAGQD,IAAA,CAHbC,KAAK,CACLC,aAAa,CAEAF,IAAA,CAFbE,aAAa,CACbC,QAAA,CACaH,IAAA,CADbG,QAAA,CACa,MACb,CAAA9B,KAAA,CAAA+B,aAAA,CAACR,wBAAwB,CAACS,QAAQ,EAChCJ,KAAK,CAAE,CACLA,KAAK,CAALA,KAAK,CACLC,aAAA,CAAAA,aACF,CAAE,EAEDC,QACgC,CAAC,EACrC,CAEDJ,iBAAiB,CAACO,WAAW,CAAG,oBAAoB,KAAAC,QAAA,CAAAV,OAAA,CAAAX,OAAA,CAErCa,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}