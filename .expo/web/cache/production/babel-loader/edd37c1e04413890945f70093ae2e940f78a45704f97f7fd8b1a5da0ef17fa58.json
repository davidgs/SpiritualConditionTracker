{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getIconButtonColor=void 0;var _color=_interopRequireDefault(require(\"color\"));var getBorderColor=function getBorderColor(_ref){var theme=_ref.theme,disabled=_ref.disabled;if(theme.isV3){if(disabled){return theme.colors.surfaceDisabled;}return theme.colors.outline;}return undefined;};var getBackgroundColor=function getBackgroundColor(_ref2){var theme=_ref2.theme,isMode=_ref2.isMode,disabled=_ref2.disabled,selected=_ref2.selected,customContainerColor=_ref2.customContainerColor;if(theme.isV3){if(disabled){if(isMode('contained')||isMode('contained-tonal')){return theme.colors.surfaceDisabled;}}if(typeof customContainerColor!=='undefined'){return customContainerColor;}if(isMode('contained')){if(selected){return theme.colors.primary;}return theme.colors.surfaceVariant;}if(isMode('contained-tonal')){if(selected){return theme.colors.secondaryContainer;}return theme.colors.surfaceVariant;}if(isMode('outlined')){if(selected){return theme.colors.inverseSurface;}}}if(typeof customContainerColor!=='undefined'){return customContainerColor;}return undefined;};var getIconColor=function getIconColor(_ref3){var theme=_ref3.theme,isMode=_ref3.isMode,disabled=_ref3.disabled,selected=_ref3.selected,customIconColor=_ref3.customIconColor;if(theme.isV3){if(disabled){return theme.colors.onSurfaceDisabled;}if(typeof customIconColor!=='undefined'){return customIconColor;}if(isMode('contained')){if(selected){return theme.colors.onPrimary;}return theme.colors.primary;}if(isMode('contained-tonal')){if(selected){return theme.colors.onSecondaryContainer;}return theme.colors.onSurfaceVariant;}if(isMode('outlined')){if(selected){return theme.colors.inverseOnSurface;}return theme.colors.onSurfaceVariant;}if(selected){return theme.colors.primary;}return theme.colors.onSurfaceVariant;}if(typeof customIconColor!=='undefined'){return customIconColor;}return theme.colors.text;};var getRippleColor=function getRippleColor(_ref4){var theme=_ref4.theme,iconColor=_ref4.iconColor,customRippleColor=_ref4.customRippleColor;if(customRippleColor){return customRippleColor;}if(theme.isV3){return(0,_color.default)(iconColor).alpha(0.12).rgb().string();}return(0,_color.default)(iconColor).alpha(0.32).rgb().string();};var getIconButtonColor=exports.getIconButtonColor=function getIconButtonColor(_ref5){var theme=_ref5.theme,disabled=_ref5.disabled,mode=_ref5.mode,selected=_ref5.selected,customIconColor=_ref5.customIconColor,customContainerColor=_ref5.customContainerColor,customRippleColor=_ref5.customRippleColor;var isMode=function isMode(modeToCompare){return mode===modeToCompare;};var baseIconColorProps={theme:theme,isMode:isMode,disabled:disabled,selected:selected};var iconColor=getIconColor(Object.assign({},baseIconColorProps,{customIconColor:customIconColor}));return{iconColor:iconColor,backgroundColor:getBackgroundColor(Object.assign({},baseIconColorProps,{customContainerColor:customContainerColor})),rippleColor:getRippleColor({theme:theme,iconColor:iconColor,customRippleColor:customRippleColor}),borderColor:getBorderColor({theme:theme,disabled:disabled})};};","map":{"version":3,"names":["_color","_interopRequireDefault","require","getBorderColor","_ref","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","_ref2","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","_ref3","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","_ref4","iconColor","customRippleColor","color","alpha","rgb","string","getIconButtonColor","exports","_ref5","mode","modeToCompare","baseIconColorProps","Object","assign","backgroundColor","rippleColor","borderColor"],"sources":["/home/runner/workspace/node_modules/react-native-paper/src/components/IconButton/utils.ts"],"sourcesContent":["import type { ColorValue } from 'react-native';\n\nimport color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n  customRippleColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n  customRippleColor?: ColorValue;\n}) => {\n  if (customRippleColor) {\n    return customRippleColor;\n  }\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n  customRippleColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n  customRippleColor?: ColorValue;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor, customRippleColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}