{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.isLoadedInCache=isLoadedInCache;exports.isLoadedNative=isLoadedNative;exports.loadPromises=void 0;exports.markLoaded=markLoaded;exports.purgeCache=purgeCache;exports.purgeFontFamilyFromCache=purgeFontFamilyFromCache;var _ExpoFontLoader=_interopRequireDefault(require(\"./ExpoFontLoader\"));var loadPromises=exports.loadPromises={};var cache={};function markLoaded(fontFamily){cache[fontFamily]=true;}function isLoadedInCache(fontFamily){return fontFamily in cache;}function isLoadedNative(fontFamily){if(isLoadedInCache(fontFamily)){return true;}else{var loadedNativeFonts=_ExpoFontLoader.default.getLoadedFonts();if(!(loadedNativeFonts!=null&&loadedNativeFonts.length)){return false;}loadedNativeFonts.forEach(function(font){cache[font]=true;});return fontFamily in cache;}}function purgeFontFamilyFromCache(fontFamily){delete cache[fontFamily];}function purgeCache(){cache={};}","map":{"version":3,"names":["_ExpoFontLoader","_interopRequireDefault","require","loadPromises","exports","cache","markLoaded","fontFamily","isLoadedInCache","isLoadedNative","loadedNativeFonts","ExpoFontLoader","getLoadedFonts","length","forEach","font","purgeFontFamilyFromCache","purgeCache"],"sources":["/home/runner/workspace/node_modules/expo-font/src/memory.ts"],"sourcesContent":["import ExpoFontLoader from './ExpoFontLoader';\n\nexport const loadPromises: { [name: string]: Promise<void> } = {};\n\n// cache the value on the js side for fast access to the fonts that are loaded\nlet cache: { [name: string]: boolean } = {};\n\nexport function markLoaded(fontFamily: string) {\n  cache[fontFamily] = true;\n}\n\nexport function isLoadedInCache(fontFamily: string): boolean {\n  return fontFamily in cache;\n}\n\nexport function isLoadedNative(fontFamily: string): boolean {\n  if (isLoadedInCache(fontFamily)) {\n    return true;\n  } else {\n    const loadedNativeFonts: string[] = ExpoFontLoader.getLoadedFonts();\n\n    // NOTE(brentvatne): Bail out here if there are no loaded fonts. This\n    // is functionally equivalent to the behavior below if the returned array\n    // is empty, but this handles improper mocking of `getLoadedFonts`.\n    if (!loadedNativeFonts?.length) {\n      return false;\n    }\n\n    loadedNativeFonts.forEach((font) => {\n      cache[font] = true;\n    });\n    return fontFamily in cache;\n  }\n}\n\nexport function purgeFontFamilyFromCache(fontFamily: string): void {\n  delete cache[fontFamily];\n}\n\nexport function purgeCache(): void {\n  cache = {};\n}\n"],"mappings":"4WAAA,IAAAA,eAAA,CAAAC,sBAAA,CAAAC,OAAA,sBAEO,GAAM,CAAAC,YAAY,CAAAC,OAAA,CAAAD,YAAA,CAAsC,EAAE,CAGjE,GAAI,CAAAE,KAAK,CAAgC,EAAE,CAErC,QAAU,CAAAC,UAAUA,CAACC,UAAkB,EAC3CF,KAAK,CAACE,UAAU,CAAC,CAAG,IAAI,CAC1B,CAEM,QAAU,CAAAC,eAAeA,CAACD,UAAkB,EAChD,MAAO,CAAAA,UAAU,GAAI,CAAAF,KAAK,CAC5B,CAEM,QAAU,CAAAI,cAAcA,CAACF,UAAkB,EAC/C,GAAIC,eAAe,CAACD,UAAU,CAAC,CAAE,CAC/B,MAAO,KAAI,CACb,CAAC,IAAM,CACL,GAAM,CAAAG,iBAAiB,CAAaC,uBAAc,CAACC,cAAc,EAAE,CAKnE,GAAI,EAACF,iBAAiB,QAAjBA,iBAAiB,CAAEG,MAAM,EAAE,CAC9B,MAAO,MAAK,CACd,CAEAH,iBAAiB,CAACI,OAAO,CAAC,SAACC,IAAI,CAAI,CACjCV,KAAK,CAACU,IAAI,CAAC,CAAG,IAAI,CACpB,CAAC,CAAC,CACF,MAAO,CAAAR,UAAU,GAAI,CAAAF,KAAK,CAC5B,CACF,CAEM,QAAU,CAAAW,wBAAwBA,CAACT,UAAkB,EACzD,MAAO,CAAAF,KAAK,CAACE,UAAU,CAAC,CAC1B,CAEM,QAAU,CAAAU,UAAUA,CAAA,EACxBZ,KAAK,CAAG,EAAE,CACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}