{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.userOperations = exports.update = exports.spiritualFitnessOperations = exports.reminderOperations = exports.nearbyMembersOperations = exports.meetingOperations = exports.insert = exports.initDatabase = exports.getById = exports.getAll = exports.executeSql = exports.deleteById = exports.default = exports.closeDatabase = exports.calculateSobrietyYears = exports.calculateSobrietyDays = exports.calculateDistance = exports.activityOperations = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar DB_NAME = 'aarecovery.db';\nvar DB_VERSION = '1.0';\nvar DB_DISPLAY_NAME = 'AA Recovery Database';\nvar TABLES = {\n  USERS: 'aarecovery_users',\n  ACTIVITIES: 'aarecovery_activities',\n  SPIRITUAL_FITNESS: 'aarecovery_spiritual_fitness',\n  MEETINGS: 'aarecovery_meetings',\n  MEETING_REMINDERS: 'aarecovery_meeting_reminders',\n  NEARBY_MEMBERS: 'aarecovery_nearby_members'\n};\nvar initializeTables = function initializeTables() {\n  Object.values(TABLES).forEach(function (tableKey) {\n    if (!localStorage.getItem(tableKey)) {\n      localStorage.setItem(tableKey, JSON.stringify([]));\n    }\n  });\n  console.log('Web localStorage tables initialized');\n};\nvar getTableData = function getTableData(tableKey) {\n  try {\n    return JSON.parse(localStorage.getItem(tableKey)) || [];\n  } catch (error) {\n    console.error(`Error reading from ${tableKey}:`, error);\n    return [];\n  }\n};\nvar saveTableData = function saveTableData(tableKey, data) {\n  try {\n    localStorage.setItem(tableKey, JSON.stringify(data));\n    return true;\n  } catch (error) {\n    console.error(`Error writing to ${tableKey}:`, error);\n    return false;\n  }\n};\nvar initDatabase = exports.initDatabase = function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* () {\n    console.log('Initializing web localStorage database...');\n    try {\n      initializeTables();\n      console.log('Web database initialized successfully');\n      return {\n        isInitialized: true\n      };\n    } catch (error) {\n      console.error('Error initializing web database:', error);\n      throw error;\n    }\n  });\n  return function initDatabase() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar closeDatabase = exports.closeDatabase = function () {\n  var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n    console.log('Web database connection closed (no-op)');\n  });\n  return function closeDatabase() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar executeSql = exports.executeSql = function () {\n  var _ref3 = (0, _asyncToGenerator2.default)(function* (query) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    console.log('Web executeSql called:', query, params);\n    var queryLower = query.toLowerCase();\n    if (queryLower.includes('create table')) {\n      return {\n        rows: {\n          length: 0\n        }\n      };\n    } else if (queryLower.includes('select') && queryLower.includes('from')) {\n      var tableMatch = query.match(/from\\s+(\\w+)/i);\n      if (!tableMatch) {\n        throw new Error('Invalid SELECT query: table not specified');\n      }\n      var tableName = tableMatch[1].toLowerCase();\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(tableName);\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${tableName}`);\n      }\n      var data = getTableData(tableKey);\n      var filteredData = data;\n      if (queryLower.includes('where')) {\n        var whereCondition = query.match(/where\\s+(.*?)(?:order by|limit|$)/i);\n        if (whereCondition && whereCondition[1]) {\n          var condition = whereCondition[1].trim();\n          if (condition.includes('id = ?') && params.length > 0) {\n            var idValue = params[0];\n            filteredData = data.filter(function (item) {\n              return item.id === idValue;\n            });\n          } else if (condition.includes('user_id = ?') && params.length > 0) {\n            var userIdValue = params[0];\n            filteredData = data.filter(function (item) {\n              return item.user_id === userIdValue;\n            });\n          }\n        }\n      }\n      if (queryLower.includes('order by')) {\n        var orderMatch = query.match(/order by\\s+(.*?)(?:limit|$)/i);\n        if (orderMatch && orderMatch[1]) {\n          var orderParts = orderMatch[1].trim().split(/\\s+/);\n          var orderField = orderParts[0];\n          var orderDesc = orderParts.length > 1 && orderParts[1].toLowerCase() === 'desc';\n          filteredData.sort(function (a, b) {\n            if (orderDesc) {\n              return a[orderField] > b[orderField] ? -1 : 1;\n            }\n            return a[orderField] > b[orderField] ? 1 : -1;\n          });\n        }\n      }\n      if (queryLower.includes('limit') && params.length > 0) {\n        var limitMatch = query.match(/limit\\s+\\?/i);\n        if (limitMatch) {\n          var limitValue = parseInt(params[params.length - 1], 10);\n          if (!isNaN(limitValue)) {\n            filteredData = filteredData.slice(0, limitValue);\n          }\n        }\n      }\n      var rows = {\n        length: filteredData.length,\n        item: function item(index) {\n          return filteredData[index];\n        },\n        _array: filteredData\n      };\n      return {\n        rows: rows\n      };\n    } else if (queryLower.includes('insert into')) {\n      var _tableMatch = query.match(/insert into\\s+(\\w+)/i);\n      if (!_tableMatch) {\n        throw new Error('Invalid INSERT query: table not specified');\n      }\n      var _tableName = _tableMatch[1].toLowerCase();\n      var _tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(_tableName);\n      });\n      if (!_tableKey) {\n        throw new Error(`Unknown table: ${_tableName}`);\n      }\n      var columnsMatch = query.match(/\\(([^)]+)\\)/);\n      if (!columnsMatch) {\n        throw new Error('Invalid INSERT query: columns not specified');\n      }\n      var columns = columnsMatch[1].split(',').map(function (col) {\n        return col.trim();\n      });\n      var newObject = {};\n      columns.forEach(function (col, index) {\n        newObject[col] = params[index];\n      });\n      var tableData = getTableData(_tableKey);\n      tableData.push(newObject);\n      saveTableData(_tableKey, tableData);\n      return {\n        insertId: newObject.id\n      };\n    } else if (queryLower.includes('update')) {\n      var _tableMatch2 = query.match(/update\\s+(\\w+)/i);\n      if (!_tableMatch2) {\n        throw new Error('Invalid UPDATE query: table not specified');\n      }\n      var _tableName2 = _tableMatch2[1].toLowerCase();\n      var _tableKey2 = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(_tableName2);\n      });\n      if (!_tableKey2) {\n        throw new Error(`Unknown table: ${_tableName2}`);\n      }\n      var _tableData = getTableData(_tableKey2);\n      var setMatch = query.match(/set\\s+(.*?)\\s+where/i);\n      if (!setMatch) {\n        throw new Error('Invalid UPDATE query: SET clause not found');\n      }\n      var setClauses = setMatch[1].split(',').map(function (clause) {\n        return clause.trim();\n      });\n      var updateFields = setClauses.map(function (clause) {\n        return clause.split('=')[0].trim();\n      });\n      var rowsAffected = 0;\n      var _idValue = params[params.length - 1];\n      var updatedData = _tableData.map(function (item) {\n        if (item.id === _idValue) {\n          var updatedItem = Object.assign({}, item);\n          updateFields.forEach(function (field, index) {\n            updatedItem[field] = params[index];\n          });\n          rowsAffected++;\n          return updatedItem;\n        }\n        return item;\n      });\n      saveTableData(_tableKey2, updatedData);\n      return {\n        rowsAffected: rowsAffected\n      };\n    } else if (queryLower.includes('delete')) {\n      var _tableMatch3 = query.match(/delete from\\s+(\\w+)/i);\n      if (!_tableMatch3) {\n        throw new Error('Invalid DELETE query: table not specified');\n      }\n      var _tableName3 = _tableMatch3[1].toLowerCase();\n      var _tableKey3 = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(_tableName3);\n      });\n      if (!_tableKey3) {\n        throw new Error(`Unknown table: ${_tableName3}`);\n      }\n      var _tableData2 = getTableData(_tableKey3);\n      var _idValue2 = params[0];\n      var _filteredData = _tableData2.filter(function (item) {\n        return item.id !== _idValue2;\n      });\n      var _rowsAffected = _tableData2.length - _filteredData.length;\n      saveTableData(_tableKey3, _filteredData);\n      return {\n        rowsAffected: _rowsAffected\n      };\n    }\n    throw new Error(`Unsupported query in web database: ${query}`);\n  });\n  return function executeSql(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar getAll = exports.getAll = function () {\n  var _ref4 = (0, _asyncToGenerator2.default)(function* (table) {\n    try {\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(table.toLowerCase());\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${table}`);\n      }\n      return getTableData(tableKey);\n    } catch (error) {\n      console.error(`Error getting all rows from ${table}:`, error);\n      throw error;\n    }\n  });\n  return function getAll(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar getById = exports.getById = function () {\n  var _ref5 = (0, _asyncToGenerator2.default)(function* (table, id) {\n    try {\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(table.toLowerCase());\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${table}`);\n      }\n      var tableData = getTableData(tableKey);\n      return tableData.find(function (item) {\n        return item.id === id;\n      }) || null;\n    } catch (error) {\n      console.error(`Error getting row by id from ${table}:`, error);\n      throw error;\n    }\n  });\n  return function getById(_x3, _x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar insert = exports.insert = function () {\n  var _ref6 = (0, _asyncToGenerator2.default)(function* (table, data) {\n    try {\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(table.toLowerCase());\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${table}`);\n      }\n      var tableData = getTableData(tableKey);\n      tableData.push(data);\n      saveTableData(tableKey, tableData);\n      return data.id;\n    } catch (error) {\n      console.error(`Error inserting into ${table}:`, error);\n      throw error;\n    }\n  });\n  return function insert(_x5, _x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar update = exports.update = function () {\n  var _ref7 = (0, _asyncToGenerator2.default)(function* (table, id, data) {\n    try {\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(table.toLowerCase());\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${table}`);\n      }\n      var tableData = getTableData(tableKey);\n      var rowsAffected = 0;\n      var updatedData = tableData.map(function (item) {\n        if (item.id === id) {\n          rowsAffected++;\n          return Object.assign({}, item, data);\n        }\n        return item;\n      });\n      saveTableData(tableKey, updatedData);\n      return rowsAffected;\n    } catch (error) {\n      console.error(`Error updating ${table}:`, error);\n      throw error;\n    }\n  });\n  return function update(_x7, _x8, _x9) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar deleteById = exports.deleteById = function () {\n  var _ref8 = (0, _asyncToGenerator2.default)(function* (table, id) {\n    try {\n      var tableKey = Object.values(TABLES).find(function (key) {\n        return key.toLowerCase().includes(table.toLowerCase());\n      });\n      if (!tableKey) {\n        throw new Error(`Unknown table: ${table}`);\n      }\n      var tableData = getTableData(tableKey);\n      var filteredData = tableData.filter(function (item) {\n        return item.id !== id;\n      });\n      var rowsAffected = tableData.length - filteredData.length;\n      saveTableData(tableKey, filteredData);\n      return rowsAffected;\n    } catch (error) {\n      console.error(`Error deleting from ${table}:`, error);\n      throw error;\n    }\n  });\n  return function deleteById(_x0, _x1) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nvar calculateDistance = exports.calculateDistance = function calculateDistance(lat1, lon1, lat2, lon2) {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  }\n  var radlat1 = Math.PI * lat1 / 180;\n  var radlat2 = Math.PI * lat2 / 180;\n  var theta = lon1 - lon2;\n  var radtheta = Math.PI * theta / 180;\n  var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  if (dist > 1) {\n    dist = 1;\n  }\n  dist = Math.acos(dist);\n  dist = dist * 180 / Math.PI;\n  dist = dist * 60 * 1.1515;\n  return dist;\n};\nvar calculateSobrietyDays = exports.calculateSobrietyDays = function calculateSobrietyDays(sobrietyDate) {\n  if (!sobrietyDate) return 0;\n  var start = new Date(sobrietyDate);\n  var today = new Date();\n  start.setHours(0, 0, 0, 0);\n  today.setHours(0, 0, 0, 0);\n  var diffTime = Math.abs(today - start);\n  var diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n};\nvar calculateSobrietyYears = exports.calculateSobrietyYears = function calculateSobrietyYears(sobrietyDate) {\n  var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var days = calculateSobrietyDays(sobrietyDate);\n  var years = days / 365.25;\n  return parseFloat(years.toFixed(decimalPlaces));\n};\nvar userOperations = exports.userOperations = {\n  createUser: function () {\n    var _createUser = (0, _asyncToGenerator2.default)(function* (userData) {\n      var now = new Date().toISOString();\n      var userId = userData.id || `user_${Date.now()}`;\n      var data = {\n        id: userId,\n        name: userData.name || '',\n        sobriety_date: userData.sobrietyDate || null,\n        home_group: userData.homeGroup || '',\n        phone: userData.phone || '',\n        email: userData.email || '',\n        sponsor_id: userData.sponsorId || null,\n        privacy_settings: JSON.stringify(userData.privacySettings || {}),\n        created_at: now,\n        updated_at: now\n      };\n      yield insert('users', data);\n      return userId;\n    });\n    function createUser(_x10) {\n      return _createUser.apply(this, arguments);\n    }\n    return createUser;\n  }(),\n  getUserById: function () {\n    var _getUserById = (0, _asyncToGenerator2.default)(function* (userId) {\n      var user = yield getById('users', userId);\n      if (user) {\n        user.privacySettings = user.privacy_settings ? JSON.parse(user.privacy_settings) : {};\n        return user;\n      }\n      return null;\n    });\n    function getUserById(_x11) {\n      return _getUserById.apply(this, arguments);\n    }\n    return getUserById;\n  }(),\n  updateUser: function () {\n    var _updateUser = (0, _asyncToGenerator2.default)(function* (userId, userData) {\n      var updates = {\n        updated_at: new Date().toISOString()\n      };\n      if (userData.name) updates.name = userData.name;\n      if (userData.sobrietyDate) updates.sobriety_date = userData.sobrietyDate;\n      if (userData.homeGroup) updates.home_group = userData.homeGroup;\n      if (userData.phone) updates.phone = userData.phone;\n      if (userData.email) updates.email = userData.email;\n      if (userData.sponsorId !== undefined) updates.sponsor_id = userData.sponsorId;\n      if (userData.privacySettings) {\n        updates.privacy_settings = JSON.stringify(userData.privacySettings);\n      }\n      return yield update('users', userId, updates);\n    });\n    function updateUser(_x12, _x13) {\n      return _updateUser.apply(this, arguments);\n    }\n    return updateUser;\n  }()\n};\nvar activityOperations = exports.activityOperations = {\n  createActivity: function () {\n    var _createActivity = (0, _asyncToGenerator2.default)(function* (activityData) {\n      var now = new Date().toISOString();\n      var activityId = activityData.id || `activity_${Date.now()}`;\n      var data = {\n        id: activityId,\n        user_id: activityData.userId,\n        type: activityData.type,\n        date: activityData.date || now,\n        duration: activityData.duration || 0,\n        notes: activityData.notes || '',\n        created_at: now\n      };\n      yield insert('activities', data);\n      return activityId;\n    });\n    function createActivity(_x14) {\n      return _createActivity.apply(this, arguments);\n    }\n    return createActivity;\n  }(),\n  getUserActivities: function () {\n    var _getUserActivities = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        var results = yield executeSql('SELECT * FROM activities WHERE user_id = ? ORDER BY date DESC', [userId]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting user activities:', error);\n        throw error;\n      }\n    });\n    function getUserActivities(_x15) {\n      return _getUserActivities.apply(this, arguments);\n    }\n    return getUserActivities;\n  }(),\n  getRecentActivities: function () {\n    var _getRecentActivities = (0, _asyncToGenerator2.default)(function* (userId) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      try {\n        var results = yield executeSql('SELECT * FROM activities WHERE user_id = ? ORDER BY date DESC LIMIT ?', [userId, limit]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting recent activities:', error);\n        throw error;\n      }\n    });\n    function getRecentActivities(_x16) {\n      return _getRecentActivities.apply(this, arguments);\n    }\n    return getRecentActivities;\n  }(),\n  deleteActivity: function () {\n    var _deleteActivity = (0, _asyncToGenerator2.default)(function* (activityId) {\n      return yield deleteById('activities', activityId);\n    });\n    function deleteActivity(_x17) {\n      return _deleteActivity.apply(this, arguments);\n    }\n    return deleteActivity;\n  }()\n};\nvar spiritualFitnessOperations = exports.spiritualFitnessOperations = {\n  calculateSpiritualFitness: function () {\n    var _calculateSpiritualFitness = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        var thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        var results = yield executeSql('SELECT * FROM activities WHERE user_id = ? AND date >= ? ORDER BY date DESC', [userId, thirtyDaysAgo.toISOString()]);\n        var activities = results.rows._array || [];\n        var scores = {\n          prayer: 0,\n          meditation: 0,\n          reading: 0,\n          meeting: 0,\n          service: 0\n        };\n        activities.forEach(function (activity) {\n          var type = activity.type.toLowerCase();\n          var duration = activity.duration || 0;\n          if (type.includes('prayer')) {\n            scores.prayer += duration / 10;\n          } else if (type.includes('meditation')) {\n            scores.meditation += duration / 15;\n          } else if (type.includes('reading')) {\n            scores.reading += duration / 20;\n          } else if (type.includes('meeting')) {\n            scores.meeting += 1;\n          } else if (type.includes('service')) {\n            scores.service += duration / 30;\n          }\n        });\n        Object.keys(scores).forEach(function (key) {\n          scores[key] = Math.min(10, scores[key]);\n        });\n        var totalScore = Object.values(scores).reduce(function (sum, score) {\n          return sum + score;\n        }, 0);\n        var finalScore = parseFloat((totalScore / 50 * 100).toFixed(2));\n        var now = new Date().toISOString();\n        var fitnessId = `sf_${Date.now()}`;\n        var data = {\n          id: fitnessId,\n          user_id: userId,\n          score: finalScore,\n          prayer_score: scores.prayer,\n          meditation_score: scores.meditation,\n          reading_score: scores.reading,\n          meeting_score: scores.meeting,\n          service_score: scores.service,\n          calculated_at: now\n        };\n        yield insert('spiritual_fitness', data);\n        return {\n          score: finalScore,\n          details: scores,\n          calculatedAt: now\n        };\n      } catch (error) {\n        console.error('Error calculating spiritual fitness:', error);\n        throw error;\n      }\n    });\n    function calculateSpiritualFitness(_x18) {\n      return _calculateSpiritualFitness.apply(this, arguments);\n    }\n    return calculateSpiritualFitness;\n  }()\n};\nvar meetingOperations = exports.meetingOperations = {\n  createMeeting: function () {\n    var _createMeeting = (0, _asyncToGenerator2.default)(function* (meetingData) {\n      var now = new Date().toISOString();\n      var meetingId = meetingData.id || `meeting_${Date.now()}`;\n      var data = {\n        id: meetingId,\n        name: meetingData.name || '',\n        day: meetingData.day || '',\n        time: meetingData.time || '',\n        location: meetingData.location || '',\n        address: meetingData.address || '',\n        city: meetingData.city || '',\n        state: meetingData.state || '',\n        zip: meetingData.zip || '',\n        type: meetingData.type || '',\n        notes: meetingData.notes || '',\n        shared: meetingData.shared === true ? 1 : 0,\n        created_by: meetingData.createdBy || null,\n        created_at: now,\n        updated_at: now\n      };\n      yield insert('meetings', data);\n      return meetingId;\n    });\n    function createMeeting(_x19) {\n      return _createMeeting.apply(this, arguments);\n    }\n    return createMeeting;\n  }(),\n  getSharedMeetings: function () {\n    var _getSharedMeetings = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        var results = yield executeSql('SELECT * FROM meetings WHERE shared = ? ORDER BY day, time', [1]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting shared meetings:', error);\n        throw error;\n      }\n    });\n    function getSharedMeetings() {\n      return _getSharedMeetings.apply(this, arguments);\n    }\n    return getSharedMeetings;\n  }(),\n  getUserMeetings: function () {\n    var _getUserMeetings = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        var results = yield executeSql('SELECT * FROM meetings WHERE created_by = ? ORDER BY day, time', [userId]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting user meetings:', error);\n        throw error;\n      }\n    });\n    function getUserMeetings(_x20) {\n      return _getUserMeetings.apply(this, arguments);\n    }\n    return getUserMeetings;\n  }()\n};\nvar reminderOperations = exports.reminderOperations = {\n  createReminder: function () {\n    var _createReminder = (0, _asyncToGenerator2.default)(function* (reminderData) {\n      var now = new Date().toISOString();\n      var reminderId = reminderData.id || `reminder_${Date.now()}`;\n      var data = {\n        id: reminderId,\n        meeting_id: reminderData.meetingId,\n        user_id: reminderData.userId,\n        reminder_time: reminderData.reminderTime || 30,\n        notification_id: reminderData.notificationId || null,\n        calendar_event_id: reminderData.calendarEventId || null,\n        created_at: now\n      };\n      yield insert('meeting_reminders', data);\n      return reminderId;\n    });\n    function createReminder(_x21) {\n      return _createReminder.apply(this, arguments);\n    }\n    return createReminder;\n  }(),\n  getUserReminders: function () {\n    var _getUserReminders = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        var results = yield executeSql('SELECT r.*, m.name, m.day, m.time, m.location ' + 'FROM meeting_reminders r ' + 'JOIN meetings m ON r.meeting_id = m.id ' + 'WHERE r.user_id = ? ' + 'ORDER BY m.day, m.time', [userId]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting user reminders:', error);\n        throw error;\n      }\n    });\n    function getUserReminders(_x22) {\n      return _getUserReminders.apply(this, arguments);\n    }\n    return getUserReminders;\n  }()\n};\nvar nearbyMembersOperations = exports.nearbyMembersOperations = {\n  saveMemberDiscovery: function () {\n    var _saveMemberDiscovery = (0, _asyncToGenerator2.default)(function* (discoveryData) {\n      var now = new Date().toISOString();\n      var discoveryId = discoveryData.id || `discovery_${Date.now()}`;\n      var data = {\n        id: discoveryId,\n        user_id: discoveryData.userId,\n        discovered_user_id: discoveryData.discoveredUserId,\n        discovery_type: discoveryData.discoveryType || 'bluetooth',\n        distance: discoveryData.distance || 0,\n        last_seen: now\n      };\n      yield insert('nearby_members', data);\n      return discoveryId;\n    });\n    function saveMemberDiscovery(_x23) {\n      return _saveMemberDiscovery.apply(this, arguments);\n    }\n    return saveMemberDiscovery;\n  }(),\n  getNearbyMembers: function () {\n    var _getNearbyMembers = (0, _asyncToGenerator2.default)(function* (userId) {\n      try {\n        var results = yield executeSql('SELECT d.*, u.name ' + 'FROM nearby_members d ' + 'JOIN users u ON d.discovered_user_id = u.id ' + 'WHERE d.user_id = ? ' + 'ORDER BY d.last_seen DESC', [userId]);\n        return results.rows._array || [];\n      } catch (error) {\n        console.error('Error getting nearby members:', error);\n        throw error;\n      }\n    });\n    function getNearbyMembers(_x24) {\n      return _getNearbyMembers.apply(this, arguments);\n    }\n    return getNearbyMembers;\n  }()\n};\nvar _default = exports.default = {\n  initDatabase: initDatabase,\n  closeDatabase: closeDatabase,\n  executeSql: executeSql,\n  getAll: getAll,\n  getById: getById,\n  insert: insert,\n  update: update,\n  deleteById: deleteById,\n  calculateDistance: calculateDistance,\n  calculateSobrietyDays: calculateSobrietyDays,\n  calculateSobrietyYears: calculateSobrietyYears,\n  userOperations: userOperations,\n  activityOperations: activityOperations,\n  spiritualFitnessOperations: spiritualFitnessOperations,\n  meetingOperations: meetingOperations,\n  reminderOperations: reminderOperations,\n  nearbyMembersOperations: nearbyMembersOperations\n};","map":{"version":3,"names":["DB_NAME","DB_VERSION","DB_DISPLAY_NAME","TABLES","USERS","ACTIVITIES","SPIRITUAL_FITNESS","MEETINGS","MEETING_REMINDERS","NEARBY_MEMBERS","initializeTables","Object","values","forEach","tableKey","localStorage","getItem","setItem","JSON","stringify","console","log","getTableData","parse","error","saveTableData","data","initDatabase","exports","_ref","_asyncToGenerator2","default","isInitialized","apply","arguments","closeDatabase","_ref2","executeSql","_ref3","query","params","length","undefined","queryLower","toLowerCase","includes","rows","tableMatch","match","Error","tableName","find","key","filteredData","whereCondition","condition","trim","idValue","filter","item","id","userIdValue","user_id","orderMatch","orderParts","split","orderField","orderDesc","sort","a","b","limitMatch","limitValue","parseInt","isNaN","slice","index","_array","columnsMatch","columns","map","col","newObject","tableData","push","insertId","setMatch","setClauses","clause","updateFields","rowsAffected","updatedData","updatedItem","assign","field","_x","getAll","_ref4","table","_x2","getById","_ref5","_x3","_x4","insert","_ref6","_x5","_x6","update","_ref7","_x7","_x8","_x9","deleteById","_ref8","_x0","_x1","calculateDistance","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","calculateSobrietyDays","sobrietyDate","start","Date","today","setHours","diffTime","abs","diffDays","floor","calculateSobrietyYears","decimalPlaces","days","years","parseFloat","toFixed","userOperations","createUser","_createUser","userData","now","toISOString","userId","name","sobriety_date","home_group","homeGroup","phone","email","sponsor_id","sponsorId","privacy_settings","privacySettings","created_at","updated_at","_x10","getUserById","_getUserById","user","_x11","updateUser","_updateUser","updates","_x12","_x13","activityOperations","createActivity","_createActivity","activityData","activityId","type","date","duration","notes","_x14","getUserActivities","_getUserActivities","results","_x15","getRecentActivities","_getRecentActivities","limit","_x16","deleteActivity","_deleteActivity","_x17","spiritualFitnessOperations","calculateSpiritualFitness","_calculateSpiritualFitness","thirtyDaysAgo","setDate","getDate","activities","scores","prayer","meditation","reading","meeting","service","activity","keys","min","totalScore","reduce","sum","score","finalScore","fitnessId","prayer_score","meditation_score","reading_score","meeting_score","service_score","calculated_at","details","calculatedAt","_x18","meetingOperations","createMeeting","_createMeeting","meetingData","meetingId","day","time","location","address","city","state","zip","shared","created_by","createdBy","_x19","getSharedMeetings","_getSharedMeetings","getUserMeetings","_getUserMeetings","_x20","reminderOperations","createReminder","_createReminder","reminderData","reminderId","meeting_id","reminder_time","reminderTime","notification_id","notificationId","calendar_event_id","calendarEventId","_x21","getUserReminders","_getUserReminders","_x22","nearbyMembersOperations","saveMemberDiscovery","_saveMemberDiscovery","discoveryData","discoveryId","discovered_user_id","discoveredUserId","discovery_type","discoveryType","distance","last_seen","_x23","getNearbyMembers","_getNearbyMembers","_x24","_default"],"sources":["/home/runner/workspace/src/utils/database.web.js"],"sourcesContent":["/**\n * Web-specific implementation of database operations using localStorage\n * This is used automatically when running on web platforms\n */\n\n// Define database schema\nconst DB_NAME = 'aarecovery.db';\nconst DB_VERSION = '1.0';\nconst DB_DISPLAY_NAME = 'AA Recovery Database';\n\n// Tables storage keys\nconst TABLES = {\n  USERS: 'aarecovery_users',\n  ACTIVITIES: 'aarecovery_activities',\n  SPIRITUAL_FITNESS: 'aarecovery_spiritual_fitness',\n  MEETINGS: 'aarecovery_meetings',\n  MEETING_REMINDERS: 'aarecovery_meeting_reminders',\n  NEARBY_MEMBERS: 'aarecovery_nearby_members'\n};\n\n// Initialize empty tables if they don't exist\nconst initializeTables = () => {\n  Object.values(TABLES).forEach(tableKey => {\n    if (!localStorage.getItem(tableKey)) {\n      localStorage.setItem(tableKey, JSON.stringify([]));\n    }\n  });\n  \n  console.log('Web localStorage tables initialized');\n};\n\n// Helper to get all items from a table\nconst getTableData = (tableKey) => {\n  try {\n    return JSON.parse(localStorage.getItem(tableKey)) || [];\n  } catch (error) {\n    console.error(`Error reading from ${tableKey}:`, error);\n    return [];\n  }\n};\n\n// Helper to save data to a table\nconst saveTableData = (tableKey, data) => {\n  try {\n    localStorage.setItem(tableKey, JSON.stringify(data));\n    return true;\n  } catch (error) {\n    console.error(`Error writing to ${tableKey}:`, error);\n    return false;\n  }\n};\n\n/**\n * Initialize the database\n * @returns {Promise<Object>} - Database object\n */\nexport const initDatabase = async () => {\n  console.log('Initializing web localStorage database...');\n  \n  try {\n    // Initialize tables\n    initializeTables();\n    \n    console.log('Web database initialized successfully');\n    return { isInitialized: true };\n  } catch (error) {\n    console.error('Error initializing web database:', error);\n    throw error;\n  }\n};\n\n/**\n * Close the database connection (no-op for web)\n */\nexport const closeDatabase = async () => {\n  console.log('Web database connection closed (no-op)');\n};\n\n/**\n * Execute a SQL-like query (simplified for localStorage)\n * This is a stub that provides minimal compatibility with the SQLite version\n * Only supports very basic operations\n */\nexport const executeSql = async (query, params = []) => {\n  console.log('Web executeSql called:', query, params);\n  \n  // Parse the query to determine operation and table\n  const queryLower = query.toLowerCase();\n  \n  // Very basic query parsing\n  if (queryLower.includes('create table')) {\n    // Create table is handled by initialization\n    return { rows: { length: 0 } };\n  } else if (queryLower.includes('select') && queryLower.includes('from')) {\n    // Basic SELECT query\n    const tableMatch = query.match(/from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      throw new Error('Invalid SELECT query: table not specified');\n    }\n    \n    const tableName = tableMatch[1].toLowerCase();\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(tableName)\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${tableName}`);\n    }\n    \n    const data = getTableData(tableKey);\n    \n    // Handle WHERE clause (very basic implementation)\n    let filteredData = data;\n    if (queryLower.includes('where')) {\n      const whereCondition = query.match(/where\\s+(.*?)(?:order by|limit|$)/i);\n      if (whereCondition && whereCondition[1]) {\n        const condition = whereCondition[1].trim();\n        \n        // Handle id = ? condition\n        if (condition.includes('id = ?') && params.length > 0) {\n          const idValue = params[0];\n          filteredData = data.filter(item => item.id === idValue);\n        } \n        // Handle user_id = ? condition\n        else if (condition.includes('user_id = ?') && params.length > 0) {\n          const userIdValue = params[0];\n          filteredData = data.filter(item => item.user_id === userIdValue);\n        }\n      }\n    }\n    \n    // Handle ORDER BY (very basic implementation)\n    if (queryLower.includes('order by')) {\n      const orderMatch = query.match(/order by\\s+(.*?)(?:limit|$)/i);\n      if (orderMatch && orderMatch[1]) {\n        const orderParts = orderMatch[1].trim().split(/\\s+/);\n        const orderField = orderParts[0];\n        const orderDesc = orderParts.length > 1 && orderParts[1].toLowerCase() === 'desc';\n        \n        filteredData.sort((a, b) => {\n          if (orderDesc) {\n            return a[orderField] > b[orderField] ? -1 : 1;\n          }\n          return a[orderField] > b[orderField] ? 1 : -1;\n        });\n      }\n    }\n    \n    // Handle LIMIT\n    if (queryLower.includes('limit') && params.length > 0) {\n      const limitMatch = query.match(/limit\\s+\\?/i);\n      if (limitMatch) {\n        const limitValue = parseInt(params[params.length - 1], 10);\n        if (!isNaN(limitValue)) {\n          filteredData = filteredData.slice(0, limitValue);\n        }\n      }\n    }\n    \n    // Create a rows object that mimics SQLite results\n    const rows = {\n      length: filteredData.length,\n      item: (index) => filteredData[index],\n      _array: filteredData\n    };\n    \n    return { rows };\n  } else if (queryLower.includes('insert into')) {\n    // Handle INSERT operation\n    const tableMatch = query.match(/insert into\\s+(\\w+)/i);\n    if (!tableMatch) {\n      throw new Error('Invalid INSERT query: table not specified');\n    }\n    \n    const tableName = tableMatch[1].toLowerCase();\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(tableName)\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${tableName}`);\n    }\n    \n    // Extract column names from query\n    const columnsMatch = query.match(/\\(([^)]+)\\)/);\n    if (!columnsMatch) {\n      throw new Error('Invalid INSERT query: columns not specified');\n    }\n    \n    const columns = columnsMatch[1].split(',').map(col => col.trim());\n    \n    // Create new object from columns and params\n    const newObject = {};\n    columns.forEach((col, index) => {\n      newObject[col] = params[index];\n    });\n    \n    // Add to table\n    const tableData = getTableData(tableKey);\n    tableData.push(newObject);\n    saveTableData(tableKey, tableData);\n    \n    return { insertId: newObject.id };\n  } else if (queryLower.includes('update')) {\n    // Handle UPDATE operation\n    const tableMatch = query.match(/update\\s+(\\w+)/i);\n    if (!tableMatch) {\n      throw new Error('Invalid UPDATE query: table not specified');\n    }\n    \n    const tableName = tableMatch[1].toLowerCase();\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(tableName)\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${tableName}`);\n    }\n    \n    // Get table data\n    const tableData = getTableData(tableKey);\n    \n    // Extract SET clause and parse field updates\n    const setMatch = query.match(/set\\s+(.*?)\\s+where/i);\n    if (!setMatch) {\n      throw new Error('Invalid UPDATE query: SET clause not found');\n    }\n    \n    const setClauses = setMatch[1].split(',').map(clause => clause.trim());\n    const updateFields = setClauses.map(clause => clause.split('=')[0].trim());\n    \n    // Find the object to update\n    let rowsAffected = 0;\n    const idValue = params[params.length - 1]; // ID is the last parameter\n    \n    const updatedData = tableData.map(item => {\n      if (item.id === idValue) {\n        const updatedItem = { ...item };\n        \n        // Apply updates\n        updateFields.forEach((field, index) => {\n          updatedItem[field] = params[index];\n        });\n        \n        rowsAffected++;\n        return updatedItem;\n      }\n      return item;\n    });\n    \n    saveTableData(tableKey, updatedData);\n    \n    return { rowsAffected };\n  } else if (queryLower.includes('delete')) {\n    // Handle DELETE operation\n    const tableMatch = query.match(/delete from\\s+(\\w+)/i);\n    if (!tableMatch) {\n      throw new Error('Invalid DELETE query: table not specified');\n    }\n    \n    const tableName = tableMatch[1].toLowerCase();\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(tableName)\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${tableName}`);\n    }\n    \n    // Get table data\n    const tableData = getTableData(tableKey);\n    \n    // Find items to delete\n    const idValue = params[0];\n    const filteredData = tableData.filter(item => item.id !== idValue);\n    \n    const rowsAffected = tableData.length - filteredData.length;\n    saveTableData(tableKey, filteredData);\n    \n    return { rowsAffected };\n  }\n  \n  throw new Error(`Unsupported query in web database: ${query}`);\n};\n\n/**\n * Get all rows from a table\n * @param {string} table - Table name\n * @returns {Promise<Array>} - Array of rows\n */\nexport const getAll = async (table) => {\n  try {\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(table.toLowerCase())\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${table}`);\n    }\n    \n    return getTableData(tableKey);\n  } catch (error) {\n    console.error(`Error getting all rows from ${table}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Get a row by ID\n * @param {string} table - Table name\n * @param {string} id - Row ID\n * @returns {Promise<Object|null>} - Row object or null if not found\n */\nexport const getById = async (table, id) => {\n  try {\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(table.toLowerCase())\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${table}`);\n    }\n    \n    const tableData = getTableData(tableKey);\n    return tableData.find(item => item.id === id) || null;\n  } catch (error) {\n    console.error(`Error getting row by id from ${table}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Insert a row into a table\n * @param {string} table - Table name\n * @param {Object} data - Data to insert\n * @returns {Promise<string>} - Row ID of the inserted row\n */\nexport const insert = async (table, data) => {\n  try {\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(table.toLowerCase())\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${table}`);\n    }\n    \n    const tableData = getTableData(tableKey);\n    tableData.push(data);\n    saveTableData(tableKey, tableData);\n    \n    return data.id;\n  } catch (error) {\n    console.error(`Error inserting into ${table}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Update a row in a table\n * @param {string} table - Table name\n * @param {string} id - Row ID\n * @param {Object} data - Data to update\n * @returns {Promise<number>} - Number of rows affected\n */\nexport const update = async (table, id, data) => {\n  try {\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(table.toLowerCase())\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${table}`);\n    }\n    \n    const tableData = getTableData(tableKey);\n    let rowsAffected = 0;\n    \n    const updatedData = tableData.map(item => {\n      if (item.id === id) {\n        rowsAffected++;\n        return { ...item, ...data };\n      }\n      return item;\n    });\n    \n    saveTableData(tableKey, updatedData);\n    return rowsAffected;\n  } catch (error) {\n    console.error(`Error updating ${table}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Delete a row from a table\n * @param {string} table - Table name\n * @param {string} id - Row ID\n * @returns {Promise<number>} - Number of rows affected\n */\nexport const deleteById = async (table, id) => {\n  try {\n    const tableKey = Object.values(TABLES).find(key => \n      key.toLowerCase().includes(table.toLowerCase())\n    );\n    \n    if (!tableKey) {\n      throw new Error(`Unknown table: ${table}`);\n    }\n    \n    const tableData = getTableData(tableKey);\n    const filteredData = tableData.filter(item => item.id !== id);\n    \n    const rowsAffected = tableData.length - filteredData.length;\n    saveTableData(tableKey, filteredData);\n    \n    return rowsAffected;\n  } catch (error) {\n    console.error(`Error deleting from ${table}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Calculate distance between two lat/long points\n * @param {number} lat1 - Latitude of first point\n * @param {number} lon1 - Longitude of first point\n * @param {number} lat2 - Latitude of second point\n * @param {number} lon2 - Longitude of second point\n * @returns {number} - Distance in miles\n */\nexport const calculateDistance = (lat1, lon1, lat2, lon2) => {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  }\n  \n  const radlat1 = (Math.PI * lat1) / 180;\n  const radlat2 = (Math.PI * lat2) / 180;\n  const theta = lon1 - lon2;\n  const radtheta = (Math.PI * theta) / 180;\n  \n  let dist = Math.sin(radlat1) * Math.sin(radlat2) + \n            Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  \n  if (dist > 1) {\n    dist = 1;\n  }\n  \n  dist = Math.acos(dist);\n  dist = (dist * 180) / Math.PI;\n  dist = dist * 60 * 1.1515; // Miles\n  \n  return dist;\n};\n\n/**\n * Calculate sobriety days based on sobriety date\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @returns {number} - Number of days sober\n */\nexport const calculateSobrietyDays = (sobrietyDate) => {\n  if (!sobrietyDate) return 0;\n  \n  const start = new Date(sobrietyDate);\n  const today = new Date();\n  \n  // Reset hours to compare dates only\n  start.setHours(0, 0, 0, 0);\n  today.setHours(0, 0, 0, 0);\n  \n  const diffTime = Math.abs(today - start);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays;\n};\n\n/**\n * Calculate sobriety years with decimal precision\n * @param {string} sobrietyDate - Sobriety date in ISO format\n * @param {number} decimalPlaces - Number of decimal places\n * @returns {number} - Years of sobriety with decimal precision\n */\nexport const calculateSobrietyYears = (sobrietyDate, decimalPlaces = 2) => {\n  const days = calculateSobrietyDays(sobrietyDate);\n  const years = days / 365.25; // Account for leap years\n  \n  return parseFloat(years.toFixed(decimalPlaces));\n};\n\n// Add all the operation objects from the native version\n// These should match the native SQLite version's API\n\n// User operations\nexport const userOperations = {\n  createUser: async (userData) => {\n    const now = new Date().toISOString();\n    const userId = userData.id || `user_${Date.now()}`;\n    \n    const data = {\n      id: userId,\n      name: userData.name || '',\n      sobriety_date: userData.sobrietyDate || null,\n      home_group: userData.homeGroup || '',\n      phone: userData.phone || '',\n      email: userData.email || '',\n      sponsor_id: userData.sponsorId || null,\n      privacy_settings: JSON.stringify(userData.privacySettings || {}),\n      created_at: now,\n      updated_at: now\n    };\n    \n    await insert('users', data);\n    return userId;\n  },\n  \n  getUserById: async (userId) => {\n    const user = await getById('users', userId);\n    \n    if (user) {\n      // Convert privacy_settings from JSON string to object\n      user.privacySettings = user.privacy_settings ? JSON.parse(user.privacy_settings) : {};\n      return user;\n    }\n    \n    return null;\n  },\n  \n  updateUser: async (userId, userData) => {\n    const updates = {\n      updated_at: new Date().toISOString()\n    };\n    \n    if (userData.name) updates.name = userData.name;\n    if (userData.sobrietyDate) updates.sobriety_date = userData.sobrietyDate;\n    if (userData.homeGroup) updates.home_group = userData.homeGroup;\n    if (userData.phone) updates.phone = userData.phone;\n    if (userData.email) updates.email = userData.email;\n    if (userData.sponsorId !== undefined) updates.sponsor_id = userData.sponsorId;\n    if (userData.privacySettings) {\n      updates.privacy_settings = JSON.stringify(userData.privacySettings);\n    }\n    \n    return await update('users', userId, updates);\n  }\n};\n\n// Activity operations\nexport const activityOperations = {\n  createActivity: async (activityData) => {\n    const now = new Date().toISOString();\n    const activityId = activityData.id || `activity_${Date.now()}`;\n    \n    const data = {\n      id: activityId,\n      user_id: activityData.userId,\n      type: activityData.type,\n      date: activityData.date || now,\n      duration: activityData.duration || 0,\n      notes: activityData.notes || '',\n      created_at: now\n    };\n    \n    await insert('activities', data);\n    return activityId;\n  },\n  \n  getUserActivities: async (userId) => {\n    try {\n      const results = await executeSql(\n        'SELECT * FROM activities WHERE user_id = ? ORDER BY date DESC',\n        [userId]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting user activities:', error);\n      throw error;\n    }\n  },\n  \n  getRecentActivities: async (userId, limit = 10) => {\n    try {\n      const results = await executeSql(\n        'SELECT * FROM activities WHERE user_id = ? ORDER BY date DESC LIMIT ?',\n        [userId, limit]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting recent activities:', error);\n      throw error;\n    }\n  },\n  \n  deleteActivity: async (activityId) => {\n    return await deleteById('activities', activityId);\n  }\n};\n\n// Spiritual fitness operations\nexport const spiritualFitnessOperations = {\n  calculateSpiritualFitness: async (userId) => {\n    try {\n      // Get user activities for the last 30 days\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const results = await executeSql(\n        'SELECT * FROM activities WHERE user_id = ? AND date >= ? ORDER BY date DESC',\n        [userId, thirtyDaysAgo.toISOString()]\n      );\n      \n      const activities = results.rows._array || [];\n      \n      // Calculate scores based on activity frequency and duration\n      const scores = {\n        prayer: 0,\n        meditation: 0,\n        reading: 0,\n        meeting: 0,\n        service: 0\n      };\n      \n      // Process each activity type\n      activities.forEach(activity => {\n        const type = activity.type.toLowerCase();\n        const duration = activity.duration || 0;\n        \n        if (type.includes('prayer')) {\n          scores.prayer += duration / 10; // 10 minutes per day is ideal\n        } else if (type.includes('meditation')) {\n          scores.meditation += duration / 15; // 15 minutes per day is ideal\n        } else if (type.includes('reading')) {\n          scores.reading += duration / 20; // 20 minutes per day is ideal\n        } else if (type.includes('meeting')) {\n          scores.meeting += 1; // Each meeting counts as 1 point\n        } else if (type.includes('service')) {\n          scores.service += duration / 30; // 30 minutes per week is ideal\n        }\n      });\n      \n      // Cap each score at 10\n      Object.keys(scores).forEach(key => {\n        scores[key] = Math.min(10, scores[key]);\n      });\n      \n      // Calculate total score (max 50)\n      const totalScore = Object.values(scores).reduce((sum, score) => sum + score, 0);\n      \n      // Convert to percentage (0-100) with 2 decimal precision\n      const finalScore = parseFloat(((totalScore / 50) * 100).toFixed(2));\n      \n      // Save to database\n      const now = new Date().toISOString();\n      const fitnessId = `sf_${Date.now()}`;\n      \n      const data = {\n        id: fitnessId,\n        user_id: userId,\n        score: finalScore,\n        prayer_score: scores.prayer,\n        meditation_score: scores.meditation,\n        reading_score: scores.reading,\n        meeting_score: scores.meeting,\n        service_score: scores.service,\n        calculated_at: now\n      };\n      \n      await insert('spiritual_fitness', data);\n      \n      return {\n        score: finalScore,\n        details: scores,\n        calculatedAt: now\n      };\n    } catch (error) {\n      console.error('Error calculating spiritual fitness:', error);\n      throw error;\n    }\n  }\n};\n\n// Meeting operations\nexport const meetingOperations = {\n  createMeeting: async (meetingData) => {\n    const now = new Date().toISOString();\n    const meetingId = meetingData.id || `meeting_${Date.now()}`;\n    \n    const data = {\n      id: meetingId,\n      name: meetingData.name || '',\n      day: meetingData.day || '',\n      time: meetingData.time || '',\n      location: meetingData.location || '',\n      address: meetingData.address || '',\n      city: meetingData.city || '',\n      state: meetingData.state || '',\n      zip: meetingData.zip || '',\n      type: meetingData.type || '',\n      notes: meetingData.notes || '',\n      shared: meetingData.shared === true ? 1 : 0,\n      created_by: meetingData.createdBy || null,\n      created_at: now,\n      updated_at: now\n    };\n    \n    await insert('meetings', data);\n    return meetingId;\n  },\n  \n  getSharedMeetings: async () => {\n    try {\n      const results = await executeSql(\n        'SELECT * FROM meetings WHERE shared = ? ORDER BY day, time',\n        [1]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting shared meetings:', error);\n      throw error;\n    }\n  },\n  \n  getUserMeetings: async (userId) => {\n    try {\n      const results = await executeSql(\n        'SELECT * FROM meetings WHERE created_by = ? ORDER BY day, time',\n        [userId]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting user meetings:', error);\n      throw error;\n    }\n  }\n};\n\n// Reminder operations\nexport const reminderOperations = {\n  createReminder: async (reminderData) => {\n    const now = new Date().toISOString();\n    const reminderId = reminderData.id || `reminder_${Date.now()}`;\n    \n    const data = {\n      id: reminderId,\n      meeting_id: reminderData.meetingId,\n      user_id: reminderData.userId,\n      reminder_time: reminderData.reminderTime || 30,\n      notification_id: reminderData.notificationId || null,\n      calendar_event_id: reminderData.calendarEventId || null,\n      created_at: now\n    };\n    \n    await insert('meeting_reminders', data);\n    return reminderId;\n  },\n  \n  getUserReminders: async (userId) => {\n    try {\n      const results = await executeSql(\n        'SELECT r.*, m.name, m.day, m.time, m.location ' +\n        'FROM meeting_reminders r ' +\n        'JOIN meetings m ON r.meeting_id = m.id ' +\n        'WHERE r.user_id = ? ' +\n        'ORDER BY m.day, m.time',\n        [userId]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting user reminders:', error);\n      throw error;\n    }\n  }\n};\n\n// Nearby members operations\nexport const nearbyMembersOperations = {\n  saveMemberDiscovery: async (discoveryData) => {\n    const now = new Date().toISOString();\n    const discoveryId = discoveryData.id || `discovery_${Date.now()}`;\n    \n    const data = {\n      id: discoveryId,\n      user_id: discoveryData.userId,\n      discovered_user_id: discoveryData.discoveredUserId,\n      discovery_type: discoveryData.discoveryType || 'bluetooth',\n      distance: discoveryData.distance || 0,\n      last_seen: now\n    };\n    \n    await insert('nearby_members', data);\n    return discoveryId;\n  },\n  \n  getNearbyMembers: async (userId) => {\n    try {\n      const results = await executeSql(\n        'SELECT d.*, u.name ' +\n        'FROM nearby_members d ' +\n        'JOIN users u ON d.discovered_user_id = u.id ' +\n        'WHERE d.user_id = ? ' +\n        'ORDER BY d.last_seen DESC',\n        [userId]\n      );\n      \n      return results.rows._array || [];\n    } catch (error) {\n      console.error('Error getting nearby members:', error);\n      throw error;\n    }\n  }\n};\n\n// Export everything\nexport default {\n  initDatabase,\n  closeDatabase,\n  executeSql,\n  getAll,\n  getById,\n  insert,\n  update,\n  deleteById,\n  calculateDistance,\n  calculateSobrietyDays,\n  calculateSobrietyYears,\n  userOperations,\n  activityOperations,\n  spiritualFitnessOperations,\n  meetingOperations,\n  reminderOperations,\n  nearbyMembersOperations\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}