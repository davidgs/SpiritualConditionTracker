{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.renderToImageAsync = renderToImageAsync;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _reactNative = require(\"react-native\");\nvar _ExpoFontUtils = _interopRequireDefault(require(\"./ExpoFontUtils\"));\nfunction renderToImageAsync(_x, _x2) {\n  return _renderToImageAsync.apply(this, arguments);\n}\nfunction _renderToImageAsync() {\n  _renderToImageAsync = (0, _asyncToGenerator2.default)(function* (glyphs, options) {\n    if (!_ExpoFontUtils.default) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'ExpoFontUtils.renderToImageAsync');\n    }\n    return yield _ExpoFontUtils.default.renderToImageAsync(glyphs, Object.assign({}, options, {\n      color: options != null && options.color ? (0, _reactNative.processColor)(options.color) : undefined\n    }));\n  });\n  return _renderToImageAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_expoModulesCore","require","_reactNative","_ExpoFontUtils","_interopRequireDefault","renderToImageAsync","_x","_x2","_renderToImageAsync","apply","arguments","_asyncToGenerator2","default","glyphs","options","ExpoFontUtils","UnavailabilityError","Object","assign","color","processColor","undefined"],"sources":["/home/runner/workspace/node_modules/expo-font/src/FontUtils.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { processColor } from 'react-native';\n\nimport ExpoFontUtils from './ExpoFontUtils';\nimport { RenderToImageOptions } from './FontUtils.types';\n\n/**\n * Creates an image with provided text.\n * @param glyphs Text to be exported.\n * @param options RenderToImageOptions.\n * @return Promise which fulfils with uri to image.\n * @platform android\n * @platform ios\n */\nexport async function renderToImageAsync(\n  glyphs: string,\n  options?: RenderToImageOptions\n): Promise<string> {\n  if (!ExpoFontUtils) {\n    throw new UnavailabilityError('expo-font', 'ExpoFontUtils.renderToImageAsync');\n  }\n\n  return await ExpoFontUtils.renderToImageAsync(glyphs, {\n    ...options,\n    color: options?.color ? processColor(options.color) : undefined,\n  });\n}\n"],"mappings":";;;;;;AAAA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AAEA,IAAAE,cAAA,GAAAC,sBAAA,CAAAH,OAAA;AAA4C,SAWtBI,kBAAkBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,oBAAA;EAAAA,mBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAjC,WACLC,MAAc,EACdC,OAA8B;IAE9B,IAAI,CAACC,sBAAa,EAAE;MAClB,MAAM,IAAIC,oCAAmB,CAAC,WAAW,EAAE,kCAAkC,CAAC;IAChF;IAEA,aAAaD,sBAAa,CAACV,kBAAkB,CAACQ,MAAM,EAAAI,MAAA,CAAAC,MAAA,KAC/CJ,OAAO;MACVK,KAAK,EAAEL,OAAO,YAAPA,OAAO,CAAEK,KAAK,GAAG,IAAAC,yBAAY,EAACN,OAAO,CAACK,KAAK,CAAC,GAAGE;IAAS,EAChE,CAAC;EACJ,CAAC;EAAA,OAAAb,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}