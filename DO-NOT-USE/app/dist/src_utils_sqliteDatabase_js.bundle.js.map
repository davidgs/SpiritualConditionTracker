{"version":3,"file":"src_utils_sqliteDatabase_js.bundle.js","mappings":"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","sources":["webpack://spiritual-condition-tracker/./src/utils/sqliteDatabase.js"],"sourcesContent":["/**\n * SQLite database implementation for the Spiritual Condition Tracker\n * Handles data persistence using SQLite instead of localStorage\n */\n\n// Initialize the SQLite database\nlet db = null;\n\n/**\n * Initialize all database tables and create database connection\n */\nexport async function initDatabase() {\n  console.log(\"Initializing SQLite database...\");\n  \n  try {\n    // Check for browser or native SQLite implementations\n    if (window.openDatabase) {\n      // Browser implementation (WebSQL)\n      console.log(\"Using WebSQL implementation for browser\");\n      db = window.openDatabase(\n        'spiritualTracker.db',\n        '1.0',\n        'Spiritual Condition Tracker Database',\n        5 * 1024 * 1024 // 5MB\n      );\n    } else if (window.sqlitePlugin && window.sqlitePlugin.openDatabase) {\n      // Native SQLite implementation (Cordova/React Native)\n      console.log(\"Using native SQLite implementation\");\n      db = window.sqlitePlugin.openDatabase({\n        name: 'spiritualTracker.db',\n        location: 'default'\n      });\n    } else {\n      // No SQLite implementation available\n      console.error(\"SQLite not available - falling back to localStorage\");\n      initLocalStorageBackup();\n      return false;\n    }\n    \n    // Create tables if they don't exist\n    await createTables();\n    \n    console.log(\"SQLite database initialized successfully\");\n    return true;\n  } catch (error) {\n    console.error(\"Error initializing SQLite database:\", error);\n    // Fall back to localStorage if SQLite fails\n    initLocalStorageBackup();\n    return false;\n  }\n}\n\n/**\n * Create database tables if they don't exist\n */\nasync function createTables() {\n  return new Promise((resolve, reject) => {\n    // Use a transaction for creating all tables\n    db.transaction(tx => {\n      // Users table\n      tx.executeSql(`\n        CREATE TABLE IF NOT EXISTS users (\n          id TEXT PRIMARY KEY,\n          name TEXT,\n          lastName TEXT,\n          phoneNumber TEXT,\n          email TEXT,\n          sobrietyDate TEXT,\n          homeGroups TEXT,\n          privacySettings TEXT,\n          preferences TEXT,\n          sponsor TEXT,\n          sponsees TEXT,\n          messagingKeys TEXT,\n          createdAt TEXT,\n          updatedAt TEXT\n        )\n      `);\n      \n      // Activities table\n      tx.executeSql(`\n        CREATE TABLE IF NOT EXISTS activities (\n          id TEXT PRIMARY KEY,\n          type TEXT NOT NULL,\n          duration INTEGER,\n          date TEXT,\n          notes TEXT,\n          meeting TEXT,\n          createdAt TEXT,\n          updatedAt TEXT\n        )\n      `);\n      \n      // Meetings table\n      tx.executeSql(`\n        CREATE TABLE IF NOT EXISTS meetings (\n          id TEXT PRIMARY KEY,\n          name TEXT NOT NULL,\n          days TEXT,\n          time TEXT,\n          schedule TEXT,\n          address TEXT,\n          locationName TEXT,\n          streetAddress TEXT,\n          city TEXT,\n          state TEXT,\n          zipCode TEXT,\n          coordinates TEXT,\n          createdAt TEXT,\n          updatedAt TEXT\n        )\n      `);\n      \n      // Messages table\n      tx.executeSql(`\n        CREATE TABLE IF NOT EXISTS messages (\n          id TEXT PRIMARY KEY,\n          senderId TEXT,\n          recipientId TEXT,\n          content TEXT,\n          encrypted BOOLEAN,\n          timestamp TEXT,\n          read BOOLEAN\n        )\n      `);\n    }, error => {\n      console.error(\"Error creating tables:\", error);\n      reject(error);\n    }, () => {\n      console.log(\"Tables created successfully\");\n      resolve();\n    });\n  });\n}\n\n/**\n * Initialize localStorage as a backup if SQLite is not available\n */\nfunction initLocalStorageBackup() {\n  console.log(\"Initializing localStorage backup...\");\n  \n  if (!window.db) {\n    window.db = {\n      users: JSON.parse(localStorage.getItem('users') || '[]'),\n      activities: JSON.parse(localStorage.getItem('activities') || '[]'),\n      meetings: JSON.parse(localStorage.getItem('meetings') || '[]'),\n      messages: JSON.parse(localStorage.getItem('messages') || '[]'),\n      user: JSON.parse(localStorage.getItem('user') || 'null')\n    };\n  }\n}\n\n/**\n * Get all items from a collection\n * @param {string} collection - The collection name\n * @returns {Promise<Array>} All items in the collection\n */\nexport async function getAll(collection) {\n  return new Promise((resolve, reject) => {\n    // Check if we're using SQLite or localStorage\n    if (!db) {\n      // Fallback to localStorage\n      const items = window.db[collection] || [];\n      resolve(items);\n      return;\n    }\n    \n    // Otherwise use SQLite\n    db.transaction(tx => {\n      tx.executeSql(\n        `SELECT * FROM ${collection}`,\n        [],\n        (_, result) => {\n          const items = [];\n          const len = result.rows.length;\n          \n          for (let i = 0; i < len; i++) {\n            const item = result.rows.item(i);\n            \n            // Parse JSON fields\n            if (collection === 'users') {\n              item.privacySettings = JSON.parse(item.privacySettings || '{}');\n              item.preferences = JSON.parse(item.preferences || '{}');\n              item.homeGroups = JSON.parse(item.homeGroups || '[]');\n              item.sponsor = JSON.parse(item.sponsor || 'null');\n              item.sponsees = JSON.parse(item.sponsees || '[]');\n              item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n            } else if (collection === 'meetings') {\n              item.days = JSON.parse(item.days || '[]');\n              item.schedule = JSON.parse(item.schedule || '[]');\n              item.coordinates = JSON.parse(item.coordinates || 'null');\n            }\n            \n            items.push(item);\n          }\n          \n          resolve(items);\n        },\n        (_, error) => {\n          console.error(`Error getting items from ${collection}:`, error);\n          reject(error);\n        }\n      );\n    });\n  });\n}\n\n/**\n * Get an item by ID from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<Object|null>} The found item or null\n */\nexport async function getById(collection, id) {\n  return new Promise((resolve, reject) => {\n    // Check if we're using SQLite or localStorage\n    if (!db) {\n      // Fallback to localStorage\n      const items = window.db[collection] || [];\n      const item = items.find(item => item.id === id) || null;\n      resolve(item);\n      return;\n    }\n    \n    // Otherwise use SQLite\n    db.transaction(tx => {\n      tx.executeSql(\n        `SELECT * FROM ${collection} WHERE id = ?`,\n        [id],\n        (_, result) => {\n          if (result.rows.length === 0) {\n            resolve(null);\n            return;\n          }\n          \n          const item = result.rows.item(0);\n          \n          // Parse JSON fields\n          if (collection === 'users') {\n            item.privacySettings = JSON.parse(item.privacySettings || '{}');\n            item.preferences = JSON.parse(item.preferences || '{}');\n            item.homeGroups = JSON.parse(item.homeGroups || '[]');\n            item.sponsor = JSON.parse(item.sponsor || 'null');\n            item.sponsees = JSON.parse(item.sponsees || '[]');\n            item.messagingKeys = JSON.parse(item.messagingKeys || '{}');\n          } else if (collection === 'meetings') {\n            item.days = JSON.parse(item.days || '[]');\n            item.schedule = JSON.parse(item.schedule || '[]');\n            item.coordinates = JSON.parse(item.coordinates || 'null');\n          }\n          \n          resolve(item);\n        },\n        (_, error) => {\n          console.error(`Error getting item from ${collection}:`, error);\n          reject(error);\n        }\n      );\n    });\n  });\n}\n\n/**\n * Add an item to a collection\n * @param {string} collection - The collection name\n * @param {Object} item - The item to add\n * @returns {Promise<Object>} The added item\n */\nexport async function add(collection, item) {\n  return new Promise((resolve, reject) => {\n    // Generate ID if not provided\n    if (!item.id) {\n      item.id = `${collection.slice(0, -1)}_${Date.now()}`;\n    }\n    \n    // Add timestamps\n    const now = new Date().toISOString();\n    item.createdAt = now;\n    item.updatedAt = now;\n    \n    // Check if we're using SQLite or localStorage\n    if (!db) {\n      // Fallback to localStorage\n      const items = window.db[collection] || [];\n      items.push(item);\n      window.db[collection] = items;\n      \n      // Save to localStorage\n      localStorage.setItem(collection, JSON.stringify(items));\n      \n      // Special case for user (single instance)\n      if (collection === 'users' && items.length === 1) {\n        window.db.user = item;\n        localStorage.setItem('user', JSON.stringify(item));\n      }\n      \n      resolve(item);\n      return;\n    }\n    \n    // Otherwise use SQLite\n    db.transaction(tx => {\n      if (collection === 'users') {\n        const privacySettings = JSON.stringify(item.privacySettings || {});\n        const preferences = JSON.stringify(item.preferences || {});\n        const homeGroups = JSON.stringify(item.homeGroups || []);\n        const sponsor = JSON.stringify(item.sponsor || null);\n        const sponsees = JSON.stringify(item.sponsees || []);\n        const messagingKeys = JSON.stringify(item.messagingKeys || {});\n        \n        tx.executeSql(\n          `INSERT INTO users (\n            id, name, lastName, phoneNumber, email, sobrietyDate, \n            homeGroups, privacySettings, preferences, sponsor, sponsees, \n            messagingKeys, createdAt, updatedAt\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n          [\n            item.id, item.name, item.lastName, item.phoneNumber, item.email, \n            item.sobrietyDate, homeGroups, privacySettings, preferences, \n            sponsor, sponsees, messagingKeys, item.createdAt, item.updatedAt\n          ],\n          (_, result) => {\n            resolve(item);\n          },\n          (_, error) => {\n            console.error(`Error adding item to ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'activities') {\n        tx.executeSql(\n          `INSERT INTO activities (\n            id, type, duration, date, notes, meeting, createdAt, updatedAt\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,\n          [\n            item.id, item.type, item.duration, item.date, item.notes, \n            item.meeting, item.createdAt, item.updatedAt\n          ],\n          (_, result) => {\n            resolve(item);\n          },\n          (_, error) => {\n            console.error(`Error adding item to ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'meetings') {\n        const days = JSON.stringify(item.days || []);\n        const schedule = JSON.stringify(item.schedule || []);\n        const coordinates = JSON.stringify(item.coordinates || null);\n        \n        tx.executeSql(\n          `INSERT INTO meetings (\n            id, name, days, time, schedule, address, locationName, \n            streetAddress, city, state, zipCode, coordinates, createdAt, updatedAt\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n          [\n            item.id, item.name, days, item.time, schedule, item.address, \n            item.locationName, item.streetAddress, item.city, item.state, \n            item.zipCode, coordinates, item.createdAt, item.updatedAt\n          ],\n          (_, result) => {\n            resolve(item);\n          },\n          (_, error) => {\n            console.error(`Error adding item to ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'messages') {\n        tx.executeSql(\n          `INSERT INTO messages (\n            id, senderId, recipientId, content, encrypted, timestamp, read\n          ) VALUES (?, ?, ?, ?, ?, ?, ?)`,\n          [\n            item.id, item.senderId, item.recipientId, item.content, \n            item.encrypted ? 1 : 0, item.timestamp, item.read ? 1 : 0\n          ],\n          (_, result) => {\n            resolve(item);\n          },\n          (_, error) => {\n            console.error(`Error adding item to ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else {\n        reject(new Error(`Unknown collection: ${collection}`));\n      }\n    });\n  });\n}\n\n/**\n * Update an item in a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @param {Object} updates - The updates to apply\n * @returns {Promise<Object|null>} The updated item or null if not found\n */\nexport async function update(collection, id, updates) {\n  return new Promise(async (resolve, reject) => {\n    // Update timestamp\n    updates.updatedAt = new Date().toISOString();\n    \n    // Check if we're using SQLite or localStorage\n    if (!db) {\n      // Fallback to localStorage\n      const items = window.db[collection] || [];\n      const index = items.findIndex(item => item.id === id);\n      \n      if (index === -1) {\n        resolve(null);\n        return;\n      }\n      \n      const updatedItem = { ...items[index], ...updates };\n      items[index] = updatedItem;\n      window.db[collection] = items;\n      \n      // Save to localStorage\n      localStorage.setItem(collection, JSON.stringify(items));\n      \n      // Special case for user (single instance)\n      if (collection === 'users' && id === window.db.user?.id) {\n        window.db.user = updatedItem;\n        localStorage.setItem('user', JSON.stringify(updatedItem));\n      }\n      \n      resolve(updatedItem);\n      return;\n    }\n    \n    // Get the existing item first to merge updates\n    const existingItem = await getById(collection, id);\n    \n    if (!existingItem) {\n      resolve(null);\n      return;\n    }\n    \n    // Merge existing item with updates\n    const updatedItem = { ...existingItem, ...updates };\n    \n    // Otherwise use SQLite\n    db.transaction(tx => {\n      if (collection === 'users') {\n        const privacySettings = JSON.stringify(updatedItem.privacySettings || {});\n        const preferences = JSON.stringify(updatedItem.preferences || {});\n        const homeGroups = JSON.stringify(updatedItem.homeGroups || []);\n        const sponsor = JSON.stringify(updatedItem.sponsor || null);\n        const sponsees = JSON.stringify(updatedItem.sponsees || []);\n        const messagingKeys = JSON.stringify(updatedItem.messagingKeys || {});\n        \n        tx.executeSql(\n          `UPDATE users SET \n            name = ?, lastName = ?, phoneNumber = ?, email = ?, sobrietyDate = ?, \n            homeGroups = ?, privacySettings = ?, preferences = ?, sponsor = ?, \n            sponsees = ?, messagingKeys = ?, updatedAt = ?\n          WHERE id = ?`,\n          [\n            updatedItem.name, updatedItem.lastName, updatedItem.phoneNumber, updatedItem.email, \n            updatedItem.sobrietyDate, homeGroups, privacySettings, preferences, \n            sponsor, sponsees, messagingKeys, updatedItem.updatedAt, id\n          ],\n          (_, result) => {\n            if (result.rowsAffected === 0) {\n              resolve(null);\n            } else {\n              resolve(updatedItem);\n            }\n          },\n          (_, error) => {\n            console.error(`Error updating item in ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'activities') {\n        tx.executeSql(\n          `UPDATE activities SET \n            type = ?, duration = ?, date = ?, notes = ?, meeting = ?, updatedAt = ?\n          WHERE id = ?`,\n          [\n            updatedItem.type, updatedItem.duration, updatedItem.date, \n            updatedItem.notes, updatedItem.meeting, updatedItem.updatedAt, id\n          ],\n          (_, result) => {\n            if (result.rowsAffected === 0) {\n              resolve(null);\n            } else {\n              resolve(updatedItem);\n            }\n          },\n          (_, error) => {\n            console.error(`Error updating item in ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'meetings') {\n        const days = JSON.stringify(updatedItem.days || []);\n        const schedule = JSON.stringify(updatedItem.schedule || []);\n        const coordinates = JSON.stringify(updatedItem.coordinates || null);\n        \n        tx.executeSql(\n          `UPDATE meetings SET \n            name = ?, days = ?, time = ?, schedule = ?, address = ?, locationName = ?, \n            streetAddress = ?, city = ?, state = ?, zipCode = ?, \n            coordinates = ?, updatedAt = ?\n          WHERE id = ?`,\n          [\n            updatedItem.name, days, updatedItem.time, schedule, updatedItem.address, \n            updatedItem.locationName, updatedItem.streetAddress, updatedItem.city, \n            updatedItem.state, updatedItem.zipCode, coordinates, updatedItem.updatedAt, id\n          ],\n          (_, result) => {\n            if (result.rowsAffected === 0) {\n              resolve(null);\n            } else {\n              resolve(updatedItem);\n            }\n          },\n          (_, error) => {\n            console.error(`Error updating item in ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else if (collection === 'messages') {\n        tx.executeSql(\n          `UPDATE messages SET \n            content = ?, encrypted = ?, read = ?\n          WHERE id = ?`,\n          [\n            updatedItem.content, updatedItem.encrypted ? 1 : 0, \n            updatedItem.read ? 1 : 0, id\n          ],\n          (_, result) => {\n            if (result.rowsAffected === 0) {\n              resolve(null);\n            } else {\n              resolve(updatedItem);\n            }\n          },\n          (_, error) => {\n            console.error(`Error updating item in ${collection}:`, error);\n            reject(error);\n          }\n        );\n      } else {\n        reject(new Error(`Unknown collection: ${collection}`));\n      }\n    });\n  });\n}\n\n/**\n * Remove an item from a collection\n * @param {string} collection - The collection name\n * @param {string} id - The item ID\n * @returns {Promise<boolean>} Whether the item was removed\n */\nexport async function remove(collection, id) {\n  return new Promise((resolve, reject) => {\n    // Check if we're using SQLite or localStorage\n    if (!db) {\n      // Fallback to localStorage\n      const items = window.db[collection] || [];\n      const index = items.findIndex(item => item.id === id);\n      \n      if (index === -1) {\n        resolve(false);\n        return;\n      }\n      \n      items.splice(index, 1);\n      window.db[collection] = items;\n      \n      // Save to localStorage\n      localStorage.setItem(collection, JSON.stringify(items));\n      \n      resolve(true);\n      return;\n    }\n    \n    // Otherwise use SQLite\n    db.transaction(tx => {\n      tx.executeSql(\n        `DELETE FROM ${collection} WHERE id = ?`,\n        [id],\n        (_, result) => {\n          resolve(result.rowsAffected > 0);\n        },\n        (_, error) => {\n          console.error(`Error removing item from ${collection}:`, error);\n          reject(error);\n        }\n      );\n    });\n  });\n}\n\n/**\n * Query items in a collection\n * @param {string} collection - The collection name\n * @param {Function} predicate - Filter function\n * @returns {Promise<Array>} Filtered items\n */\nexport async function query(collection, predicate) {\n  // For now, get all items and filter in memory\n  // In a future version, this could be optimized to use SQL WHERE clauses\n  const items = await getAll(collection);\n  return items.filter(predicate);\n}\n\n/**\n * Calculate distance between two lat/long points\n * @param {number} lat1 - Latitude of first point\n * @param {number} lon1 - Longitude of first point\n * @param {number} lat2 - Latitude of second point\n * @param {number} lon2 - Longitude of second point\n * @returns {number} - Distance in miles\n */\nexport function calculateDistance(lat1, lon1, lat2, lon2) {\n  if (lat1 === lat2 && lon1 === lon2) {\n    return 0;\n  }\n  \n  const radlat1 = (Math.PI * lat1) / 180;\n  const radlat2 = (Math.PI * lat2) / 180;\n  const theta = lon1 - lon2;\n  const radtheta = (Math.PI * theta) / 180;\n  let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n  \n  if (dist > 1) {\n    dist = 1;\n  }\n  \n  dist = Math.acos(dist);\n  dist = (dist * 180) / Math.PI;\n  dist = dist * 60 * 1.1515; // Miles\n  return dist;\n}\n\n/**\n * Get user preference\n * @param {string} key - The preference key\n * @returns {Promise<any>} The preference value\n */\nexport async function getPreference(key) {\n  const user = await getById('users', 'user_1'); // Assuming single user\n  return user?.preferences?.[key];\n}\n\n/**\n * Set user preference\n * @param {string} key - The preference key\n * @param {any} value - The preference value\n * @returns {Promise<void>}\n */\nexport async function setPreference(key, value) {\n  const user = await getById('users', 'user_1'); // Assuming single user\n  \n  if (!user) {\n    return;\n  }\n  \n  const preferences = user.preferences || {};\n  preferences[key] = value;\n  \n  await update('users', user.id, { preferences });\n}\n\n// Expose methods on window.db for backwards compatibility\nexport function setupGlobalDbObject() {\n  window.db = {\n    getAll,\n    getById,\n    add,\n    update,\n    remove,\n    query,\n    calculateDistance,\n    getPreference,\n    setPreference,\n    \n    // Add a calculateSpiritualFitness method that works with activities\n    calculateSpiritualFitness: async function(activities, timeframe = 30) {\n      if (!activities || activities.length === 0) {\n        return 20; // Base score if no activities\n      }\n      \n      try {\n        // Get user preference for timeframe if available\n        const storedTimeframe = await getPreference('fitnessTimeframe');\n        const calculationTimeframe = storedTimeframe ? parseInt(storedTimeframe, 10) : timeframe;\n        \n        // Start with a base score\n        const baseScore = 20;\n        let score = baseScore;\n        const now = new Date();\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - calculationTimeframe);\n        \n        // Filter activities to those within the timeframe\n        const recentActivities = activities.filter(activity => \n          new Date(activity.date) >= cutoffDate && new Date(activity.date) <= now\n        );\n        \n        if (recentActivities.length === 0) {\n          return baseScore; // Base score only if no recent activities\n        }\n        \n        // Calculate points based on activities\n        const activityPoints = Math.min(40, recentActivities.length * 2); // Cap at 40 points\n        \n        // Calculate consistency points\n        // Group activities by day to check daily activity\n        const activityDayMap = {};\n        recentActivities.forEach(activity => {\n          const day = new Date(activity.date).toISOString().split('T')[0];\n          if (!activityDayMap[day]) {\n            activityDayMap[day] = [];\n          }\n          activityDayMap[day].push(activity);\n        });\n        \n        // Count days with activities\n        const daysWithActivities = Object.keys(activityDayMap).length;\n        \n        // Calculate consistency as a percentage of the timeframe days\n        const consistencyPercentage = daysWithActivities / calculationTimeframe;\n        const consistencyPoints = Math.round(consistencyPercentage * 40); // Up to 40 points for consistency\n        \n        // Total score\n        score = baseScore + activityPoints + consistencyPoints;\n        \n        // Ensure score doesn't exceed 100\n        score = Math.min(100, score);\n        \n        // Round to 2 decimal places\n        score = Math.round(score * 100) / 100;\n        \n        return score;\n      } catch (error) {\n        console.error('Error calculating spiritual fitness:', error);\n        return 20; // Default base score on error\n      }\n    }\n  };\n  \n  return window.db;\n}\n\n// Export all functions and data\nexport const dbOperations = {\n  initDatabase,\n  getAll,\n  getById,\n  add,\n  update,\n  remove,\n  query,\n  calculateDistance,\n  getPreference,\n  setPreference,\n  setupGlobalDbObject\n};\n\nexport default dbOperations;"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","db","initDatabase","_initDatabase","_callee2","_callee2$","_context2","console","log","window","openDatabase","sqlitePlugin","location","error","initLocalStorageBackup","createTables","t0","_createTables","_callee3","_callee3$","_context3","reject","transaction","tx","executeSql","users","JSON","parse","localStorage","getItem","activities","meetings","messages","user","getAll","_x","_getAll","_callee4","collection","_callee4$","_context4","items","concat","_","result","len","rows","item","privacySettings","preferences","homeGroups","sponsor","sponsees","messagingKeys","days","schedule","coordinates","getById","_x2","_x3","_getById","_callee5","id","_callee5$","_context5","find","add","_x4","_x5","_add","_callee6","_callee6$","_context6","Date","now","toISOString","createdAt","updatedAt","setItem","stringify","lastName","phoneNumber","email","sobrietyDate","duration","date","notes","meeting","time","address","locationName","streetAddress","city","state","zipCode","senderId","recipientId","content","encrypted","timestamp","read","update","_x6","_x7","_x8","_update","_callee8","updates","_callee8$","_context8","_ref","_callee7","_window$db$user","index","_updatedItem","existingItem","updatedItem","_callee7$","_context7","findIndex","_objectSpread","rowsAffected","_x15","_x16","remove","_x9","_x0","_remove","_callee9","_callee9$","_context9","splice","query","_x1","_x10","_query","_callee0","predicate","_callee0$","_context0","filter","calculateDistance","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","getPreference","_x11","_getPreference","_callee1","key","_user$preferences","_callee1$","_context1","setPreference","_x12","_x13","_setPreference","_callee10","_callee10$","_context10","setupGlobalDbObject","calculateSpiritualFitness","_calculateSpiritualFitness","_callee","timeframe","storedTimeframe","calculationTimeframe","baseScore","score","cutoffDate","recentActivities","activityPoints","activityDayMap","daysWithActivities","consistencyPercentage","consistencyPoints","_args","_callee$","_context","undefined","parseInt","setDate","getDate","activity","min","day","split","round","_x14","dbOperations"],"sourceRoot":""}